{"classes":[{"name":"org.bukkit.WorldType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents various types of worlds that may exist","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.WorldType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.WorldType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the name of this WorldType","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByName","comment_text":"Gets a Worldtype by its name","return_type":"org.bukkit.WorldType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the WorldType to get","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NORMAL","FLAT","VERSION_1_1","LARGE_BIOMES","AMPLIFIED","CUSTOMIZED","BUFFET"]},{"name":"org.bukkit.WorldCreator","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents various types of options that may be used to create a world.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldCreator","comment_text":"Creates an empty WorldCreationOptions for the given world name","parameters":[{"name":"name","comment_text":"Name of the world that will be created","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"copy","comment_text":"Copies the options from the specified world","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"world","comment_text":"World to copy options from","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"copy","comment_text":"Copies the options from the specified {@link WorldCreator}","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"creator","comment_text":"World creator to copy options from","type":"org.bukkit.WorldCreator","type_dimension":""}],"throws":[]},{"name":"name","comment_text":"Gets the name of the world that is to be loaded or created.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"seed","comment_text":"Gets the seed that will be used to create this world","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"seed","comment_text":"Sets the seed that will be used to create this world","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"seed","comment_text":"World seed","type":"long","type_dimension":""}],"throws":[]},{"name":"environment","comment_text":"Gets the environment that will be used to create or load the world","return_type":"org.bukkit.World.Environment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"environment","comment_text":"Sets the environment that will be used to create or load the world","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"env","comment_text":"World environment","type":"org.bukkit.World.Environment","type_dimension":""}],"throws":[]},{"name":"type","comment_text":"Gets the type of the world that will be created or loaded","return_type":"org.bukkit.WorldType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"type","comment_text":"Sets the type of the world that will be created or loaded","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"type","comment_text":"World type","type":"org.bukkit.WorldType","type_dimension":""}],"throws":[]},{"name":"generator","comment_text":"Gets the generator that will be used to create or load the world.\n <p>\n This may be null, in which case the \"natural\" generator for this\n environment will be used.","return_type":"org.bukkit.generator.ChunkGenerator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"generator","comment_text":"Sets the generator that will be used to create or load the world.\n <p>\n This may be null, in which case the \"natural\" generator for this\n environment will be used.","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"generator","comment_text":"Chunk generator","type":"org.bukkit.generator.ChunkGenerator","type_dimension":""}],"throws":[]},{"name":"generator","comment_text":"Sets the generator that will be used to create or load the world.\n <p>\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n <p>\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the console.","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"generator","comment_text":"Name of the generator to use, in \"plugin:id\" notation","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"generator","comment_text":"Sets the generator that will be used to create or load the world.\n <p>\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n <p>\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the specified output","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"generator","comment_text":"Name of the generator to use, in \"plugin:id\" notation","type":"java.lang.String","type_dimension":""},{"name":"output","comment_text":"{@link CommandSender} that will receive any error\n     messages","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"generatorSettings","comment_text":"Sets the generator settings of the world that will be created or loaded","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"generatorSettings","comment_text":"The settings that should be used by the generator","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"generatorSettings","comment_text":"Gets the generator settings of the world that will be created or loaded","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"generateStructures","comment_text":"Sets whether or not worlds created or loaded with this creator will\n have structures.","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"generate","comment_text":"Whether to generate structures","type":"boolean","type_dimension":""}],"throws":[]},{"name":"generateStructures","comment_text":"Gets whether or not structures will be generated in the world.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createWorld","comment_text":"Creates a world with the specified options.\n <p>\n If the world already exists, it will be loaded from disk and some\n options may be ignored.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"name","comment_text":"Creates a new {@link WorldCreator} for the given world name","return_type":"org.bukkit.WorldCreator","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the world to load or create","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getGeneratorForName","comment_text":"Attempts to get the {@link ChunkGenerator} with the given name.\n <p>\n If the generator is not found, null will be returned and a message will\n be printed to the specified {@link CommandSender} explaining why.\n <p>\n The name must be in the \"plugin:id\" notation, or optionally just\n \"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\n optional unique identifier for the generator you wish to request from\n the plugin.","return_type":"org.bukkit.generator.ChunkGenerator","return_type_dimension":"","parameters":[{"name":"world","comment_text":"Name of the world this will be used for","type":"java.lang.String","type_dimension":""},{"name":"name","comment_text":"Name of the generator to retrieve","type":"java.lang.String","type_dimension":""},{"name":"output","comment_text":"Where to output if errors are present","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.WorldBorder","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"reset","comment_text":"Resets the border to default values.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSize","comment_text":"Gets the current side length of the border.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSize","comment_text":"Sets the border to a square region with the specified side length in blocks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newSize","comment_text":"The new size of the border.","type":"double","type_dimension":""}],"throws":[]},{"name":"setSize","comment_text":"Sets the border to a square region with the specified side length in blocks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newSize","comment_text":"The new side length of the border.","type":"double","type_dimension":""},{"name":"seconds","comment_text":"The time in seconds in which the border grows or shrinks from the previous size to that being set.","type":"long","type_dimension":""}],"throws":[]},{"name":"getCenter","comment_text":"Gets the current border center.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCenter","comment_text":"Sets the new border center.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The new center x-coordinate.","type":"double","type_dimension":""},{"name":"z","comment_text":"The new center z-coordinate.","type":"double","type_dimension":""}],"throws":[]},{"name":"setCenter","comment_text":"Sets the new border center.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The new location of the border center. (Only x/z used)","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getDamageBuffer","comment_text":"Gets the current border damage buffer.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDamageBuffer","comment_text":"Sets the amount of blocks a player may safely be outside the border before taking damage.","return_type":"void","return_type_dimension":"","parameters":[{"name":"blocks","comment_text":"The amount of blocks. (The default is 5 blocks.)","type":"double","type_dimension":""}],"throws":[]},{"name":"getDamageAmount","comment_text":"Gets the current border damage amount.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDamageAmount","comment_text":"Sets the amount of damage a player takes when outside the border plus the border buffer.","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"The amount of damage. (The default is 0.2 damage per second per block.)","type":"double","type_dimension":""}],"throws":[]},{"name":"getWarningTime","comment_text":"Gets the current border warning time in seconds.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWarningTime","comment_text":"Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.","return_type":"void","return_type_dimension":"","parameters":[{"name":"seconds","comment_text":"The amount of time in seconds. (The default is 15 seconds.)","type":"int","type_dimension":""}],"throws":[]},{"name":"getWarningDistance","comment_text":"Gets the current border warning distance.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWarningDistance","comment_text":"Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.","return_type":"void","return_type_dimension":"","parameters":[{"name":"distance","comment_text":"The distance in blocks. (The default is 5 blocks.)","type":"int","type_dimension":""}],"throws":[]},{"name":"isInside","comment_text":"Check if the specified location is inside this border.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to check","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.World","interfaces":["org.bukkit.plugin.messaging.PluginMessageRecipient","org.bukkit.metadata.Metadatable"],"superclass":"","comment_text":"Represents a world, which may contain entities, chunks and blocks","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlockAt","comment_text":"Gets the {@link Block} at the given coordinates","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the block","type":"int","type_dimension":""},{"name":"y","comment_text":"Y-coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the block","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlockAt","comment_text":"Gets the {@link Block} at the given {@link Location}","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location of the block","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getHighestBlockYAt","comment_text":"Gets the y coordinate of the lowest block at this position such that the\n block and all blocks above it are transparent for lighting purposes.","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the blocks","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the blocks","type":"int","type_dimension":""}],"throws":[]},{"name":"getHighestBlockYAt","comment_text":"Gets the y coordinate of the lowest block at the given {@link Location}\n such that the block and all blocks above it are transparent for lighting\n purposes.","return_type":"int","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location of the blocks","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getHighestBlockAt","comment_text":"Gets the lowest block at the given coordinates such that the block and\n all blocks above it are transparent for lighting purposes.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the block","type":"int","type_dimension":""}],"throws":[]},{"name":"getHighestBlockAt","comment_text":"Gets the lowest block at the given {@link Location} such that the block\n and all blocks above it are transparent for lighting purposes.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Coordinates to get the highest block","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getChunkAt","comment_text":"Gets the {@link Chunk} at the given coordinates","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"getChunkAt","comment_text":"Gets the {@link Chunk} at the given {@link Location}","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location of the chunk","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getChunkAt","comment_text":"Gets the {@link Chunk} that contains the given {@link Block}","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[{"name":"block","comment_text":"Block to get the containing chunk from","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]},{"name":"isChunkLoaded","comment_text":"Checks if the specified {@link Chunk} is loaded","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"chunk","comment_text":"The chunk to check","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]},{"name":"getLoadedChunks","comment_text":"Gets an array of all loaded {@link Chunk}s","return_type":"org.bukkit.Chunk","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"loadChunk","comment_text":"Loads the specified {@link Chunk}","return_type":"void","return_type_dimension":"","parameters":[{"name":"chunk","comment_text":"The chunk to load","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]},{"name":"isChunkLoaded","comment_text":"Checks if the {@link Chunk} at the specified coordinates is loaded","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"isChunkInUse","comment_text":"Checks if the {@link Chunk} at the specified coordinates is loaded and\n in use by one or more players","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"loadChunk","comment_text":"Loads the {@link Chunk} at the specified coordinates\n <p>\n If the chunk does not exist, it will be generated.\n <p>\n This method is analogous to {@link #loadChunk(int, int, boolean)} where\n generate is true.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"loadChunk","comment_text":"Loads the {@link Chunk} at the specified coordinates","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""},{"name":"generate","comment_text":"Whether or not to generate a chunk if it doesn't\n     already exist","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unloadChunk","comment_text":"Safely unloads and saves the {@link Chunk} at the specified coordinates\n <p>\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where safe and saveis true","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"chunk","comment_text":"the chunk to unload","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]},{"name":"unloadChunk","comment_text":"Safely unloads and saves the {@link Chunk} at the specified coordinates\n <p>\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where safe and saveis true","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"unloadChunk","comment_text":"Safely unloads and optionally saves the {@link Chunk} at the specified\n coordinates\n <p>\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where save is true","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""},{"name":"save","comment_text":"Whether or not to save the chunk","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unloadChunk","comment_text":"Unloads and optionally saves the {@link Chunk} at the specified\n coordinates","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""},{"name":"save","comment_text":"Controls whether the chunk is saved","type":"boolean","type_dimension":""},{"name":"safe","comment_text":"Controls whether to unload the chunk when players are\n     nearby","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unloadChunkRequest","comment_text":"Safely queues the {@link Chunk} at the specified coordinates for\n unloading\n <p>\n This method is analogous to {@link #unloadChunkRequest(int, int,\n boolean)} where safe is true","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"unloadChunkRequest","comment_text":"Queues the {@link Chunk} at the specified coordinates for unloading","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""},{"name":"safe","comment_text":"Controls whether to queue the chunk when players are nearby","type":"boolean","type_dimension":""}],"throws":[]},{"name":"regenerateChunk","comment_text":"Regenerates the {@link Chunk} at the specified coordinates","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"refreshChunk","comment_text":"Resends the {@link Chunk} to all clients","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the chunk","type":"int","type_dimension":""}],"throws":[]},{"name":"dropItem","comment_text":"Drops an item at the specified {@link Location}","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location to drop the item","type":"org.bukkit.Location","type_dimension":""},{"name":"item","comment_text":"ItemStack to drop","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"dropItemNaturally","comment_text":"Drops an item at the specified {@link Location} with a random offset","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location to drop the item","type":"org.bukkit.Location","type_dimension":""},{"name":"item","comment_text":"ItemStack to drop","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"spawnArrow","comment_text":"Creates an {@link Arrow} entity at the given {@link Location}","return_type":"org.bukkit.entity.Arrow","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location to spawn the arrow","type":"org.bukkit.Location","type_dimension":""},{"name":"direction","comment_text":"Direction to shoot the arrow in","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"speed","comment_text":"Speed of the arrow. A recommend speed is 0.6","type":"float","type_dimension":""},{"name":"spread","comment_text":"Spread of the arrow. A recommend spread is 12","type":"float","type_dimension":""}],"throws":[]},{"name":"spawnArrow","comment_text":"Creates an arrow entity of the given class at the given {@link Location}","return_type":"T","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location to spawn the arrow","type":"org.bukkit.Location","type_dimension":""},{"name":"direction","comment_text":"Direction to shoot the arrow in","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"speed","comment_text":"Speed of the arrow. A recommend speed is 0.6","type":"float","type_dimension":""},{"name":"spread","comment_text":"Spread of the arrow. A recommend spread is 12","type":"float","type_dimension":""},{"name":"clazz","comment_text":"the Entity class for the arrow\n {@link org.bukkit.entity.SpectralArrow},{@link org.bukkit.entity.Arrow},{@link org.bukkit.entity.TippedArrow}","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"generateTree","comment_text":"Creates a tree at the given {@link Location}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"Location to spawn the tree","type":"org.bukkit.Location","type_dimension":""},{"name":"type","comment_text":"Type of the tree to create","type":"org.bukkit.TreeType","type_dimension":""}],"throws":[]},{"name":"generateTree","comment_text":"Creates a tree at the given {@link Location}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"Location to spawn the tree","type":"org.bukkit.Location","type_dimension":""},{"name":"type","comment_text":"Type of the tree to create","type":"org.bukkit.TreeType","type_dimension":""},{"name":"delegate","comment_text":"A class to call for each block changed as a result of\n     this method","type":"org.bukkit.BlockChangeDelegate","type_dimension":""}],"throws":[]},{"name":"spawnEntity","comment_text":"Creates a entity at the given {@link Location}","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location to spawn the entity","type":"org.bukkit.Location","type_dimension":""},{"name":"type","comment_text":"The entity to spawn","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"strikeLightning","comment_text":"Strikes lightning at the given {@link Location}","return_type":"org.bukkit.entity.LightningStrike","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location to strike lightning","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"strikeLightningEffect","comment_text":"Strikes lightning at the given {@link Location} without doing damage","return_type":"org.bukkit.entity.LightningStrike","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location to strike lightning","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getEntities","comment_text":"Get a list of all entities in this World","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLivingEntities","comment_text":"Get a list of all living entities in this World","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntitiesByClass","comment_text":"Get a collection of all entities in this World matching the given\n class/interface","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"classes","comment_text":"The classes representing the types of entity to match","type":"java.lang.Class","type_dimension":"[]"}],"throws":[]},{"name":"getEntitiesByClass","comment_text":"Get a collection of all entities in this World matching the given\n class/interface","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"cls","comment_text":"The class representing the type of entity to match","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getEntitiesByClasses","comment_text":"Get a collection of all entities in this World matching any of the\n given classes/interfaces","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"classes","comment_text":"The classes representing the types of entity to match","type":"java.lang.Class","type_dimension":"[]"}],"throws":[]},{"name":"getPlayers","comment_text":"Get a list of all players in this World","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNearbyEntities","comment_text":"Returns a list of entities within a bounding box centered around a Location.\n\n Some implementations may impose artificial restrictions on the size of the search bounding box.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The center of the bounding box","type":"org.bukkit.Location","type_dimension":""},{"name":"x","comment_text":"1/2 the size of the box along x axis","type":"double","type_dimension":""},{"name":"y","comment_text":"1/2 the size of the box along y axis","type":"double","type_dimension":""},{"name":"z","comment_text":"1/2 the size of the box along z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the unique name of this world","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUID","comment_text":"Gets the Unique ID of this world","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpawnLocation","comment_text":"Gets the default spawn {@link Location} of this world","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnLocation","comment_text":"Sets the spawn location of the world.\n <br>\n The location provided must be equal to this world.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The {@link Location} to set the spawn for this world at.","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"setSpawnLocation","comment_text":"Sets the spawn location of the world","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"int","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"int","type_dimension":""}],"throws":[]},{"name":"getTime","comment_text":"Gets the relative in-game time of this world.\n <p>\n The relative time is analogous to hours * 1000","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTime","comment_text":"Sets the relative in-game time on the server.\n <p>\n The relative time is analogous to hours * 1000\n <p>\n Note that setting the relative time below the current relative time\n will actually move the clock forward a day. If you require to rewind\n time, please see {@link #setFullTime(long)}","return_type":"void","return_type_dimension":"","parameters":[{"name":"time","comment_text":"The new relative time to set the in-game time to (in\n     hours*1000)","type":"long","type_dimension":""}],"throws":[]},{"name":"getFullTime","comment_text":"Gets the full in-game time on this world","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFullTime","comment_text":"Sets the in-game time on the server\n <p>\n Note that this sets the full time of the world, which may cause adverse\n effects such as breaking redstone clocks and any scheduled events","return_type":"void","return_type_dimension":"","parameters":[{"name":"time","comment_text":"The new absolute time to set this world to","type":"long","type_dimension":""}],"throws":[]},{"name":"hasStorm","comment_text":"Returns whether the world has an ongoing storm.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStorm","comment_text":"Set whether there is a storm. A duration will be set for the new\n current conditions.","return_type":"void","return_type_dimension":"","parameters":[{"name":"hasStorm","comment_text":"Whether there is rain and snow","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getWeatherDuration","comment_text":"Get the remaining time in ticks of the current conditions.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWeatherDuration","comment_text":"Set the remaining time in ticks of the current conditions.","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"Time in ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"isThundering","comment_text":"Returns whether there is thunder.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setThundering","comment_text":"Set whether it is thundering.","return_type":"void","return_type_dimension":"","parameters":[{"name":"thundering","comment_text":"Whether it is thundering","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getThunderDuration","comment_text":"Get the thundering duration.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setThunderDuration","comment_text":"Set the thundering duration.","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"Duration in ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"createExplosion","comment_text":"Creates explosion at given coordinates with given power","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""},{"name":"power","comment_text":"The power of explosion, where 4F is TNT","type":"float","type_dimension":""}],"throws":[]},{"name":"createExplosion","comment_text":"Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""},{"name":"power","comment_text":"The power of explosion, where 4F is TNT","type":"float","type_dimension":""},{"name":"setFire","comment_text":"Whether or not to set blocks on fire","type":"boolean","type_dimension":""}],"throws":[]},{"name":"createExplosion","comment_text":"Creates explosion at given coordinates with given power and optionally\n setting blocks on fire or breaking blocks.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""},{"name":"power","comment_text":"The power of explosion, where 4F is TNT","type":"float","type_dimension":""},{"name":"setFire","comment_text":"Whether or not to set blocks on fire","type":"boolean","type_dimension":""},{"name":"breakBlocks","comment_text":"Whether or not to have blocks be destroyed","type":"boolean","type_dimension":""}],"throws":[]},{"name":"createExplosion","comment_text":"Creates explosion at given coordinates with given power","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"Location to blow up","type":"org.bukkit.Location","type_dimension":""},{"name":"power","comment_text":"The power of explosion, where 4F is TNT","type":"float","type_dimension":""}],"throws":[]},{"name":"createExplosion","comment_text":"Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"Location to blow up","type":"org.bukkit.Location","type_dimension":""},{"name":"power","comment_text":"The power of explosion, where 4F is TNT","type":"float","type_dimension":""},{"name":"setFire","comment_text":"Whether or not to set blocks on fire","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEnvironment","comment_text":"Gets the {@link Environment} type of this world","return_type":"org.bukkit.World.Environment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSeed","comment_text":"Gets the Seed for this world.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPVP","comment_text":"Gets the current PVP setting for this world.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPVP","comment_text":"Sets the PVP setting for this world.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pvp","comment_text":"True/False whether PVP should be Enabled.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getGenerator","comment_text":"Gets the chunk generator for this world","return_type":"org.bukkit.generator.ChunkGenerator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"save","comment_text":"Saves world to disk","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPopulators","comment_text":"Gets a list of all applied {@link BlockPopulator}s for this World","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"spawn","comment_text":"Spawn an entity of a specific class at the given {@link Location}","return_type":"T","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} to spawn the entity at","type":"org.bukkit.Location","type_dimension":""},{"name":"clazz","comment_text":"the class of the {@link Entity} to spawn","type":"java.lang.Class","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if either parameter is null or the\n     {@link Entity} requested cannot be spawned"}]},{"name":"spawn","comment_text":"Spawn an entity of a specific class at the given {@link Location}, with\n the supplied function run before the entity is added to the world.\n <br>\n Note that when the function is run, the entity will not be actually in\n the world. Any operation involving such as teleporting the entity is undefined\n until after this function returns.","return_type":"T","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} to spawn the entity at","type":"org.bukkit.Location","type_dimension":""},{"name":"clazz","comment_text":"the class of the {@link Entity} to spawn","type":"java.lang.Class","type_dimension":""},{"name":"function","comment_text":"the function to be run before the entity is spawned.","type":"org.bukkit.util.Consumer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if either parameter is null or the\n     {@link Entity} requested cannot be spawned"}]},{"name":"spawnFallingBlock","comment_text":"Spawn a {@link FallingBlock} entity at the given {@link Location} of\n the specified {@link Material}. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n <p>\n The Material must be a block type, check with {@link Material#isBlock()\n material.isBlock()}. The Material may not be air.","return_type":"org.bukkit.entity.FallingBlock","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The {@link Location} to spawn the FallingBlock","type":"org.bukkit.Location","type_dimension":""},{"name":"data","comment_text":"The block data","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if {@link Location} or {@link\n     MaterialData} are null or {@link Material} of the {@link MaterialData} is not a block"}]},{"name":"spawnFallingBlock","comment_text":"Spawn a {@link FallingBlock} entity at the given {@link Location} of\n the specified {@link Material}. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n <p>\n The Material must be a block type, check with {@link Material#isBlock()\n material.isBlock()}. The Material may not be air.","return_type":"org.bukkit.entity.FallingBlock","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The {@link Location} to spawn the FallingBlock","type":"org.bukkit.Location","type_dimension":""},{"name":"data","comment_text":"The block data","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if {@link Location} or {@link\n     BlockData} are null"}]},{"name":"spawnFallingBlock","comment_text":"Spawn a {@link FallingBlock} entity at the given {@link Location} of the\n specified {@link Material}. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n <p>\n The Material must be a block type, check with {@link Material#isBlock()\n material.isBlock()}. The Material may not be air.","return_type":"org.bukkit.entity.FallingBlock","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The {@link Location} to spawn the FallingBlock","type":"org.bukkit.Location","type_dimension":""},{"name":"material","comment_text":"The block {@link Material} type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"The block data","type":"byte","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if {@link Location} or {@link\n     Material} are null or {@link Material} is not a block"}]},{"name":"playEffect","comment_text":"Plays an effect to all players within a default radius around a given\n location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} around which players must be to\n     hear the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"int","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Plays an effect to all players within a given radius around a location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} around which players must be to\n     hear the effect","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"int","type_dimension":""},{"name":"radius","comment_text":"the radius around the location","type":"int","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Plays an effect to all players within a default radius around a given\n location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} around which players must be to\n     hear the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"T","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Plays an effect to all players within a given radius around a location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the {@link Location} around which players must be to\n     hear the effect","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"T","type_dimension":""},{"name":"radius","comment_text":"the radius around the location","type":"int","type_dimension":""}],"throws":[]},{"name":"getEmptyChunkSnapshot","comment_text":"Get empty chunk snapshot (equivalent to all air blocks), optionally\n including valid biome data. Used for representing an ungenerated chunk,\n or for fetching only biome data without loading a chunk.","return_type":"org.bukkit.ChunkSnapshot","return_type_dimension":"","parameters":[{"name":"x","comment_text":"- chunk x coordinate","type":"int","type_dimension":""},{"name":"z","comment_text":"- chunk z coordinate","type":"int","type_dimension":""},{"name":"includeBiome","comment_text":"- if true, snapshot includes per-coordinate biome\n     type","type":"boolean","type_dimension":""},{"name":"includeBiomeTemp","comment_text":"- if true, snapshot includes per-coordinate\n     raw biome temperature","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setSpawnFlags","comment_text":"Sets the spawn flags for this.","return_type":"void","return_type_dimension":"","parameters":[{"name":"allowMonsters","comment_text":"- if true, monsters are allowed to spawn in this\n     world.","type":"boolean","type_dimension":""},{"name":"allowAnimals","comment_text":"- if true, animals are allowed to spawn in this\n     world.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAllowAnimals","comment_text":"Gets whether animals can spawn in this world.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowMonsters","comment_text":"Gets whether monsters can spawn in this world.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBiome","comment_text":"Gets the biome for the given block coordinates.","return_type":"org.bukkit.block.Biome","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate of the block","type":"int","type_dimension":""}],"throws":[]},{"name":"setBiome","comment_text":"Sets the biome for the given block coordinates","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate of the block","type":"int","type_dimension":""},{"name":"bio","comment_text":"new Biome type for this block","type":"org.bukkit.block.Biome","type_dimension":""}],"throws":[]},{"name":"getTemperature","comment_text":"Gets the temperature for the given block coordinates.\n <p>\n It is safe to run this method when the block does not exist, it will\n not create the block.","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate of the block","type":"int","type_dimension":""}],"throws":[]},{"name":"getHumidity","comment_text":"Gets the humidity for the given block coordinates.\n <p>\n It is safe to run this method when the block does not exist, it will\n not create the block.","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate of the block","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate of the block","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxHeight","comment_text":"Gets the maximum height of this world.\n <p>\n If the max height is 100, there are only blocks from y=0 to y=99.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSeaLevel","comment_text":"Gets the sea level for this world.\n <p>\n This is often half of {@link #getMaxHeight()}","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKeepSpawnInMemory","comment_text":"Gets whether the world's spawn area should be kept loaded into memory\n or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKeepSpawnInMemory","comment_text":"Sets whether the world's spawn area should be kept loaded into memory\n or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"keepLoaded","comment_text":"if true then the world's spawn area will be kept\n     loaded into memory.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isAutoSave","comment_text":"Gets whether or not the world will automatically save","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAutoSave","comment_text":"Sets whether or not the world will automatically save","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"true if the world should automatically save, otherwise\n     false","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setDifficulty","comment_text":"Sets the Difficulty of the world.","return_type":"void","return_type_dimension":"","parameters":[{"name":"difficulty","comment_text":"the new difficulty you want to set the world to","type":"org.bukkit.Difficulty","type_dimension":""}],"throws":[]},{"name":"getDifficulty","comment_text":"Gets the Difficulty of the world.","return_type":"org.bukkit.Difficulty","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldFolder","comment_text":"Gets the folder of this world on disk.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldType","comment_text":"Gets the type of this world.","return_type":"org.bukkit.WorldType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"canGenerateStructures","comment_text":"Gets whether or not structures are being generated.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksPerAnimalSpawns","comment_text":"Gets the world's ticks per animal spawns value\n <p>\n This value determines how many ticks there are between attempts to\n spawn animals.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n <li>A value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b>\n If set to 0, animal spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n <p>\n Minecraft default: 400.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTicksPerAnimalSpawns","comment_text":"Sets the world's ticks per animal spawns value\n <p>\n This value determines how many ticks there are between attempts to\n spawn animals.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n <li>A value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b>\n If set to 0, animal spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n <p>\n Minecraft default: 400.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticksPerAnimalSpawns","comment_text":"the ticks per animal spawns value you want\n     to set the world to","type":"int","type_dimension":""}],"throws":[]},{"name":"getTicksPerMonsterSpawns","comment_text":"Gets the world's ticks per monster spawns value\n <p>\n This value determines how many ticks there are between attempts to\n spawn monsters.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters in\n     this world every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b>\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n <p>\n Minecraft default: 1.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTicksPerMonsterSpawns","comment_text":"Sets the world's ticks per monster spawns value\n <p>\n This value determines how many ticks there are between attempts to\n spawn monsters.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters in\n     this world on every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b>\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n <p>\n Minecraft default: 1.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticksPerMonsterSpawns","comment_text":"the ticks per monster spawns value you\n     want to set the world to","type":"int","type_dimension":""}],"throws":[]},{"name":"getMonsterSpawnLimit","comment_text":"Gets limit for number of monsters that can spawn in a chunk in this\n world","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMonsterSpawnLimit","comment_text":"Sets the limit for number of monsters that can spawn in a chunk in this\n world\n <p>\n <b>Note:</b> If set to a negative number the world will use the\n server-wide spawn limit instead.","return_type":"void","return_type_dimension":"","parameters":[{"name":"limit","comment_text":"the new mob limit","type":"int","type_dimension":""}],"throws":[]},{"name":"getAnimalSpawnLimit","comment_text":"Gets the limit for number of animals that can spawn in a chunk in this\n world","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAnimalSpawnLimit","comment_text":"Sets the limit for number of animals that can spawn in a chunk in this\n world\n <p>\n <b>Note:</b> If set to a negative number the world will use the\n server-wide spawn limit instead.","return_type":"void","return_type_dimension":"","parameters":[{"name":"limit","comment_text":"the new mob limit","type":"int","type_dimension":""}],"throws":[]},{"name":"getWaterAnimalSpawnLimit","comment_text":"Gets the limit for number of water animals that can spawn in a chunk in\n this world","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWaterAnimalSpawnLimit","comment_text":"Sets the limit for number of water animals that can spawn in a chunk in\n this world\n <p>\n <b>Note:</b> If set to a negative number the world will use the\n server-wide spawn limit instead.","return_type":"void","return_type_dimension":"","parameters":[{"name":"limit","comment_text":"the new mob limit","type":"int","type_dimension":""}],"throws":[]},{"name":"getAmbientSpawnLimit","comment_text":"Gets the limit for number of ambient mobs that can spawn in a chunk in\n this world","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAmbientSpawnLimit","comment_text":"Sets the limit for number of ambient mobs that can spawn in a chunk in\n this world\n <p>\n <b>Note:</b> If set to a negative number the world will use the\n server-wide spawn limit instead.","return_type":"void","return_type_dimension":"","parameters":[{"name":"limit","comment_text":"the new mob limit","type":"int","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a Sound at the provided Location in the World\n <p>\n This function will fail silently if Location or Sound are null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"The sound to play","type":"org.bukkit.Sound","type_dimension":""},{"name":"volume","comment_text":"The volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a Sound at the provided Location in the World.\n <p>\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the players if their clients do not have the\n respective sound for the value passed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"the internal sound name to play","type":"java.lang.String","type_dimension":""},{"name":"volume","comment_text":"the volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"the pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a Sound at the provided Location in the World.\n <p>\n This function will fail silently if Location or Sound are null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"The sound to play","type":"org.bukkit.Sound","type_dimension":""},{"name":"category","comment_text":"the category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""},{"name":"volume","comment_text":"The volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a Sound at the provided Location in the World.\n <p>\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the players if their clients do not have the respective\n sound for the value passed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"the internal sound name to play","type":"java.lang.String","type_dimension":""},{"name":"category","comment_text":"the category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""},{"name":"volume","comment_text":"the volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"the pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"getGameRules","comment_text":"Get an array containing the names of all the {@link GameRule}s.","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getGameRuleValue","comment_text":"Gets the current state of the specified rule\n <p>\n Will return null if rule passed is null","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"Rule to look up value of","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setGameRuleValue","comment_text":"Set the specified gamerule to specified value.\n <p>\n The rule may attempt to validate the value passed, will return true if\n value was set.\n <p>\n If rule is null, the function will return false.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"Rule to set","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"Value to set rule to","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isGameRule","comment_text":"Checks if string is a valid game rule","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"Rule to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getGameRuleValue","comment_text":"Get the current value for a given {@link GameRule}.","return_type":"T","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"the GameRule to check","type":"org.bukkit.GameRule","type_dimension":""}],"throws":[]},{"name":"getGameRuleDefault","comment_text":"Get the default value for a given {@link GameRule}. This value is not\n guaranteed to match the current value.","return_type":"T","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"the rule to return a default value for","type":"org.bukkit.GameRule","type_dimension":""}],"throws":[]},{"name":"setGameRule","comment_text":"Set the given {@link GameRule}'s new value.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"the GameRule to update","type":"org.bukkit.GameRule","type_dimension":""},{"name":"newValue","comment_text":"the new value","type":"T","type_dimension":""}],"throws":[]},{"name":"getWorldBorder","comment_text":"Gets the world border for this world.","return_type":"org.bukkit.WorldBorder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""},{"name":"force","comment_text":"whether to send the particle to players within an extended\n              range and encourage their client to render it regardless of\n              settings","type":"boolean","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""},{"name":"force","comment_text":"whether to send the particle to players within an extended\n              range and encourage their client to render it regardless of\n              settings","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.World.Environment","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents various map environment types that a world may be","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.World.Environment","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.World.Environment","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"Gets the dimension ID of this environment","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEnvironment","comment_text":"Get an environment by ID","return_type":"org.bukkit.World.Environment","return_type_dimension":"","parameters":[{"name":"id","comment_text":"The ID of the environment","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["NORMAL","NETHER","THE_END"]},{"name":"org.bukkit.WeatherType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum of all current weather types","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.WeatherType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.WeatherType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["DOWNFALL","CLEAR"]},{"name":"org.bukkit.Warning","interfaces":["java.lang.annotation.Annotation"],"superclass":"","comment_text":"This designates the warning state for a specific item.\n <p>\n When the server settings dictate 'default' warnings, warnings are printed\n if the {@link #value()} is true.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.Warning.WarningState","interfaces":[],"superclass":"java.lang.Enum","comment_text":"This represents the states that server verbose for warnings may be.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Warning.WarningState","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Warning.WarningState","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"printFor","comment_text":"This method checks the provided warning should be printed for this\n state","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"warning","comment_text":"The warning annotation added to a deprecated item","type":"org.bukkit.Warning","type_dimension":""}],"throws":[]},{"name":"value","comment_text":"This method returns the corresponding warning state for the given\n string value.","return_type":"org.bukkit.Warning.WarningState","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The string value to check","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ON","OFF","DEFAULT"]},{"name":"org.bukkit.Utility","interfaces":["java.lang.annotation.Annotation"],"superclass":"","comment_text":"This annotation indicates a method (and sometimes constructor) will chain\n its internal operations.\n <p>\n This is solely meant for identifying methods that don't need to be\n overridden / handled manually.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.UnsafeValues","interfaces":[],"superclass":"","comment_text":"This interface provides value conversions that may be specific to a\n runtime, or have arbitrary meaning (read: magic values).\n <p>\n Their existence and behavior is not guaranteed across future versions. They\n may be poorly named, throw exceptions, have misleading parameters, or any\n other bad programming practice.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"toLegacy","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"material","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"fromLegacy","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"material","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"fromLegacy","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"material","comment_text":"","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"fromLegacy","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"material","comment_text":"","type":"org.bukkit.material.MaterialData","type_dimension":""},{"name":"itemPriority","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"fromLegacy","comment_text":"","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"","type":"byte","type_dimension":""}],"throws":[]},{"name":"getDataVersion","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"modifyItemStack","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"arguments","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"checkSupported","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"pdf","comment_text":"","type":"org.bukkit.plugin.PluginDescriptionFile","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidPluginException","comment_text":""}]},{"name":"processClass","comment_text":"","return_type":"byte","return_type_dimension":"[]","parameters":[{"name":"pdf","comment_text":"","type":"org.bukkit.plugin.PluginDescriptionFile","type_dimension":""},{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"clazz","comment_text":"","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"loadAdvancement","comment_text":"Load an advancement represented by the specified string into the server.\n The advancement format is governed by Minecraft and has no specified\n layout.\n <br>\n It is currently a JSON object, as described by the Minecraft Wiki:\n http://minecraft.gamepedia.com/Advancements\n <br>\n Loaded advancements will be stored and persisted across server restarts\n and reloads.\n <br>\n Callers should be prepared for {@link Exception} to be thrown.","return_type":"org.bukkit.advancement.Advancement","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the unique advancement key","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"advancement","comment_text":"representation of the advancement","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"removeAdvancement","comment_text":"Delete an advancement which was loaded and saved by\n {@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.\n <br>\n This method will only remove advancement from persistent storage. It\n should be accompanied by a call to {@link Server#reloadData()} in order\n to fully remove it from the running instance.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the unique advancement key","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.TreeType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Tree and organic structure types.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.TreeType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.TreeType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["TREE","BIG_TREE","REDWOOD","TALL_REDWOOD","BIRCH","JUNGLE","SMALL_JUNGLE","COCOA_TREE","JUNGLE_BUSH","RED_MUSHROOM","BROWN_MUSHROOM","SWAMP","ACACIA","DARK_OAK","MEGA_REDWOOD","TALL_BIRCH","CHORUS_PLANT"]},{"name":"org.bukkit.TreeSpecies","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different species of trees regardless of size.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.TreeSpecies","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.TreeSpecies","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this species","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the TreeSpecies with the given data value","return_type":"org.bukkit.TreeSpecies","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["GENERIC","REDWOOD","BIRCH","JUNGLE","ACACIA","DARK_OAK"]},{"name":"org.bukkit.TravelAgent","interfaces":[],"superclass":"","comment_text":"The Travel Agent handles the creation and the research of Nether and End\n portals when Entities try to use one.\n <p>\n It is used in {@link org.bukkit.event.entity.EntityPortalEvent} and in\n {@link org.bukkit.event.player.PlayerPortalEvent} to help developers\n reproduce and/or modify Vanilla behaviour.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setSearchRadius","comment_text":"Set the Block radius to search in for available portals.","return_type":"org.bukkit.TravelAgent","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"the radius in which to search for a portal from the\n     location","type":"int","type_dimension":""}],"throws":[]},{"name":"getSearchRadius","comment_text":"Gets the search radius value for finding an available portal.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCreationRadius","comment_text":"Sets the maximum radius from the given location to create a portal.","return_type":"org.bukkit.TravelAgent","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"the radius in which to create a portal from the location","type":"int","type_dimension":""}],"throws":[]},{"name":"getCreationRadius","comment_text":"Gets the maximum radius from the given location to create a portal.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCanCreatePortal","comment_text":"Returns whether the TravelAgent will attempt to create a destination\n portal or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCanCreatePortal","comment_text":"Sets whether the TravelAgent should attempt to create a destination\n portal or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"create","comment_text":"Sets whether the TravelAgent should create a destination\n     portal or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"findOrCreate","comment_text":"Attempt to find a portal near the given location, if a portal is not\n found it will attempt to create one.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location where the search for a portal should begin","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"findPortal","comment_text":"Attempt to find a portal near the given location.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the desired location of the portal","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"createPortal","comment_text":"Attempt to create a portal near the given location.\n <p>\n In the case of a Nether portal teleportation, this will attempt to\n create a Nether portal.\n <p>\n In the case of an Ender portal teleportation, this will (re-)create the\n obsidian platform and clean blocks above it.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the desired location of the portal","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Tag","interfaces":[],"superclass":"","comment_text":"Represents a tag that may be defined by the server or a resource pack to\n group like things together.\n\n Note that whilst all tags defined within this interface must be present in\n implementations, their existence is not guaranteed across future versions.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"REGISTRY_BLOCKS","comment_text":"Key for the built in block registry.","type":"java.lang.String","type_dimension":""},{"name":"WOOL","comment_text":"Vanilla block tag representing all colors of wool.","type":"org.bukkit.Tag","type_dimension":""},{"name":"PLANKS","comment_text":"Vanilla block tag representing all plank variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"STONE_BRICKS","comment_text":"Vanilla block tag representing all regular/mossy/cracked/chiseled stone\n bricks.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_BUTTONS","comment_text":"Vanilla block tag representing all wooden buttons.","type":"org.bukkit.Tag","type_dimension":""},{"name":"BUTTONS","comment_text":"Vanilla block tag representing all buttons (inherits from\n {@link #WOODEN_BUTTONS}.","type":"org.bukkit.Tag","type_dimension":""},{"name":"CARPETS","comment_text":"Vanilla block tag representing all colors of carpet.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_DOORS","comment_text":"Vanilla block tag representing all wooden doors.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_STAIRS","comment_text":"Vanilla block tag representing all wooden stairs.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_SLABS","comment_text":"Vanilla block tag representing all wooden slabs.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_PRESSURE_PLATES","comment_text":"Vanilla block tag representing all wooden pressure plates.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WOODEN_TRAPDOORS","comment_text":"Vanilla block tag representing all wooden trapdoors.","type":"org.bukkit.Tag","type_dimension":""},{"name":"DOORS","comment_text":"Vanilla block tag representing all doors (inherits from\n {@link #WOODEN_DOORS}.","type":"org.bukkit.Tag","type_dimension":""},{"name":"SAPLINGS","comment_text":"Vanilla block tag representing all sapling variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"LOGS","comment_text":"Vanilla block tag representing all log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"DARK_OAK_LOGS","comment_text":"Vanilla block tag representing all dark oak log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"OAK_LOGS","comment_text":"Vanilla block tag representing all oak log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"BIRCH_LOGS","comment_text":"Vanilla block tag representing all birch log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ACACIA_LOGS","comment_text":"Vanilla block tag representing all acacia log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"JUNGLE_LOGS","comment_text":"Vanilla block tag representing all jungle log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"SPRUCE_LOGS","comment_text":"Vanilla block tag representing all spruce log and bark variants.","type":"org.bukkit.Tag","type_dimension":""},{"name":"BANNERS","comment_text":"Vanilla block tag representing all banner blocks.","type":"org.bukkit.Tag","type_dimension":""},{"name":"SAND","comment_text":"Vanilla block tag representing all sand blocks.","type":"org.bukkit.Tag","type_dimension":""},{"name":"STAIRS","comment_text":"Vanilla block tag representing all stairs.","type":"org.bukkit.Tag","type_dimension":""},{"name":"SLABS","comment_text":"Vanilla block tag representing all slabs.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ANVIL","comment_text":"Vanilla block tag representing all damaged and undamaged anvils.","type":"org.bukkit.Tag","type_dimension":""},{"name":"RAILS","comment_text":"Vanilla block tag representing all Minecart rails.","type":"org.bukkit.Tag","type_dimension":""},{"name":"CORAL_BLOCKS","comment_text":"Vanilla block tag representing all coral blocks.","type":"org.bukkit.Tag","type_dimension":""},{"name":"CORALS","comment_text":"Vanilla block tag representing all coral.","type":"org.bukkit.Tag","type_dimension":""},{"name":"WALL_CORALS","comment_text":"Vanilla block tag representing all wall corals.","type":"org.bukkit.Tag","type_dimension":""},{"name":"LEAVES","comment_text":"Vanilla block tag representing all leaves fans.","type":"org.bukkit.Tag","type_dimension":""},{"name":"TRAPDOORS","comment_text":"Vanilla block tag representing all trapdoors (inherits from\n {@link #WOODEN_TRAPDOORS}.","type":"org.bukkit.Tag","type_dimension":""},{"name":"FLOWER_POTS","comment_text":"Vanilla block tag representing all empty and filled flower pots.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ENDERMAN_HOLDABLE","comment_text":"Vanilla block tag denoting blocks that enderman may pick up and hold.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ICE","comment_text":"Vanilla block tag denoting ice blocks.","type":"org.bukkit.Tag","type_dimension":""},{"name":"VALID_SPAWN","comment_text":"Vanilla block tag denoting all valid mob spawn positions.","type":"org.bukkit.Tag","type_dimension":""},{"name":"IMPERMEABLE","comment_text":"Vanilla block tag denoting impermeable blocks which do not drip fluids.","type":"org.bukkit.Tag","type_dimension":""},{"name":"REGISTRY_ITEMS","comment_text":"Key for the built in item registry.","type":"java.lang.String","type_dimension":""},{"name":"ITEMS_BANNERS","comment_text":"Vanilla item tag representing all banner items.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ITEMS_BOATS","comment_text":"Vanilla item tag representing all boat items.","type":"org.bukkit.Tag","type_dimension":""},{"name":"ITEMS_FISHES","comment_text":"Vanilla item tag representing all fish items.","type":"org.bukkit.Tag","type_dimension":""}],"methods":[{"name":"isTagged","comment_text":"Returns whether or not this tag has an entry for the specified item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"to check","type":"T","type_dimension":""}],"throws":[]},{"name":"getValues","comment_text":"Gets an immutable set of all tagged items.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Statistic","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents a countable statistic, which is tracked by the server.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Statistic","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Statistic","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"Gets the type of this statistic.","return_type":"org.bukkit.Statistic.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSubstatistic","comment_text":"Checks if this is a substatistic.\n <p>\n A substatistic exists en masse for each block, item, or entitytype, depending on\n {@link #getType()}.\n <p>\n This is a redundant method and equivalent to checking\n <code>getType() != Type.UNTYPED</code>","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBlock","comment_text":"Checks if this is a substatistic dealing with blocks.\n <p>\n This is a redundant method and equivalent to checking\n <code>getType() == Type.BLOCK</code>","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["DAMAGE_DEALT","DAMAGE_TAKEN","DEATHS","MOB_KILLS","PLAYER_KILLS","FISH_CAUGHT","ANIMALS_BRED","LEAVE_GAME","JUMP","DROP_COUNT","DROP","PICKUP","PLAY_ONE_MINUTE","WALK_ONE_CM","WALK_ON_WATER_ONE_CM","FALL_ONE_CM","SNEAK_TIME","CLIMB_ONE_CM","FLY_ONE_CM","WALK_UNDER_WATER_ONE_CM","MINECART_ONE_CM","BOAT_ONE_CM","PIG_ONE_CM","HORSE_ONE_CM","SPRINT_ONE_CM","CROUCH_ONE_CM","AVIATE_ONE_CM","MINE_BLOCK","USE_ITEM","BREAK_ITEM","CRAFT_ITEM","KILL_ENTITY","ENTITY_KILLED_BY","TIME_SINCE_DEATH","TALKED_TO_VILLAGER","TRADED_WITH_VILLAGER","CAKE_SLICES_EATEN","CAULDRON_FILLED","CAULDRON_USED","ARMOR_CLEANED","BANNER_CLEANED","BREWINGSTAND_INTERACTION","BEACON_INTERACTION","DROPPER_INSPECTED","HOPPER_INSPECTED","DISPENSER_INSPECTED","NOTEBLOCK_PLAYED","NOTEBLOCK_TUNED","FLOWER_POTTED","TRAPPED_CHEST_TRIGGERED","ENDERCHEST_OPENED","ITEM_ENCHANTED","RECORD_PLAYED","FURNACE_INTERACTION","CRAFTING_TABLE_INTERACTION","CHEST_OPENED","SLEEP_IN_BED","SHULKER_BOX_OPENED","TIME_SINCE_REST","SWIM_ONE_CM","DAMAGE_DEALT_ABSORBED","DAMAGE_DEALT_RESISTED","DAMAGE_BLOCKED_BY_SHIELD","DAMAGE_ABSORBED","DAMAGE_RESISTED","CLEAN_SHULKER_BOX"]},{"name":"org.bukkit.Statistic.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The type of statistic.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Statistic.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Statistic.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["UNTYPED","ITEM","BLOCK","ENTITY"]},{"name":"org.bukkit.SoundCategory","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An Enum of categories for sounds.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.SoundCategory","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.SoundCategory","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["MASTER","MUSIC","RECORDS","WEATHER","BLOCKS","HOSTILE","NEUTRAL","PLAYERS","AMBIENT","VOICE"]},{"name":"org.bukkit.Sound","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An Enum of Sounds the server is able to send to players.\n <p>\n WARNING: At any time, sounds may be added/removed from this Enum or even\n MineCraft itself! There is no guarantee the sounds will play. There is no\n guarantee values will not be removed from this Enum. As such, you should not\n depend on the ordinal values of this class.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Sound","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Sound","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["AMBIENT_CAVE","AMBIENT_UNDERWATER_ENTER","AMBIENT_UNDERWATER_EXIT","AMBIENT_UNDERWATER_LOOP","AMBIENT_UNDERWATER_LOOP_ADDITIONS","AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE","AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE","BLOCK_ANVIL_BREAK","BLOCK_ANVIL_DESTROY","BLOCK_ANVIL_FALL","BLOCK_ANVIL_HIT","BLOCK_ANVIL_LAND","BLOCK_ANVIL_PLACE","BLOCK_ANVIL_STEP","BLOCK_ANVIL_USE","BLOCK_BEACON_ACTIVATE","BLOCK_BEACON_AMBIENT","BLOCK_BEACON_DEACTIVATE","BLOCK_BEACON_POWER_SELECT","BLOCK_BREWING_STAND_BREW","BLOCK_BUBBLE_COLUMN_BUBBLE_POP","BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT","BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE","BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT","BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE","BLOCK_CHEST_CLOSE","BLOCK_CHEST_LOCKED","BLOCK_CHEST_OPEN","BLOCK_CHORUS_FLOWER_DEATH","BLOCK_CHORUS_FLOWER_GROW","BLOCK_COMPARATOR_CLICK","BLOCK_CONDUIT_ACTIVATE","BLOCK_CONDUIT_AMBIENT","BLOCK_CONDUIT_AMBIENT_SHORT","BLOCK_CONDUIT_ATTACK_TARGET","BLOCK_CONDUIT_DEACTIVATE","BLOCK_CORAL_BLOCK_BREAK","BLOCK_CORAL_BLOCK_FALL","BLOCK_CORAL_BLOCK_HIT","BLOCK_CORAL_BLOCK_PLACE","BLOCK_CORAL_BLOCK_STEP","BLOCK_DISPENSER_DISPENSE","BLOCK_DISPENSER_FAIL","BLOCK_DISPENSER_LAUNCH","BLOCK_ENCHANTMENT_TABLE_USE","BLOCK_ENDER_CHEST_CLOSE","BLOCK_ENDER_CHEST_OPEN","BLOCK_END_GATEWAY_SPAWN","BLOCK_END_PORTAL_FRAME_FILL","BLOCK_END_PORTAL_SPAWN","BLOCK_FENCE_GATE_CLOSE","BLOCK_FENCE_GATE_OPEN","BLOCK_FIRE_AMBIENT","BLOCK_FIRE_EXTINGUISH","BLOCK_FURNACE_FIRE_CRACKLE","BLOCK_GLASS_BREAK","BLOCK_GLASS_FALL","BLOCK_GLASS_HIT","BLOCK_GLASS_PLACE","BLOCK_GLASS_STEP","BLOCK_GRASS_BREAK","BLOCK_GRASS_FALL","BLOCK_GRASS_HIT","BLOCK_GRASS_PLACE","BLOCK_GRASS_STEP","BLOCK_GRAVEL_BREAK","BLOCK_GRAVEL_FALL","BLOCK_GRAVEL_HIT","BLOCK_GRAVEL_PLACE","BLOCK_GRAVEL_STEP","BLOCK_IRON_DOOR_CLOSE","BLOCK_IRON_DOOR_OPEN","BLOCK_IRON_TRAPDOOR_CLOSE","BLOCK_IRON_TRAPDOOR_OPEN","BLOCK_LADDER_BREAK","BLOCK_LADDER_FALL","BLOCK_LADDER_HIT","BLOCK_LADDER_PLACE","BLOCK_LADDER_STEP","BLOCK_LAVA_AMBIENT","BLOCK_LAVA_EXTINGUISH","BLOCK_LAVA_POP","BLOCK_LEVER_CLICK","BLOCK_LILY_PAD_PLACE","BLOCK_METAL_BREAK","BLOCK_METAL_FALL","BLOCK_METAL_HIT","BLOCK_METAL_PLACE","BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF","BLOCK_METAL_PRESSURE_PLATE_CLICK_ON","BLOCK_METAL_STEP","BLOCK_NOTE_BLOCK_BASEDRUM","BLOCK_NOTE_BLOCK_BASS","BLOCK_NOTE_BLOCK_BELL","BLOCK_NOTE_BLOCK_CHIME","BLOCK_NOTE_BLOCK_FLUTE","BLOCK_NOTE_BLOCK_GUITAR","BLOCK_NOTE_BLOCK_HARP","BLOCK_NOTE_BLOCK_HAT","BLOCK_NOTE_BLOCK_PLING","BLOCK_NOTE_BLOCK_SNARE","BLOCK_NOTE_BLOCK_XYLOPHONE","BLOCK_PISTON_CONTRACT","BLOCK_PISTON_EXTEND","BLOCK_PORTAL_AMBIENT","BLOCK_PORTAL_TRAVEL","BLOCK_PORTAL_TRIGGER","BLOCK_PUMPKIN_CARVE","BLOCK_REDSTONE_TORCH_BURNOUT","BLOCK_SAND_BREAK","BLOCK_SAND_FALL","BLOCK_SAND_HIT","BLOCK_SAND_PLACE","BLOCK_SAND_STEP","BLOCK_SHULKER_BOX_CLOSE","BLOCK_SHULKER_BOX_OPEN","BLOCK_SLIME_BLOCK_BREAK","BLOCK_SLIME_BLOCK_FALL","BLOCK_SLIME_BLOCK_HIT","BLOCK_SLIME_BLOCK_PLACE","BLOCK_SLIME_BLOCK_STEP","BLOCK_SNOW_BREAK","BLOCK_SNOW_FALL","BLOCK_SNOW_HIT","BLOCK_SNOW_PLACE","BLOCK_SNOW_STEP","BLOCK_STONE_BREAK","BLOCK_STONE_BUTTON_CLICK_OFF","BLOCK_STONE_BUTTON_CLICK_ON","BLOCK_STONE_FALL","BLOCK_STONE_HIT","BLOCK_STONE_PLACE","BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF","BLOCK_STONE_PRESSURE_PLATE_CLICK_ON","BLOCK_STONE_STEP","BLOCK_TRIPWIRE_ATTACH","BLOCK_TRIPWIRE_CLICK_OFF","BLOCK_TRIPWIRE_CLICK_ON","BLOCK_TRIPWIRE_DETACH","BLOCK_WATER_AMBIENT","BLOCK_WET_GRASS_BREAK","BLOCK_WET_GRASS_FALL","BLOCK_WET_GRASS_HIT","BLOCK_WET_GRASS_PLACE","BLOCK_WET_GRASS_STEP","BLOCK_WOODEN_BUTTON_CLICK_OFF","BLOCK_WOODEN_BUTTON_CLICK_ON","BLOCK_WOODEN_DOOR_CLOSE","BLOCK_WOODEN_DOOR_OPEN","BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF","BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON","BLOCK_WOODEN_TRAPDOOR_CLOSE","BLOCK_WOODEN_TRAPDOOR_OPEN","BLOCK_WOOD_BREAK","BLOCK_WOOD_FALL","BLOCK_WOOD_HIT","BLOCK_WOOD_PLACE","BLOCK_WOOD_STEP","BLOCK_WOOL_BREAK","BLOCK_WOOL_FALL","BLOCK_WOOL_HIT","BLOCK_WOOL_PLACE","BLOCK_WOOL_STEP","ENCHANT_THORNS_HIT","ENTITY_ARMOR_STAND_BREAK","ENTITY_ARMOR_STAND_FALL","ENTITY_ARMOR_STAND_HIT","ENTITY_ARMOR_STAND_PLACE","ENTITY_ARROW_HIT","ENTITY_ARROW_HIT_PLAYER","ENTITY_ARROW_SHOOT","ENTITY_BAT_AMBIENT","ENTITY_BAT_DEATH","ENTITY_BAT_HURT","ENTITY_BAT_LOOP","ENTITY_BAT_TAKEOFF","ENTITY_BLAZE_AMBIENT","ENTITY_BLAZE_BURN","ENTITY_BLAZE_DEATH","ENTITY_BLAZE_HURT","ENTITY_BLAZE_SHOOT","ENTITY_BOAT_PADDLE_LAND","ENTITY_BOAT_PADDLE_WATER","ENTITY_CAT_AMBIENT","ENTITY_CAT_DEATH","ENTITY_CAT_HISS","ENTITY_CAT_HURT","ENTITY_CAT_PURR","ENTITY_CAT_PURREOW","ENTITY_CHICKEN_AMBIENT","ENTITY_CHICKEN_DEATH","ENTITY_CHICKEN_EGG","ENTITY_CHICKEN_HURT","ENTITY_CHICKEN_STEP","ENTITY_COD_AMBIENT","ENTITY_COD_DEATH","ENTITY_COD_FLOP","ENTITY_COD_HURT","ENTITY_COW_AMBIENT","ENTITY_COW_DEATH","ENTITY_COW_HURT","ENTITY_COW_MILK","ENTITY_COW_STEP","ENTITY_CREEPER_DEATH","ENTITY_CREEPER_HURT","ENTITY_CREEPER_PRIMED","ENTITY_DOLPHIN_AMBIENT","ENTITY_DOLPHIN_AMBIENT_WATER","ENTITY_DOLPHIN_ATTACK","ENTITY_DOLPHIN_DEATH","ENTITY_DOLPHIN_EAT","ENTITY_DOLPHIN_HURT","ENTITY_DOLPHIN_JUMP","ENTITY_DOLPHIN_PLAY","ENTITY_DOLPHIN_SPLASH","ENTITY_DOLPHIN_SWIM","ENTITY_DONKEY_AMBIENT","ENTITY_DONKEY_ANGRY","ENTITY_DONKEY_CHEST","ENTITY_DONKEY_DEATH","ENTITY_DONKEY_HURT","ENTITY_DRAGON_FIREBALL_EXPLODE","ENTITY_DROWNED_AMBIENT","ENTITY_DROWNED_AMBIENT_WATER","ENTITY_DROWNED_DEATH","ENTITY_DROWNED_DEATH_WATER","ENTITY_DROWNED_HURT","ENTITY_DROWNED_HURT_WATER","ENTITY_DROWNED_SHOOT","ENTITY_DROWNED_STEP","ENTITY_DROWNED_SWIM","ENTITY_EGG_THROW","ENTITY_ELDER_GUARDIAN_AMBIENT","ENTITY_ELDER_GUARDIAN_AMBIENT_LAND","ENTITY_ELDER_GUARDIAN_CURSE","ENTITY_ELDER_GUARDIAN_DEATH","ENTITY_ELDER_GUARDIAN_DEATH_LAND","ENTITY_ELDER_GUARDIAN_FLOP","ENTITY_ELDER_GUARDIAN_HURT","ENTITY_ELDER_GUARDIAN_HURT_LAND","ENTITY_ENDERMAN_AMBIENT","ENTITY_ENDERMAN_DEATH","ENTITY_ENDERMAN_HURT","ENTITY_ENDERMAN_SCREAM","ENTITY_ENDERMAN_STARE","ENTITY_ENDERMAN_TELEPORT","ENTITY_ENDERMITE_AMBIENT","ENTITY_ENDERMITE_DEATH","ENTITY_ENDERMITE_HURT","ENTITY_ENDERMITE_STEP","ENTITY_ENDER_DRAGON_AMBIENT","ENTITY_ENDER_DRAGON_DEATH","ENTITY_ENDER_DRAGON_FLAP","ENTITY_ENDER_DRAGON_GROWL","ENTITY_ENDER_DRAGON_HURT","ENTITY_ENDER_DRAGON_SHOOT","ENTITY_ENDER_EYE_DEATH","ENTITY_ENDER_EYE_LAUNCH","ENTITY_ENDER_PEARL_THROW","ENTITY_EVOKER_AMBIENT","ENTITY_EVOKER_CAST_SPELL","ENTITY_EVOKER_DEATH","ENTITY_EVOKER_FANGS_ATTACK","ENTITY_EVOKER_HURT","ENTITY_EVOKER_PREPARE_ATTACK","ENTITY_EVOKER_PREPARE_SUMMON","ENTITY_EVOKER_PREPARE_WOLOLO","ENTITY_EXPERIENCE_BOTTLE_THROW","ENTITY_EXPERIENCE_ORB_PICKUP","ENTITY_FIREWORK_ROCKET_BLAST","ENTITY_FIREWORK_ROCKET_BLAST_FAR","ENTITY_FIREWORK_ROCKET_LARGE_BLAST","ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR","ENTITY_FIREWORK_ROCKET_LAUNCH","ENTITY_FIREWORK_ROCKET_SHOOT","ENTITY_FIREWORK_ROCKET_TWINKLE","ENTITY_FIREWORK_ROCKET_TWINKLE_FAR","ENTITY_FISHING_BOBBER_RETRIEVE","ENTITY_FISHING_BOBBER_SPLASH","ENTITY_FISHING_BOBBER_THROW","ENTITY_FISH_SWIM","ENTITY_GENERIC_BIG_FALL","ENTITY_GENERIC_BURN","ENTITY_GENERIC_DEATH","ENTITY_GENERIC_DRINK","ENTITY_GENERIC_EAT","ENTITY_GENERIC_EXPLODE","ENTITY_GENERIC_EXTINGUISH_FIRE","ENTITY_GENERIC_HURT","ENTITY_GENERIC_SMALL_FALL","ENTITY_GENERIC_SPLASH","ENTITY_GENERIC_SWIM","ENTITY_GHAST_AMBIENT","ENTITY_GHAST_DEATH","ENTITY_GHAST_HURT","ENTITY_GHAST_SCREAM","ENTITY_GHAST_SHOOT","ENTITY_GHAST_WARN","ENTITY_GUARDIAN_AMBIENT","ENTITY_GUARDIAN_AMBIENT_LAND","ENTITY_GUARDIAN_ATTACK","ENTITY_GUARDIAN_DEATH","ENTITY_GUARDIAN_DEATH_LAND","ENTITY_GUARDIAN_FLOP","ENTITY_GUARDIAN_HURT","ENTITY_GUARDIAN_HURT_LAND","ENTITY_HORSE_AMBIENT","ENTITY_HORSE_ANGRY","ENTITY_HORSE_ARMOR","ENTITY_HORSE_BREATHE","ENTITY_HORSE_DEATH","ENTITY_HORSE_EAT","ENTITY_HORSE_GALLOP","ENTITY_HORSE_HURT","ENTITY_HORSE_JUMP","ENTITY_HORSE_LAND","ENTITY_HORSE_SADDLE","ENTITY_HORSE_STEP","ENTITY_HORSE_STEP_WOOD","ENTITY_HOSTILE_BIG_FALL","ENTITY_HOSTILE_DEATH","ENTITY_HOSTILE_HURT","ENTITY_HOSTILE_SMALL_FALL","ENTITY_HOSTILE_SPLASH","ENTITY_HOSTILE_SWIM","ENTITY_HUSK_AMBIENT","ENTITY_HUSK_CONVERTED_TO_ZOMBIE","ENTITY_HUSK_DEATH","ENTITY_HUSK_HURT","ENTITY_HUSK_STEP","ENTITY_ILLUSIONER_AMBIENT","ENTITY_ILLUSIONER_CAST_SPELL","ENTITY_ILLUSIONER_DEATH","ENTITY_ILLUSIONER_HURT","ENTITY_ILLUSIONER_MIRROR_MOVE","ENTITY_ILLUSIONER_PREPARE_BLINDNESS","ENTITY_ILLUSIONER_PREPARE_MIRROR","ENTITY_IRON_GOLEM_ATTACK","ENTITY_IRON_GOLEM_DEATH","ENTITY_IRON_GOLEM_HURT","ENTITY_IRON_GOLEM_STEP","ENTITY_ITEM_BREAK","ENTITY_ITEM_FRAME_ADD_ITEM","ENTITY_ITEM_FRAME_BREAK","ENTITY_ITEM_FRAME_PLACE","ENTITY_ITEM_FRAME_REMOVE_ITEM","ENTITY_ITEM_FRAME_ROTATE_ITEM","ENTITY_ITEM_PICKUP","ENTITY_LEASH_KNOT_BREAK","ENTITY_LEASH_KNOT_PLACE","ENTITY_LIGHTNING_BOLT_IMPACT","ENTITY_LIGHTNING_BOLT_THUNDER","ENTITY_LINGERING_POTION_THROW","ENTITY_LLAMA_AMBIENT","ENTITY_LLAMA_ANGRY","ENTITY_LLAMA_CHEST","ENTITY_LLAMA_DEATH","ENTITY_LLAMA_EAT","ENTITY_LLAMA_HURT","ENTITY_LLAMA_SPIT","ENTITY_LLAMA_STEP","ENTITY_LLAMA_SWAG","ENTITY_MAGMA_CUBE_DEATH","ENTITY_MAGMA_CUBE_DEATH_SMALL","ENTITY_MAGMA_CUBE_HURT","ENTITY_MAGMA_CUBE_HURT_SMALL","ENTITY_MAGMA_CUBE_JUMP","ENTITY_MAGMA_CUBE_SQUISH","ENTITY_MAGMA_CUBE_SQUISH_SMALL","ENTITY_MINECART_INSIDE","ENTITY_MINECART_RIDING","ENTITY_MOOSHROOM_SHEAR","ENTITY_MULE_AMBIENT","ENTITY_MULE_CHEST","ENTITY_MULE_DEATH","ENTITY_MULE_HURT","ENTITY_PAINTING_BREAK","ENTITY_PAINTING_PLACE","ENTITY_PARROT_AMBIENT","ENTITY_PARROT_DEATH","ENTITY_PARROT_EAT","ENTITY_PARROT_FLY","ENTITY_PARROT_HURT","ENTITY_PARROT_IMITATE_BLAZE","ENTITY_PARROT_IMITATE_CREEPER","ENTITY_PARROT_IMITATE_DROWNED","ENTITY_PARROT_IMITATE_ELDER_GUARDIAN","ENTITY_PARROT_IMITATE_ENDERMAN","ENTITY_PARROT_IMITATE_ENDERMITE","ENTITY_PARROT_IMITATE_ENDER_DRAGON","ENTITY_PARROT_IMITATE_EVOKER","ENTITY_PARROT_IMITATE_GHAST","ENTITY_PARROT_IMITATE_HUSK","ENTITY_PARROT_IMITATE_ILLUSIONER","ENTITY_PARROT_IMITATE_MAGMA_CUBE","ENTITY_PARROT_IMITATE_PHANTOM","ENTITY_PARROT_IMITATE_POLAR_BEAR","ENTITY_PARROT_IMITATE_SHULKER","ENTITY_PARROT_IMITATE_SILVERFISH","ENTITY_PARROT_IMITATE_SKELETON","ENTITY_PARROT_IMITATE_SLIME","ENTITY_PARROT_IMITATE_SPIDER","ENTITY_PARROT_IMITATE_STRAY","ENTITY_PARROT_IMITATE_VEX","ENTITY_PARROT_IMITATE_VINDICATOR","ENTITY_PARROT_IMITATE_WITCH","ENTITY_PARROT_IMITATE_WITHER","ENTITY_PARROT_IMITATE_WITHER_SKELETON","ENTITY_PARROT_IMITATE_WOLF","ENTITY_PARROT_IMITATE_ZOMBIE","ENTITY_PARROT_IMITATE_ZOMBIE_PIGMAN","ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER","ENTITY_PARROT_STEP","ENTITY_PHANTOM_AMBIENT","ENTITY_PHANTOM_BITE","ENTITY_PHANTOM_DEATH","ENTITY_PHANTOM_FLAP","ENTITY_PHANTOM_HURT","ENTITY_PHANTOM_SWOOP","ENTITY_PIG_AMBIENT","ENTITY_PIG_DEATH","ENTITY_PIG_HURT","ENTITY_PIG_SADDLE","ENTITY_PIG_STEP","ENTITY_PLAYER_ATTACK_CRIT","ENTITY_PLAYER_ATTACK_KNOCKBACK","ENTITY_PLAYER_ATTACK_NODAMAGE","ENTITY_PLAYER_ATTACK_STRONG","ENTITY_PLAYER_ATTACK_SWEEP","ENTITY_PLAYER_ATTACK_WEAK","ENTITY_PLAYER_BIG_FALL","ENTITY_PLAYER_BREATH","ENTITY_PLAYER_BURP","ENTITY_PLAYER_DEATH","ENTITY_PLAYER_HURT","ENTITY_PLAYER_HURT_DROWN","ENTITY_PLAYER_HURT_ON_FIRE","ENTITY_PLAYER_LEVELUP","ENTITY_PLAYER_SMALL_FALL","ENTITY_PLAYER_SPLASH","ENTITY_PLAYER_SPLASH_HIGH_SPEED","ENTITY_PLAYER_SWIM","ENTITY_POLAR_BEAR_AMBIENT","ENTITY_POLAR_BEAR_AMBIENT_BABY","ENTITY_POLAR_BEAR_DEATH","ENTITY_POLAR_BEAR_HURT","ENTITY_POLAR_BEAR_STEP","ENTITY_POLAR_BEAR_WARNING","ENTITY_PUFFER_FISH_AMBIENT","ENTITY_PUFFER_FISH_BLOW_OUT","ENTITY_PUFFER_FISH_BLOW_UP","ENTITY_PUFFER_FISH_DEATH","ENTITY_PUFFER_FISH_FLOP","ENTITY_PUFFER_FISH_HURT","ENTITY_PUFFER_FISH_STING","ENTITY_RABBIT_AMBIENT","ENTITY_RABBIT_ATTACK","ENTITY_RABBIT_DEATH","ENTITY_RABBIT_HURT","ENTITY_RABBIT_JUMP","ENTITY_SALMON_AMBIENT","ENTITY_SALMON_DEATH","ENTITY_SALMON_FLOP","ENTITY_SALMON_HURT","ENTITY_SHEEP_AMBIENT","ENTITY_SHEEP_DEATH","ENTITY_SHEEP_HURT","ENTITY_SHEEP_SHEAR","ENTITY_SHEEP_STEP","ENTITY_SHULKER_AMBIENT","ENTITY_SHULKER_BULLET_HIT","ENTITY_SHULKER_BULLET_HURT","ENTITY_SHULKER_CLOSE","ENTITY_SHULKER_DEATH","ENTITY_SHULKER_HURT","ENTITY_SHULKER_HURT_CLOSED","ENTITY_SHULKER_OPEN","ENTITY_SHULKER_SHOOT","ENTITY_SHULKER_TELEPORT","ENTITY_SILVERFISH_AMBIENT","ENTITY_SILVERFISH_DEATH","ENTITY_SILVERFISH_HURT","ENTITY_SILVERFISH_STEP","ENTITY_SKELETON_AMBIENT","ENTITY_SKELETON_DEATH","ENTITY_SKELETON_HORSE_AMBIENT","ENTITY_SKELETON_HORSE_AMBIENT_WATER","ENTITY_SKELETON_HORSE_DEATH","ENTITY_SKELETON_HORSE_GALLOP_WATER","ENTITY_SKELETON_HORSE_HURT","ENTITY_SKELETON_HORSE_JUMP_WATER","ENTITY_SKELETON_HORSE_STEP_WATER","ENTITY_SKELETON_HORSE_SWIM","ENTITY_SKELETON_HURT","ENTITY_SKELETON_SHOOT","ENTITY_SKELETON_STEP","ENTITY_SLIME_ATTACK","ENTITY_SLIME_DEATH","ENTITY_SLIME_DEATH_SMALL","ENTITY_SLIME_HURT","ENTITY_SLIME_HURT_SMALL","ENTITY_SLIME_JUMP","ENTITY_SLIME_JUMP_SMALL","ENTITY_SLIME_SQUISH","ENTITY_SLIME_SQUISH_SMALL","ENTITY_SNOWBALL_THROW","ENTITY_SNOW_GOLEM_AMBIENT","ENTITY_SNOW_GOLEM_DEATH","ENTITY_SNOW_GOLEM_HURT","ENTITY_SNOW_GOLEM_SHOOT","ENTITY_SPIDER_AMBIENT","ENTITY_SPIDER_DEATH","ENTITY_SPIDER_HURT","ENTITY_SPIDER_STEP","ENTITY_SPLASH_POTION_BREAK","ENTITY_SPLASH_POTION_THROW","ENTITY_SQUID_AMBIENT","ENTITY_SQUID_DEATH","ENTITY_SQUID_HURT","ENTITY_SQUID_SQUIRT","ENTITY_STRAY_AMBIENT","ENTITY_STRAY_DEATH","ENTITY_STRAY_HURT","ENTITY_STRAY_STEP","ENTITY_TNT_PRIMED","ENTITY_TROPICAL_FISH_AMBIENT","ENTITY_TROPICAL_FISH_DEATH","ENTITY_TROPICAL_FISH_FLOP","ENTITY_TROPICAL_FISH_HURT","ENTITY_TURTLE_AMBIENT_LAND","ENTITY_TURTLE_DEATH","ENTITY_TURTLE_DEATH_BABY","ENTITY_TURTLE_EGG_BREAK","ENTITY_TURTLE_EGG_CRACK","ENTITY_TURTLE_EGG_HATCH","ENTITY_TURTLE_HURT","ENTITY_TURTLE_HURT_BABY","ENTITY_TURTLE_LAY_EGG","ENTITY_TURTLE_SHAMBLE","ENTITY_TURTLE_SHAMBLE_BABY","ENTITY_TURTLE_SWIM","ENTITY_VEX_AMBIENT","ENTITY_VEX_CHARGE","ENTITY_VEX_DEATH","ENTITY_VEX_HURT","ENTITY_VILLAGER_AMBIENT","ENTITY_VILLAGER_DEATH","ENTITY_VILLAGER_HURT","ENTITY_VILLAGER_NO","ENTITY_VILLAGER_TRADE","ENTITY_VILLAGER_YES","ENTITY_VINDICATOR_AMBIENT","ENTITY_VINDICATOR_DEATH","ENTITY_VINDICATOR_HURT","ENTITY_WITCH_AMBIENT","ENTITY_WITCH_DEATH","ENTITY_WITCH_DRINK","ENTITY_WITCH_HURT","ENTITY_WITCH_THROW","ENTITY_WITHER_AMBIENT","ENTITY_WITHER_BREAK_BLOCK","ENTITY_WITHER_DEATH","ENTITY_WITHER_HURT","ENTITY_WITHER_SHOOT","ENTITY_WITHER_SKELETON_AMBIENT","ENTITY_WITHER_SKELETON_DEATH","ENTITY_WITHER_SKELETON_HURT","ENTITY_WITHER_SKELETON_STEP","ENTITY_WITHER_SPAWN","ENTITY_WOLF_AMBIENT","ENTITY_WOLF_DEATH","ENTITY_WOLF_GROWL","ENTITY_WOLF_HOWL","ENTITY_WOLF_HURT","ENTITY_WOLF_PANT","ENTITY_WOLF_SHAKE","ENTITY_WOLF_STEP","ENTITY_WOLF_WHINE","ENTITY_ZOMBIE_AMBIENT","ENTITY_ZOMBIE_ATTACK_IRON_DOOR","ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR","ENTITY_ZOMBIE_BREAK_WOODEN_DOOR","ENTITY_ZOMBIE_CONVERTED_TO_DROWNED","ENTITY_ZOMBIE_DEATH","ENTITY_ZOMBIE_DESTROY_EGG","ENTITY_ZOMBIE_HORSE_AMBIENT","ENTITY_ZOMBIE_HORSE_DEATH","ENTITY_ZOMBIE_HORSE_HURT","ENTITY_ZOMBIE_HURT","ENTITY_ZOMBIE_INFECT","ENTITY_ZOMBIE_PIGMAN_AMBIENT","ENTITY_ZOMBIE_PIGMAN_ANGRY","ENTITY_ZOMBIE_PIGMAN_DEATH","ENTITY_ZOMBIE_PIGMAN_HURT","ENTITY_ZOMBIE_STEP","ENTITY_ZOMBIE_VILLAGER_AMBIENT","ENTITY_ZOMBIE_VILLAGER_CONVERTED","ENTITY_ZOMBIE_VILLAGER_CURE","ENTITY_ZOMBIE_VILLAGER_DEATH","ENTITY_ZOMBIE_VILLAGER_HURT","ENTITY_ZOMBIE_VILLAGER_STEP","ITEM_ARMOR_EQUIP_CHAIN","ITEM_ARMOR_EQUIP_DIAMOND","ITEM_ARMOR_EQUIP_ELYTRA","ITEM_ARMOR_EQUIP_GENERIC","ITEM_ARMOR_EQUIP_GOLD","ITEM_ARMOR_EQUIP_IRON","ITEM_ARMOR_EQUIP_LEATHER","ITEM_ARMOR_EQUIP_TURTLE","ITEM_AXE_STRIP","ITEM_BOTTLE_EMPTY","ITEM_BOTTLE_FILL","ITEM_BOTTLE_FILL_DRAGONBREATH","ITEM_BUCKET_EMPTY","ITEM_BUCKET_EMPTY_FISH","ITEM_BUCKET_EMPTY_LAVA","ITEM_BUCKET_FILL","ITEM_BUCKET_FILL_FISH","ITEM_BUCKET_FILL_LAVA","ITEM_CHORUS_FRUIT_TELEPORT","ITEM_ELYTRA_FLYING","ITEM_FIRECHARGE_USE","ITEM_FLINTANDSTEEL_USE","ITEM_HOE_TILL","ITEM_SHIELD_BLOCK","ITEM_SHIELD_BREAK","ITEM_SHOVEL_FLATTEN","ITEM_TOTEM_USE","ITEM_TRIDENT_HIT","ITEM_TRIDENT_HIT_GROUND","ITEM_TRIDENT_RETURN","ITEM_TRIDENT_RIPTIDE_1","ITEM_TRIDENT_RIPTIDE_2","ITEM_TRIDENT_RIPTIDE_3","ITEM_TRIDENT_THROW","ITEM_TRIDENT_THUNDER","MUSIC_CREATIVE","MUSIC_CREDITS","MUSIC_DISC_11","MUSIC_DISC_13","MUSIC_DISC_BLOCKS","MUSIC_DISC_CAT","MUSIC_DISC_CHIRP","MUSIC_DISC_FAR","MUSIC_DISC_MALL","MUSIC_DISC_MELLOHI","MUSIC_DISC_STAL","MUSIC_DISC_STRAD","MUSIC_DISC_WAIT","MUSIC_DISC_WARD","MUSIC_DRAGON","MUSIC_END","MUSIC_GAME","MUSIC_MENU","MUSIC_NETHER","MUSIC_UNDER_WATER","UI_BUTTON_CLICK","UI_TOAST_CHALLENGE_COMPLETE","UI_TOAST_IN","UI_TOAST_OUT","WEATHER_RAIN","WEATHER_RAIN_ABOVE"]},{"name":"org.bukkit.SkullType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different types of skulls.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.SkullType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.SkullType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SKELETON","WITHER","ZOMBIE","PLAYER","CREEPER","DRAGON"]},{"name":"org.bukkit.Server","interfaces":["org.bukkit.plugin.messaging.PluginMessageRecipient"],"superclass":"","comment_text":"Represents a server implementation.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"BROADCAST_CHANNEL_ADMINISTRATIVE","comment_text":"Used for all administrative messages, such as an operator using a\n command.\n <p>\n For use in {@link #broadcast(java.lang.String, java.lang.String)}.","type":"java.lang.String","type_dimension":""},{"name":"BROADCAST_CHANNEL_USERS","comment_text":"Used for all announcement messages, such as informing users that a\n player has joined.\n <p>\n For use in {@link #broadcast(java.lang.String, java.lang.String)}.","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"getName","comment_text":"Gets the name of this server implementation.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getVersion","comment_text":"Gets the version string of this server implementation.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBukkitVersion","comment_text":"Gets the Bukkit version that this server is running.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOnlinePlayers","comment_text":"Gets a view of all currently logged in players. This {@linkplain\n Collections#unmodifiableCollection(Collection) view} is a reused\n object, making some operations like {@link Collection#size()}\n zero-allocation.\n <p>\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like {@link\n Serializable} or {@link List}), is deprecated.\n <p>\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) {@link Entity#teleport(Location) teleportation},\n {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\n String) kicking} are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n <p>\n For safe consequential iteration or mimicking the old array behavior,\n using {@link Collection#toArray(Object[])} is recommended. For making\n snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxPlayers","comment_text":"Get the maximum amount of players which can login to this server.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPort","comment_text":"Get the game port that the server runs on.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getViewDistance","comment_text":"Get the view distance from this server.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIp","comment_text":"Get the IP that this server is bound to, or empty string if not\n specified.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerName","comment_text":"Get the name of this server.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerId","comment_text":"Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldType","comment_text":"Get world type (level-type setting) for default world.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGenerateStructures","comment_text":"Get generate-structures setting.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowEnd","comment_text":"Gets whether this server allows the End or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowNether","comment_text":"Gets whether this server allows the Nether or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasWhitelist","comment_text":"Gets whether this server has a whitelist or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWhitelist","comment_text":"Sets if the server is whitelisted.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"true for whitelist on, false for off","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getWhitelistedPlayers","comment_text":"Gets a list of whitelisted players.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"reloadWhitelist","comment_text":"Reloads the whitelist from disk.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"broadcastMessage","comment_text":"Broadcast a message to all players.\n <p>\n This is the same as calling {@link #broadcast(java.lang.String,\n java.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}","return_type":"int","return_type_dimension":"","parameters":[{"name":"message","comment_text":"the message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getUpdateFolder","comment_text":"Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n <p>\n The update folder name is relative to the plugins folder.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUpdateFolderFile","comment_text":"Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConnectionThrottle","comment_text":"Gets the value of the connection throttle setting.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksPerAnimalSpawns","comment_text":"Gets default ticks per animal spawns value.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b> If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n <p>\n Minecraft default: 400.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksPerMonsterSpawns","comment_text":"Gets the default ticks per monster spawns value.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b> If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n <p>\n Minecraft default: 1.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Gets a player object by the given username.\n <p>\n This method may not return objects for offline players.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to look up","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayerExact","comment_text":"Gets the player with the exact given name, case insensitive.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Exact name of the player to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"matchPlayer","comment_text":"Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n <p>\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the (partial) name to match","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayer","comment_text":"Gets the player with the given UUID.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"id","comment_text":"UUID of the player to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getPluginManager","comment_text":"Gets the plugin manager for interfacing with plugins.","return_type":"org.bukkit.plugin.PluginManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScheduler","comment_text":"Gets the scheduler for managing scheduled events.","return_type":"org.bukkit.scheduler.BukkitScheduler","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServicesManager","comment_text":"Gets a services manager.","return_type":"org.bukkit.plugin.ServicesManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorlds","comment_text":"Gets a list of all worlds on this server.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createWorld","comment_text":"Creates or loads a world with the given name using the specified\n options.\n <p>\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"creator","comment_text":"the options to use when creating the world","type":"org.bukkit.WorldCreator","type_dimension":""}],"throws":[]},{"name":"unloadWorld","comment_text":"Unloads a world with the given name.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the world to unload","type":"java.lang.String","type_dimension":""},{"name":"save","comment_text":"whether to save the chunks before unloading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unloadWorld","comment_text":"Unloads the given world.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world to unload","type":"org.bukkit.World","type_dimension":""},{"name":"save","comment_text":"whether to save the chunks before unloading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Gets the world with the given name.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name of the world to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Gets the world from the given Unique ID.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"uid","comment_text":"a unique-id of the world to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getMap","comment_text":"Gets the map from the given item ID.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the id of the map to get","type":"short","type_dimension":""}],"throws":[]},{"name":"createMap","comment_text":"Create a new map with an automatically assigned ID.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world the map will belong to","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"reload","comment_text":"Reloads the server, refreshing settings and plugin information.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"reloadData","comment_text":"Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLogger","comment_text":"Returns the primary logger associated with this server instance.","return_type":"java.util.logging.Logger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPluginCommand","comment_text":"Gets a {@link PluginCommand} with the given name or alias.","return_type":"org.bukkit.command.PluginCommand","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name of the command to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"savePlayers","comment_text":"Writes loaded players to disk.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"dispatchCommand","comment_text":"Dispatches a command on this server, and executes it if found.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"the apparent sender of the command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLine","comment_text":"the command + arguments. Example: <code>test abc\n     123</code>","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.command.CommandException","comment_text":"thrown when the executor for the given command\n     fails with an unhandled exception"}]},{"name":"addRecipe","comment_text":"Adds a recipe to the crafting manager.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"recipe","comment_text":"the recipe to add","type":"org.bukkit.inventory.Recipe","type_dimension":""}],"throws":[]},{"name":"getRecipesFor","comment_text":"Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"result","comment_text":"the item to match against recipe results","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"recipeIterator","comment_text":"Get an iterator through the list of crafting recipes.","return_type":"java.util.Iterator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clearRecipes","comment_text":"Clears the list of crafting recipes.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"resetRecipes","comment_text":"Resets the list of crafting recipes to the default.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCommandAliases","comment_text":"Gets a list of command aliases defined in the server properties.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpawnRadius","comment_text":"Gets the radius, in blocks, around each worlds spawn point to protect.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnRadius","comment_text":"Sets the radius, in blocks, around each worlds spawn point to protect.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"new spawn radius, or 0 if none","type":"int","type_dimension":""}],"throws":[]},{"name":"getOnlineMode","comment_text":"Gets whether the Server is in online mode or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowFlight","comment_text":"Gets whether this server allows flying or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isHardcore","comment_text":"Gets whether the server is in hardcore mode or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"shutdown","comment_text":"Shutdowns the server, stopping everything.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"broadcast","comment_text":"Broadcasts the specified message to every user with the given\n permission name.","return_type":"int","return_type_dimension":"","parameters":[{"name":"message","comment_text":"message to broadcast","type":"java.lang.String","type_dimension":""},{"name":"permission","comment_text":"the required permission {@link Permissible\n     permissibles} must have to receive the broadcast","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the player by the given name, regardless if they are offline or\n online.\n <p>\n This method may involve a blocking web request to get the UUID for the\n given name.\n <p>\n This will return an object even if the player does not exist. To this\n method, all players will exist.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name the player to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the player by the given UUID, regardless if they are offline or\n online.\n <p>\n This will return an object even if the player does not exist. To this\n method, all players will exist.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the UUID of the player to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getIPBans","comment_text":"Gets a set containing all current IPs that are banned.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"banIP","comment_text":"Bans the specified address from the server.","return_type":"void","return_type_dimension":"","parameters":[{"name":"address","comment_text":"the IP address to ban","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unbanIP","comment_text":"Unbans the specified address from the server.","return_type":"void","return_type_dimension":"","parameters":[{"name":"address","comment_text":"the IP address to unban","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBannedPlayers","comment_text":"Gets a set containing all banned players.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBanList","comment_text":"Gets a ban list for the supplied type.\n <p>\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.","return_type":"org.bukkit.BanList","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the type of list to fetch, cannot be null","type":"org.bukkit.BanList.Type","type_dimension":""}],"throws":[]},{"name":"getOperators","comment_text":"Gets a set containing all player operators.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefaultGameMode","comment_text":"Gets the default {@link GameMode} for new players.","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDefaultGameMode","comment_text":"Sets the default {@link GameMode} for new players.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"the new game mode","type":"org.bukkit.GameMode","type_dimension":""}],"throws":[]},{"name":"getConsoleSender","comment_text":"Gets a {@link ConsoleCommandSender} that may be used as an input source\n for this server.","return_type":"org.bukkit.command.ConsoleCommandSender","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldContainer","comment_text":"Gets the folder that contains all of the various {@link World}s.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOfflinePlayers","comment_text":"Gets every player that has ever played on this server.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getMessenger","comment_text":"Gets the {@link Messenger} responsible for this server.","return_type":"org.bukkit.plugin.messaging.Messenger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHelpMap","comment_text":"Gets the {@link HelpMap} providing help topics for this server.","return_type":"org.bukkit.help.HelpMap","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.<br>\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n <br>\n {@link InventoryType#WORKBENCH} will not process crafting recipes if\n created with this method. Use\n {@link Player#openWorkbench(Location, boolean)} instead.\n <br>\n {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n for possible enchanting results. Use\n {@link Player#openEnchanting(Location, boolean)} instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"type","comment_text":"the type of inventory to create","type":"org.bukkit.event.inventory.InventoryType","type_dimension":""}],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.<br>\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n <br>\n {@link InventoryType#WORKBENCH} will not process crafting recipes if\n created with this method. Use\n {@link Player#openWorkbench(Location, boolean)} instead.\n <br>\n {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n for possible enchanting results. Use\n {@link Player#openEnchanting(Location, boolean)} instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"The holder of the inventory; can be null if there's no holder.","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"type","comment_text":"The type of inventory to create.","type":"org.bukkit.event.inventory.InventoryType","type_dimension":""},{"name":"title","comment_text":"The title of the inventory, to be displayed when it is viewed.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"size","comment_text":"a multiple of 9 as the size of inventory to create","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the size is not a multiple of 9"}]},{"name":"createInventory","comment_text":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size and title.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"size","comment_text":"a multiple of 9 as the size of inventory to create","type":"int","type_dimension":""},{"name":"title","comment_text":"the title of the inventory, displayed when inventory is\n     viewed","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the size is not a multiple of 9"}]},{"name":"createMerchant","comment_text":"Creates an empty merchant.","return_type":"org.bukkit.inventory.Merchant","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title of the corresponding merchant inventory, displayed\n when the merchant inventory is viewed","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMonsterSpawnLimit","comment_text":"Gets user-specified limit for number of monsters that can spawn in a\n chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAnimalSpawnLimit","comment_text":"Gets user-specified limit for number of animals that can spawn in a\n chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWaterAnimalSpawnLimit","comment_text":"Gets user-specified limit for number of water animals that can spawn in\n a chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAmbientSpawnLimit","comment_text":"Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPrimaryThread","comment_text":"Checks the current thread against the expected primary thread for the\n server.\n <p>\n <b>Note:</b> this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch <b>does not\n preclude</b> the same assumption.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMotd","comment_text":"Gets the message that is displayed on the server list.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShutdownMessage","comment_text":"Gets the default message that is displayed when the server is stopped.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWarningState","comment_text":"Gets the current warning state for the server.","return_type":"org.bukkit.Warning.WarningState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemFactory","comment_text":"Gets the instance of the item factory (for {@link ItemMeta}).","return_type":"org.bukkit.inventory.ItemFactory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScoreboardManager","comment_text":"Gets the instance of the scoreboard manager.\n <p>\n This will only exist after the first world has loaded.","return_type":"org.bukkit.scoreboard.ScoreboardManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerIcon","comment_text":"Gets an instance of the server's default server-icon.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[],"throws":[]},{"name":"loadServerIcon","comment_text":"Loads an image from a file, and returns a cached image for the specific\n server-icon.\n <p>\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[{"name":"file","comment_text":"the file to load the from","type":"java.io.File","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if image is null"},{"name":"java.lang.Exception","comment_text":"if the image does not meet current server server-icon\n     specifications"}]},{"name":"loadServerIcon","comment_text":"Creates a cached server-icon for the specific image.\n <p>\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[{"name":"image","comment_text":"the image to use","type":"java.awt.image.BufferedImage","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if image is null"},{"name":"java.lang.Exception","comment_text":"if the image does not meet current server\n     server-icon specifications"}]},{"name":"setIdleTimeout","comment_text":"Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n <p>\n A value of 0 will disable the idle kick timeout.","return_type":"void","return_type_dimension":"","parameters":[{"name":"threshold","comment_text":"the idle timeout in minutes","type":"int","type_dimension":""}],"throws":[]},{"name":"getIdleTimeout","comment_text":"Gets the idle kick timeout.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createChunkData","comment_text":"Create a ChunkData for use in a generator.\n \n See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}","return_type":"org.bukkit.generator.ChunkGenerator.ChunkData","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world to create the ChunkData for","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"createBossBar","comment_text":"Creates a boss bar instance to display to players. The progress\n defaults to 1.0","return_type":"org.bukkit.boss.BossBar","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title of the boss bar","type":"java.lang.String","type_dimension":""},{"name":"color","comment_text":"the color of the boss bar","type":"org.bukkit.boss.BarColor","type_dimension":""},{"name":"style","comment_text":"the style of the boss bar","type":"org.bukkit.boss.BarStyle","type_dimension":""},{"name":"flags","comment_text":"an optional list of flags to set on the boss bar","type":"org.bukkit.boss.BarFlag","type_dimension":"[]"}],"throws":[]},{"name":"getEntity","comment_text":"Gets an entity on the server by its UUID","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[{"name":"uuid","comment_text":"the UUID of the entity","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getAdvancement","comment_text":"Get the advancement specified by this key.","return_type":"org.bukkit.advancement.Advancement","return_type_dimension":"","parameters":[{"name":"key","comment_text":"unique advancement key","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]},{"name":"advancementIterator","comment_text":"Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,","return_type":"java.util.Iterator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""},{"name":"consumer","comment_text":"consumer to run on new instance before returning","type":"java.util.function.Consumer","type_dimension":""}],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance with material and properties\n parsed from provided data.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"data","comment_text":"data string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified data is not valid"}]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults, except for those\n provided in data.\n <br>\n If <code>material</code> is specified, then the data string must not also\n contain the material.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"data string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified data is not valid"}]},{"name":"getTag","comment_text":"Gets a tag which has already been defined within the server. Plugins are\n suggested to use the concrete tags in {@link Tag} rather than this method\n which makes no guarantees about which tags are available, and may also be\n less performant due to lack of caching.\n <br>\n Tags will be searched for in an implementation specific manner, but a\n path consisting of namespace/tags/registry/key is expected.\n <br>\n Server implementations are allowed to handle only the registries\n indicated in {@link Tag}.","return_type":"org.bukkit.Tag","return_type_dimension":"","parameters":[{"name":"registry","comment_text":"the tag registry to look at","type":"java.lang.String","type_dimension":""},{"name":"tag","comment_text":"the name of the tag","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"clazz","comment_text":"the class of the tag entries","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getLootTable","comment_text":"Gets the specified {@link LootTable}.","return_type":"org.bukkit.loot.LootTable","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the name of the LootTable","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]},{"name":"getUnsafe","comment_text":"","return_type":"org.bukkit.UnsafeValues","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.SandstoneType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the three different types of Sandstone","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.SandstoneType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.SandstoneType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this type of sandstone","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the type of sandstone with the given data value","return_type":"org.bukkit.SandstoneType","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["CRACKED","GLYPHED","SMOOTH"]},{"name":"org.bukkit.Rotation","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify a rotation based orientation, like that on a clock.\n <p>\n It represents how something is viewed, as opposed to cardinal directions.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Rotation","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Rotation","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"rotateClockwise","comment_text":"Rotate clockwise by 90 degrees.","return_type":"org.bukkit.Rotation","return_type_dimension":"","parameters":[],"throws":[]},{"name":"rotateCounterClockwise","comment_text":"Rotate counter-clockwise by 90 degrees.","return_type":"org.bukkit.Rotation","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["NONE","CLOCKWISE_45","CLOCKWISE","CLOCKWISE_135","FLIPPED","FLIPPED_45","COUNTER_CLOCKWISE","COUNTER_CLOCKWISE_45"]},{"name":"org.bukkit.PortalType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents various types of portals that can be made in a world.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.PortalType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.PortalType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NETHER","ENDER","CUSTOM"]},{"name":"org.bukkit.Particle","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Particle","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Particle","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDataType","comment_text":"Returns the required data type for the particle","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["EXPLOSION_NORMAL","EXPLOSION_LARGE","EXPLOSION_HUGE","FIREWORKS_SPARK","WATER_BUBBLE","WATER_SPLASH","WATER_WAKE","SUSPENDED","SUSPENDED_DEPTH","CRIT","CRIT_MAGIC","SMOKE_NORMAL","SMOKE_LARGE","SPELL","SPELL_INSTANT","SPELL_MOB","SPELL_MOB_AMBIENT","SPELL_WITCH","DRIP_WATER","DRIP_LAVA","VILLAGER_ANGRY","VILLAGER_HAPPY","TOWN_AURA","NOTE","PORTAL","ENCHANTMENT_TABLE","FLAME","LAVA","CLOUD","REDSTONE","SNOWBALL","SNOW_SHOVEL","SLIME","HEART","BARRIER","ITEM_CRACK","BLOCK_CRACK","BLOCK_DUST","WATER_DROP","MOB_APPEARANCE","DRAGON_BREATH","END_ROD","DAMAGE_INDICATOR","SWEEP_ATTACK","FALLING_DUST","TOTEM","SPIT","SQUID_INK","BUBBLE_POP","CURRENT_DOWN","BUBBLE_COLUMN_UP","NAUTILUS","DOLPHIN","LEGACY_BLOCK_CRACK","LEGACY_BLOCK_DUST","LEGACY_FALLING_DUST"]},{"name":"org.bukkit.Particle.DustOptions","interfaces":[],"superclass":"java.lang.Object","comment_text":"Options which can be applied to redstone dust particles - a particle\n color and size.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"DustOptions","comment_text":"","parameters":[{"name":"color","comment_text":"","type":"org.bukkit.Color","type_dimension":""},{"name":"size","comment_text":"","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getColor","comment_text":"The color of the particles to be displayed.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSize","comment_text":"Relative size of the particle.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.OfflinePlayer","interfaces":["org.bukkit.permissions.ServerOperator","org.bukkit.entity.AnimalTamer","org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isOnline","comment_text":"Checks if this player is currently online","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Returns the name of this player\n <p>\n Names are no longer unique past a single game session. For persistent storage\n it is recommended that you use {@link #getUniqueId()} instead.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUniqueId","comment_text":"Returns the UUID of this player","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBanned","comment_text":"Checks if this player is banned or not","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isWhitelisted","comment_text":"Checks if this player is whitelisted or not","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWhitelisted","comment_text":"Sets if this player is whitelisted or not","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"true if whitelisted","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPlayer","comment_text":"Gets a {@link Player} object that this represents, if there is one\n <p>\n If the player is online, this will return that player. Otherwise,\n it will return null.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFirstPlayed","comment_text":"Gets the first date and time that this player was witnessed on this\n server.\n <p>\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLastPlayed","comment_text":"Gets the last date and time that this player was witnessed on this\n server.\n <p>\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasPlayedBefore","comment_text":"Checks if this player has played on this server before.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBedSpawnLocation","comment_text":"Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Note","interfaces":[],"superclass":"java.lang.Object","comment_text":"A note class to store a specific note.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Note","comment_text":"Creates a new note.","parameters":[{"name":"note","comment_text":"Internal note id. {@link #getId()} always return this\n     value. The value has to be in the interval [0;&nbsp;24].","type":"int","type_dimension":""}],"throws":[]},{"name":"Note","comment_text":"Creates a new note.","parameters":[{"name":"octave","comment_text":"The octave where the note is in. Has to be 0 - 2.","type":"int","type_dimension":""},{"name":"tone","comment_text":"The tone within the octave. If the octave is 2 the note has\n     to be F#.","type":"org.bukkit.Note.Tone","type_dimension":""},{"name":"sharped","comment_text":"Set if the tone is sharped (e.g. for F#).","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"flat","comment_text":"Creates a new note for a flat tone, such as A-flat.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[{"name":"octave","comment_text":"The octave where the note is in. Has to be 0 - 1.","type":"int","type_dimension":""},{"name":"tone","comment_text":"The tone within the octave.","type":"org.bukkit.Note.Tone","type_dimension":""}],"throws":[]},{"name":"sharp","comment_text":"Creates a new note for a sharp tone, such as A-sharp.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[{"name":"octave","comment_text":"The octave where the note is in. Has to be 0 - 2.","type":"int","type_dimension":""},{"name":"tone","comment_text":"The tone within the octave. If the octave is 2 the note has\n     to be F#.","type":"org.bukkit.Note.Tone","type_dimension":""}],"throws":[]},{"name":"natural","comment_text":"Creates a new note for a natural tone, such as A-natural.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[{"name":"octave","comment_text":"The octave where the note is in. Has to be 0 - 1.","type":"int","type_dimension":""},{"name":"tone","comment_text":"The tone within the octave.","type":"org.bukkit.Note.Tone","type_dimension":""}],"throws":[]},{"name":"sharped","comment_text":"","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[],"throws":[]},{"name":"flattened","comment_text":"","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getId","comment_text":"Returns the internal id of this note.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOctave","comment_text":"Returns the octave of this note.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTone","comment_text":"Returns the tone of this note.","return_type":"org.bukkit.Note.Tone","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSharped","comment_text":"Returns if this note is sharped.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Note.Tone","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum holding tones.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[{"name":"TONES_COUNT","comment_text":"The number of tones including sharped tones.","type":"byte","type_dimension":""}],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Note.Tone","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Note.Tone","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"Returns the not sharped id of this tone.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getId","comment_text":"Returns the id of this tone. These method allows to return the\n sharped id of the tone. If the tone couldn't be sharped it always\n return the not sharped id of this tone.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"sharped","comment_text":"Set to true to return the sharped id.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSharpable","comment_text":"Returns if this tone could be sharped.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSharped","comment_text":"Returns if this tone id is the sharped id of the tone.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the id of the tone.","type":"byte","type_dimension":""}],"throws":[]},{"name":"getById","comment_text":"Returns the tone to id. Also returning the semitones.","return_type":"org.bukkit.Note.Tone","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the id of the tone.","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["G","A","B","C","D","E","F"]},{"name":"org.bukkit.NetherWartsState","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.NetherWartsState","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.NetherWartsState","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SEEDED","STAGE_ONE","STAGE_TWO","RIPE"]},{"name":"org.bukkit.NamespacedKey","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a String based key which consists of two components - a namespace\n and a key.\n\n Namespaces may only contain lowercase alphanumeric characters, periods,\n underscores, and hyphens.\n <p>\n Keys may only contain lowercase alphanumeric characters, periods,\n underscores, hyphens, and forward slashes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NamespacedKey","comment_text":"Create a key in a specific namespace.","parameters":[{"name":"namespace","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"key","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"NamespacedKey","comment_text":"Create a key in the plugin's namespace.\n <p>\n Namespaces may only contain lowercase alphanumeric characters, periods,\n underscores, and hyphens.\n <p>\n Keys may only contain lowercase alphanumeric characters, periods,\n underscores, hyphens, and forward slashes.","parameters":[{"name":"plugin","comment_text":"the plugin to use for the namespace","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"key","comment_text":"the key to create","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[{"name":"MINECRAFT","comment_text":"The namespace representing all inbuilt keys.","type":"java.lang.String","type_dimension":""},{"name":"BUKKIT","comment_text":"The namespace representing all keys generated by Bukkit for backwards\n compatibility measures.","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"getNamespace","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKey","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"randomKey","comment_text":"Return a new random key in the {@link #BUKKIT} namespace.","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"minecraft","comment_text":"Get a key in the Minecraft namespace.","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the key to use","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Nameable","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCustomName","comment_text":"Gets the custom name on a mob or block. If there is no name this method\n will return null.\n <p>\n This value has no effect on players, they will always use their real\n name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCustomName","comment_text":"Sets a custom name on a mob or block. This name will be used in death\n messages and can be sent to the client as a nameplate over the mob.\n <p>\n Setting the name to null or an empty string will clear it.\n <p>\n This value has no effect on players, they will always use their real\n name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to set","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Material","interfaces":["org.bukkit.Keyed"],"superclass":"java.lang.Enum","comment_text":"An enum of all material IDs accepted by the official server and client","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[{"name":"LEGACY_PREFIX","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"data","comment_text":"","type":"java.lang.Class","type_dimension":""}],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"Do not use for any reason.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLegacy","comment_text":"Do not use for any reason.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxStackSize","comment_text":"Gets the maximum amount of this material that can be held in a stack","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxDurability","comment_text":"Gets the maximum durability of this material","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for this Material, with all\n properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for this Material, with\n all properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"consumer","comment_text":"consumer to run on new instance before returning","type":"java.util.function.Consumer","type_dimension":""}],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for this Material, with all\n properties initialized to unspecified defaults, except for those provided\n in data.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"data","comment_text":"data string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified data is not valid"}]},{"name":"getData","comment_text":"Gets the MaterialData class associated with this Material","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewData","comment_text":"Constructs a new MaterialData relevant for this Material, with the\n given initial data","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[{"name":"raw","comment_text":"Initial data to construct the MaterialData with","type":"byte","type_dimension":""}],"throws":[]},{"name":"isBlock","comment_text":"Checks if this Material is a placable block","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEdible","comment_text":"Checks if this Material is edible.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaterial","comment_text":"Attempts to get the Material with the given name.\n <p>\n This is a normal lookup, names must be the precise name they are given\n in the enum.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the material to get","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMaterial","comment_text":"Attempts to get the Material with the given name.\n <p>\n This is a normal lookup, names must be the precise name they are given\n in the enum.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the material to get","type":"java.lang.String","type_dimension":""},{"name":"legacyName","comment_text":"whether this is a legacy name","type":"boolean","type_dimension":""}],"throws":[]},{"name":"matchMaterial","comment_text":"Attempts to match the Material with the given name.\n <p>\n This is a match lookup; names will be stripped of the \"minecraft:\"\n namespace, converted to uppercase, then stripped of special characters in\n an attempt to format it like the enum.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the material to get","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"matchMaterial","comment_text":"Attempts to match the Material with the given name.\n <p>\n This is a match lookup; names will be stripped of the \"minecraft:\"\n namespace, converted to uppercase, then stripped of special characters in\n an attempt to format it like the enum.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the material to get","type":"java.lang.String","type_dimension":""},{"name":"legacyName","comment_text":"whether this is a legacy name","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isRecord","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSolid","comment_text":"Check if the material is a block and solid (can be built upon)","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isTransparent","comment_text":"Check if the material is a block and does not block any light","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isFlammable","comment_text":"Check if the material is a block and can catch fire","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBurnable","comment_text":"Check if the material is a block and can burn away","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isFuel","comment_text":"Checks if this Material can be used as fuel in a Furnace","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isOccluding","comment_text":"Check if the material is a block and completely blocks vision","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasGravity","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isItem","comment_text":"Checks if this Material is an obtainable item.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInteractable","comment_text":"Checks if this Material can be interacted with.\n\n Interactable materials include those with functionality when they are\n interacted with by a player such as chests, furnaces, etc.\n\n Some blocks such as piston heads and stairs are considered interactable\n though may not perform any additional functionality.\n\n Note that the interactability of some materials may be dependant on their\n state as well. This method will return true if there is at least one\n state in which additional interact handling is performed for the\n material.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHardness","comment_text":"Obtains the block's hardness level (also known as \"strength\").\n <br>\n This number is used to calculate the time required to break each block.\n <br>\n Only available when {@link #isBlock()} is true.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlastResistance","comment_text":"Obtains the blast resistance value (also known as block \"durability\").\n <br>\n This value is used in explosions to calculate whether a block should be\n broken or not.\n <br>\n Only available when {@link #isBlock()} is true.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["ACACIA_BOAT","ACACIA_BUTTON","ACACIA_DOOR","ACACIA_FENCE","ACACIA_FENCE_GATE","ACACIA_LEAVES","ACACIA_LOG","ACACIA_PLANKS","ACACIA_PRESSURE_PLATE","ACACIA_SAPLING","ACACIA_SLAB","ACACIA_STAIRS","ACACIA_TRAPDOOR","ACACIA_WOOD","ACTIVATOR_RAIL","AIR","ALLIUM","ANDESITE","ANVIL","APPLE","ARMOR_STAND","ARROW","ATTACHED_MELON_STEM","ATTACHED_PUMPKIN_STEM","AZURE_BLUET","BAKED_POTATO","BARRIER","BAT_SPAWN_EGG","BEACON","BEDROCK","BEEF","BEETROOT","BEETROOTS","BEETROOT_SEEDS","BEETROOT_SOUP","BIRCH_BOAT","BIRCH_BUTTON","BIRCH_DOOR","BIRCH_FENCE","BIRCH_FENCE_GATE","BIRCH_LEAVES","BIRCH_LOG","BIRCH_PLANKS","BIRCH_PRESSURE_PLATE","BIRCH_SAPLING","BIRCH_SLAB","BIRCH_STAIRS","BIRCH_TRAPDOOR","BIRCH_WOOD","BLACK_BANNER","BLACK_BED","BLACK_CARPET","BLACK_CONCRETE","BLACK_CONCRETE_POWDER","BLACK_GLAZED_TERRACOTTA","BLACK_SHULKER_BOX","BLACK_STAINED_GLASS","BLACK_STAINED_GLASS_PANE","BLACK_TERRACOTTA","BLACK_WALL_BANNER","BLACK_WOOL","BLAZE_POWDER","BLAZE_ROD","BLAZE_SPAWN_EGG","BLUE_BANNER","BLUE_BED","BLUE_CARPET","BLUE_CONCRETE","BLUE_CONCRETE_POWDER","BLUE_GLAZED_TERRACOTTA","BLUE_ICE","BLUE_ORCHID","BLUE_SHULKER_BOX","BLUE_STAINED_GLASS","BLUE_STAINED_GLASS_PANE","BLUE_TERRACOTTA","BLUE_WALL_BANNER","BLUE_WOOL","BONE","BONE_BLOCK","BONE_MEAL","BOOK","BOOKSHELF","BOW","BOWL","BRAIN_CORAL","BRAIN_CORAL_BLOCK","BRAIN_CORAL_FAN","BRAIN_CORAL_WALL_FAN","BREAD","BREWING_STAND","BRICK","BRICKS","BRICK_SLAB","BRICK_STAIRS","BROWN_BANNER","BROWN_BED","BROWN_CARPET","BROWN_CONCRETE","BROWN_CONCRETE_POWDER","BROWN_GLAZED_TERRACOTTA","BROWN_MUSHROOM","BROWN_MUSHROOM_BLOCK","BROWN_SHULKER_BOX","BROWN_STAINED_GLASS","BROWN_STAINED_GLASS_PANE","BROWN_TERRACOTTA","BROWN_WALL_BANNER","BROWN_WOOL","BUBBLE_COLUMN","BUBBLE_CORAL","BUBBLE_CORAL_BLOCK","BUBBLE_CORAL_FAN","BUBBLE_CORAL_WALL_FAN","BUCKET","CACTUS","CACTUS_GREEN","CAKE","CARROT","CARROTS","CARROT_ON_A_STICK","CARVED_PUMPKIN","CAULDRON","CAVE_AIR","CAVE_SPIDER_SPAWN_EGG","CHAINMAIL_BOOTS","CHAINMAIL_CHESTPLATE","CHAINMAIL_HELMET","CHAINMAIL_LEGGINGS","CHAIN_COMMAND_BLOCK","CHARCOAL","CHEST","CHEST_MINECART","CHICKEN","CHICKEN_SPAWN_EGG","CHIPPED_ANVIL","CHISELED_QUARTZ_BLOCK","CHISELED_RED_SANDSTONE","CHISELED_SANDSTONE","CHISELED_STONE_BRICKS","CHORUS_FLOWER","CHORUS_FRUIT","CHORUS_PLANT","CLAY","CLAY_BALL","CLOCK","COAL","COAL_BLOCK","COAL_ORE","COARSE_DIRT","COBBLESTONE","COBBLESTONE_SLAB","COBBLESTONE_STAIRS","COBBLESTONE_WALL","COBWEB","COCOA","COCOA_BEANS","COD","COD_BUCKET","COD_SPAWN_EGG","COMMAND_BLOCK","COMMAND_BLOCK_MINECART","COMPARATOR","COMPASS","CONDUIT","COOKED_BEEF","COOKED_CHICKEN","COOKED_COD","COOKED_MUTTON","COOKED_PORKCHOP","COOKED_RABBIT","COOKED_SALMON","COOKIE","COW_SPAWN_EGG","CRACKED_STONE_BRICKS","CRAFTING_TABLE","CREEPER_HEAD","CREEPER_SPAWN_EGG","CREEPER_WALL_HEAD","CUT_RED_SANDSTONE","CUT_SANDSTONE","CYAN_BANNER","CYAN_BED","CYAN_CARPET","CYAN_CONCRETE","CYAN_CONCRETE_POWDER","CYAN_DYE","CYAN_GLAZED_TERRACOTTA","CYAN_SHULKER_BOX","CYAN_STAINED_GLASS","CYAN_STAINED_GLASS_PANE","CYAN_TERRACOTTA","CYAN_WALL_BANNER","CYAN_WOOL","DAMAGED_ANVIL","DANDELION","DANDELION_YELLOW","DARK_OAK_BOAT","DARK_OAK_BUTTON","DARK_OAK_DOOR","DARK_OAK_FENCE","DARK_OAK_FENCE_GATE","DARK_OAK_LEAVES","DARK_OAK_LOG","DARK_OAK_PLANKS","DARK_OAK_PRESSURE_PLATE","DARK_OAK_SAPLING","DARK_OAK_SLAB","DARK_OAK_STAIRS","DARK_OAK_TRAPDOOR","DARK_OAK_WOOD","DARK_PRISMARINE","DARK_PRISMARINE_SLAB","DARK_PRISMARINE_STAIRS","DAYLIGHT_DETECTOR","DEAD_BRAIN_CORAL","DEAD_BRAIN_CORAL_BLOCK","DEAD_BRAIN_CORAL_FAN","DEAD_BRAIN_CORAL_WALL_FAN","DEAD_BUBBLE_CORAL","DEAD_BUBBLE_CORAL_BLOCK","DEAD_BUBBLE_CORAL_FAN","DEAD_BUBBLE_CORAL_WALL_FAN","DEAD_BUSH","DEAD_FIRE_CORAL","DEAD_FIRE_CORAL_BLOCK","DEAD_FIRE_CORAL_FAN","DEAD_FIRE_CORAL_WALL_FAN","DEAD_HORN_CORAL","DEAD_HORN_CORAL_BLOCK","DEAD_HORN_CORAL_FAN","DEAD_HORN_CORAL_WALL_FAN","DEAD_TUBE_CORAL","DEAD_TUBE_CORAL_BLOCK","DEAD_TUBE_CORAL_FAN","DEAD_TUBE_CORAL_WALL_FAN","DEBUG_STICK","DETECTOR_RAIL","DIAMOND","DIAMOND_AXE","DIAMOND_BLOCK","DIAMOND_BOOTS","DIAMOND_CHESTPLATE","DIAMOND_HELMET","DIAMOND_HOE","DIAMOND_HORSE_ARMOR","DIAMOND_LEGGINGS","DIAMOND_ORE","DIAMOND_PICKAXE","DIAMOND_SHOVEL","DIAMOND_SWORD","DIORITE","DIRT","DISPENSER","DOLPHIN_SPAWN_EGG","DONKEY_SPAWN_EGG","DRAGON_BREATH","DRAGON_EGG","DRAGON_HEAD","DRAGON_WALL_HEAD","DRIED_KELP","DRIED_KELP_BLOCK","DROPPER","DROWNED_SPAWN_EGG","EGG","ELDER_GUARDIAN_SPAWN_EGG","ELYTRA","EMERALD","EMERALD_BLOCK","EMERALD_ORE","ENCHANTED_BOOK","ENCHANTED_GOLDEN_APPLE","ENCHANTING_TABLE","ENDERMAN_SPAWN_EGG","ENDERMITE_SPAWN_EGG","ENDER_CHEST","ENDER_EYE","ENDER_PEARL","END_CRYSTAL","END_GATEWAY","END_PORTAL","END_PORTAL_FRAME","END_ROD","END_STONE","END_STONE_BRICKS","EVOKER_SPAWN_EGG","EXPERIENCE_BOTTLE","FARMLAND","FEATHER","FERMENTED_SPIDER_EYE","FERN","FILLED_MAP","FIRE","FIREWORK_ROCKET","FIREWORK_STAR","FIRE_CHARGE","FIRE_CORAL","FIRE_CORAL_BLOCK","FIRE_CORAL_FAN","FIRE_CORAL_WALL_FAN","FISHING_ROD","FLINT","FLINT_AND_STEEL","FLOWER_POT","FROSTED_ICE","FURNACE","FURNACE_MINECART","GHAST_SPAWN_EGG","GHAST_TEAR","GLASS","GLASS_BOTTLE","GLASS_PANE","GLISTERING_MELON_SLICE","GLOWSTONE","GLOWSTONE_DUST","GOLDEN_APPLE","GOLDEN_AXE","GOLDEN_BOOTS","GOLDEN_CARROT","GOLDEN_CHESTPLATE","GOLDEN_HELMET","GOLDEN_HOE","GOLDEN_HORSE_ARMOR","GOLDEN_LEGGINGS","GOLDEN_PICKAXE","GOLDEN_SHOVEL","GOLDEN_SWORD","GOLD_BLOCK","GOLD_INGOT","GOLD_NUGGET","GOLD_ORE","GRANITE","GRASS","GRASS_BLOCK","GRASS_PATH","GRAVEL","GRAY_BANNER","GRAY_BED","GRAY_CARPET","GRAY_CONCRETE","GRAY_CONCRETE_POWDER","GRAY_DYE","GRAY_GLAZED_TERRACOTTA","GRAY_SHULKER_BOX","GRAY_STAINED_GLASS","GRAY_STAINED_GLASS_PANE","GRAY_TERRACOTTA","GRAY_WALL_BANNER","GRAY_WOOL","GREEN_BANNER","GREEN_BED","GREEN_CARPET","GREEN_CONCRETE","GREEN_CONCRETE_POWDER","GREEN_GLAZED_TERRACOTTA","GREEN_SHULKER_BOX","GREEN_STAINED_GLASS","GREEN_STAINED_GLASS_PANE","GREEN_TERRACOTTA","GREEN_WALL_BANNER","GREEN_WOOL","GUARDIAN_SPAWN_EGG","GUNPOWDER","HAY_BLOCK","HEART_OF_THE_SEA","HEAVY_WEIGHTED_PRESSURE_PLATE","HOPPER","HOPPER_MINECART","HORN_CORAL","HORN_CORAL_BLOCK","HORN_CORAL_FAN","HORN_CORAL_WALL_FAN","HORSE_SPAWN_EGG","HUSK_SPAWN_EGG","ICE","INFESTED_CHISELED_STONE_BRICKS","INFESTED_COBBLESTONE","INFESTED_CRACKED_STONE_BRICKS","INFESTED_MOSSY_STONE_BRICKS","INFESTED_STONE","INFESTED_STONE_BRICKS","INK_SAC","IRON_AXE","IRON_BARS","IRON_BLOCK","IRON_BOOTS","IRON_CHESTPLATE","IRON_DOOR","IRON_HELMET","IRON_HOE","IRON_HORSE_ARMOR","IRON_INGOT","IRON_LEGGINGS","IRON_NUGGET","IRON_ORE","IRON_PICKAXE","IRON_SHOVEL","IRON_SWORD","IRON_TRAPDOOR","ITEM_FRAME","JACK_O_LANTERN","JUKEBOX","JUNGLE_BOAT","JUNGLE_BUTTON","JUNGLE_DOOR","JUNGLE_FENCE","JUNGLE_FENCE_GATE","JUNGLE_LEAVES","JUNGLE_LOG","JUNGLE_PLANKS","JUNGLE_PRESSURE_PLATE","JUNGLE_SAPLING","JUNGLE_SLAB","JUNGLE_STAIRS","JUNGLE_TRAPDOOR","JUNGLE_WOOD","KELP","KELP_PLANT","KNOWLEDGE_BOOK","LADDER","LAPIS_BLOCK","LAPIS_LAZULI","LAPIS_ORE","LARGE_FERN","LAVA","LAVA_BUCKET","LEAD","LEATHER","LEATHER_BOOTS","LEATHER_CHESTPLATE","LEATHER_HELMET","LEATHER_LEGGINGS","LEVER","LIGHT_BLUE_BANNER","LIGHT_BLUE_BED","LIGHT_BLUE_CARPET","LIGHT_BLUE_CONCRETE","LIGHT_BLUE_CONCRETE_POWDER","LIGHT_BLUE_DYE","LIGHT_BLUE_GLAZED_TERRACOTTA","LIGHT_BLUE_SHULKER_BOX","LIGHT_BLUE_STAINED_GLASS","LIGHT_BLUE_STAINED_GLASS_PANE","LIGHT_BLUE_TERRACOTTA","LIGHT_BLUE_WALL_BANNER","LIGHT_BLUE_WOOL","LIGHT_GRAY_BANNER","LIGHT_GRAY_BED","LIGHT_GRAY_CARPET","LIGHT_GRAY_CONCRETE","LIGHT_GRAY_CONCRETE_POWDER","LIGHT_GRAY_DYE","LIGHT_GRAY_GLAZED_TERRACOTTA","LIGHT_GRAY_SHULKER_BOX","LIGHT_GRAY_STAINED_GLASS","LIGHT_GRAY_STAINED_GLASS_PANE","LIGHT_GRAY_TERRACOTTA","LIGHT_GRAY_WALL_BANNER","LIGHT_GRAY_WOOL","LIGHT_WEIGHTED_PRESSURE_PLATE","LILAC","LILY_PAD","LIME_BANNER","LIME_BED","LIME_CARPET","LIME_CONCRETE","LIME_CONCRETE_POWDER","LIME_DYE","LIME_GLAZED_TERRACOTTA","LIME_SHULKER_BOX","LIME_STAINED_GLASS","LIME_STAINED_GLASS_PANE","LIME_TERRACOTTA","LIME_WALL_BANNER","LIME_WOOL","LINGERING_POTION","LLAMA_SPAWN_EGG","MAGENTA_BANNER","MAGENTA_BED","MAGENTA_CARPET","MAGENTA_CONCRETE","MAGENTA_CONCRETE_POWDER","MAGENTA_DYE","MAGENTA_GLAZED_TERRACOTTA","MAGENTA_SHULKER_BOX","MAGENTA_STAINED_GLASS","MAGENTA_STAINED_GLASS_PANE","MAGENTA_TERRACOTTA","MAGENTA_WALL_BANNER","MAGENTA_WOOL","MAGMA_BLOCK","MAGMA_CREAM","MAGMA_CUBE_SPAWN_EGG","MAP","MELON","MELON_SEEDS","MELON_SLICE","MELON_STEM","MILK_BUCKET","MINECART","MOOSHROOM_SPAWN_EGG","MOSSY_COBBLESTONE","MOSSY_COBBLESTONE_WALL","MOSSY_STONE_BRICKS","MOVING_PISTON","MULE_SPAWN_EGG","MUSHROOM_STEM","MUSHROOM_STEW","MUSIC_DISC_11","MUSIC_DISC_13","MUSIC_DISC_BLOCKS","MUSIC_DISC_CAT","MUSIC_DISC_CHIRP","MUSIC_DISC_FAR","MUSIC_DISC_MALL","MUSIC_DISC_MELLOHI","MUSIC_DISC_STAL","MUSIC_DISC_STRAD","MUSIC_DISC_WAIT","MUSIC_DISC_WARD","MUTTON","MYCELIUM","NAME_TAG","NAUTILUS_SHELL","NETHERRACK","NETHER_BRICK","NETHER_BRICKS","NETHER_BRICK_FENCE","NETHER_BRICK_SLAB","NETHER_BRICK_STAIRS","NETHER_PORTAL","NETHER_QUARTZ_ORE","NETHER_STAR","NETHER_WART","NETHER_WART_BLOCK","NOTE_BLOCK","OAK_BOAT","OAK_BUTTON","OAK_DOOR","OAK_FENCE","OAK_FENCE_GATE","OAK_LEAVES","OAK_LOG","OAK_PLANKS","OAK_PRESSURE_PLATE","OAK_SAPLING","OAK_SLAB","OAK_STAIRS","OAK_TRAPDOOR","OAK_WOOD","OBSERVER","OBSIDIAN","OCELOT_SPAWN_EGG","ORANGE_BANNER","ORANGE_BED","ORANGE_CARPET","ORANGE_CONCRETE","ORANGE_CONCRETE_POWDER","ORANGE_DYE","ORANGE_GLAZED_TERRACOTTA","ORANGE_SHULKER_BOX","ORANGE_STAINED_GLASS","ORANGE_STAINED_GLASS_PANE","ORANGE_TERRACOTTA","ORANGE_TULIP","ORANGE_WALL_BANNER","ORANGE_WOOL","OXEYE_DAISY","PACKED_ICE","PAINTING","PAPER","PARROT_SPAWN_EGG","PEONY","PETRIFIED_OAK_SLAB","PHANTOM_MEMBRANE","PHANTOM_SPAWN_EGG","PIG_SPAWN_EGG","PINK_BANNER","PINK_BED","PINK_CARPET","PINK_CONCRETE","PINK_CONCRETE_POWDER","PINK_DYE","PINK_GLAZED_TERRACOTTA","PINK_SHULKER_BOX","PINK_STAINED_GLASS","PINK_STAINED_GLASS_PANE","PINK_TERRACOTTA","PINK_TULIP","PINK_WALL_BANNER","PINK_WOOL","PISTON","PISTON_HEAD","PLAYER_HEAD","PLAYER_WALL_HEAD","PODZOL","POISONOUS_POTATO","POLAR_BEAR_SPAWN_EGG","POLISHED_ANDESITE","POLISHED_DIORITE","POLISHED_GRANITE","POPPED_CHORUS_FRUIT","POPPY","PORKCHOP","POTATO","POTATOES","POTION","POTTED_ACACIA_SAPLING","POTTED_ALLIUM","POTTED_AZURE_BLUET","POTTED_BIRCH_SAPLING","POTTED_BLUE_ORCHID","POTTED_BROWN_MUSHROOM","POTTED_CACTUS","POTTED_DANDELION","POTTED_DARK_OAK_SAPLING","POTTED_DEAD_BUSH","POTTED_FERN","POTTED_JUNGLE_SAPLING","POTTED_OAK_SAPLING","POTTED_ORANGE_TULIP","POTTED_OXEYE_DAISY","POTTED_PINK_TULIP","POTTED_POPPY","POTTED_RED_MUSHROOM","POTTED_RED_TULIP","POTTED_SPRUCE_SAPLING","POTTED_WHITE_TULIP","POWERED_RAIL","PRISMARINE","PRISMARINE_BRICKS","PRISMARINE_BRICK_SLAB","PRISMARINE_BRICK_STAIRS","PRISMARINE_CRYSTALS","PRISMARINE_SHARD","PRISMARINE_SLAB","PRISMARINE_STAIRS","PUFFERFISH","PUFFERFISH_BUCKET","PUFFERFISH_SPAWN_EGG","PUMPKIN","PUMPKIN_PIE","PUMPKIN_SEEDS","PUMPKIN_STEM","PURPLE_BANNER","PURPLE_BED","PURPLE_CARPET","PURPLE_CONCRETE","PURPLE_CONCRETE_POWDER","PURPLE_DYE","PURPLE_GLAZED_TERRACOTTA","PURPLE_SHULKER_BOX","PURPLE_STAINED_GLASS","PURPLE_STAINED_GLASS_PANE","PURPLE_TERRACOTTA","PURPLE_WALL_BANNER","PURPLE_WOOL","PURPUR_BLOCK","PURPUR_PILLAR","PURPUR_SLAB","PURPUR_STAIRS","QUARTZ","QUARTZ_BLOCK","QUARTZ_PILLAR","QUARTZ_SLAB","QUARTZ_STAIRS","RABBIT","RABBIT_FOOT","RABBIT_HIDE","RABBIT_SPAWN_EGG","RABBIT_STEW","RAIL","REDSTONE","REDSTONE_BLOCK","REDSTONE_LAMP","REDSTONE_ORE","REDSTONE_TORCH","REDSTONE_WALL_TORCH","REDSTONE_WIRE","RED_BANNER","RED_BED","RED_CARPET","RED_CONCRETE","RED_CONCRETE_POWDER","RED_GLAZED_TERRACOTTA","RED_MUSHROOM","RED_MUSHROOM_BLOCK","RED_NETHER_BRICKS","RED_SAND","RED_SANDSTONE","RED_SANDSTONE_SLAB","RED_SANDSTONE_STAIRS","RED_SHULKER_BOX","RED_STAINED_GLASS","RED_STAINED_GLASS_PANE","RED_TERRACOTTA","RED_TULIP","RED_WALL_BANNER","RED_WOOL","REPEATER","REPEATING_COMMAND_BLOCK","ROSE_BUSH","ROSE_RED","ROTTEN_FLESH","SADDLE","SALMON","SALMON_BUCKET","SALMON_SPAWN_EGG","SAND","SANDSTONE","SANDSTONE_SLAB","SANDSTONE_STAIRS","SCUTE","SEAGRASS","SEA_LANTERN","SEA_PICKLE","SHEARS","SHEEP_SPAWN_EGG","SHIELD","SHULKER_BOX","SHULKER_SHELL","SHULKER_SPAWN_EGG","SIGN","SILVERFISH_SPAWN_EGG","SKELETON_HORSE_SPAWN_EGG","SKELETON_SKULL","SKELETON_SPAWN_EGG","SKELETON_WALL_SKULL","SLIME_BALL","SLIME_BLOCK","SLIME_SPAWN_EGG","SMOOTH_QUARTZ","SMOOTH_RED_SANDSTONE","SMOOTH_SANDSTONE","SMOOTH_STONE","SNOW","SNOWBALL","SNOW_BLOCK","SOUL_SAND","SPAWNER","SPECTRAL_ARROW","SPIDER_EYE","SPIDER_SPAWN_EGG","SPLASH_POTION","SPONGE","SPRUCE_BOAT","SPRUCE_BUTTON","SPRUCE_DOOR","SPRUCE_FENCE","SPRUCE_FENCE_GATE","SPRUCE_LEAVES","SPRUCE_LOG","SPRUCE_PLANKS","SPRUCE_PRESSURE_PLATE","SPRUCE_SAPLING","SPRUCE_SLAB","SPRUCE_STAIRS","SPRUCE_TRAPDOOR","SPRUCE_WOOD","SQUID_SPAWN_EGG","STICK","STICKY_PISTON","STONE","STONE_AXE","STONE_BRICKS","STONE_BRICK_SLAB","STONE_BRICK_STAIRS","STONE_BUTTON","STONE_HOE","STONE_PICKAXE","STONE_PRESSURE_PLATE","STONE_SHOVEL","STONE_SLAB","STONE_SWORD","STRAY_SPAWN_EGG","STRING","STRIPPED_ACACIA_LOG","STRIPPED_ACACIA_WOOD","STRIPPED_BIRCH_LOG","STRIPPED_BIRCH_WOOD","STRIPPED_DARK_OAK_LOG","STRIPPED_DARK_OAK_WOOD","STRIPPED_JUNGLE_LOG","STRIPPED_JUNGLE_WOOD","STRIPPED_OAK_LOG","STRIPPED_OAK_WOOD","STRIPPED_SPRUCE_LOG","STRIPPED_SPRUCE_WOOD","STRUCTURE_BLOCK","STRUCTURE_VOID","SUGAR","SUGAR_CANE","SUNFLOWER","TALL_GRASS","TALL_SEAGRASS","TERRACOTTA","TIPPED_ARROW","TNT","TNT_MINECART","TORCH","TOTEM_OF_UNDYING","TRAPPED_CHEST","TRIDENT","TRIPWIRE","TRIPWIRE_HOOK","TROPICAL_FISH","TROPICAL_FISH_BUCKET","TROPICAL_FISH_SPAWN_EGG","TUBE_CORAL","TUBE_CORAL_BLOCK","TUBE_CORAL_FAN","TUBE_CORAL_WALL_FAN","TURTLE_EGG","TURTLE_HELMET","TURTLE_SPAWN_EGG","VEX_SPAWN_EGG","VILLAGER_SPAWN_EGG","VINDICATOR_SPAWN_EGG","VINE","VOID_AIR","WALL_SIGN","WALL_TORCH","WATER","WATER_BUCKET","WET_SPONGE","WHEAT","WHEAT_SEEDS","WHITE_BANNER","WHITE_BED","WHITE_CARPET","WHITE_CONCRETE","WHITE_CONCRETE_POWDER","WHITE_GLAZED_TERRACOTTA","WHITE_SHULKER_BOX","WHITE_STAINED_GLASS","WHITE_STAINED_GLASS_PANE","WHITE_TERRACOTTA","WHITE_TULIP","WHITE_WALL_BANNER","WHITE_WOOL","WITCH_SPAWN_EGG","WITHER_SKELETON_SKULL","WITHER_SKELETON_SPAWN_EGG","WITHER_SKELETON_WALL_SKULL","WOLF_SPAWN_EGG","WOODEN_AXE","WOODEN_HOE","WOODEN_PICKAXE","WOODEN_SHOVEL","WOODEN_SWORD","WRITABLE_BOOK","WRITTEN_BOOK","YELLOW_BANNER","YELLOW_BED","YELLOW_CARPET","YELLOW_CONCRETE","YELLOW_CONCRETE_POWDER","YELLOW_GLAZED_TERRACOTTA","YELLOW_SHULKER_BOX","YELLOW_STAINED_GLASS","YELLOW_STAINED_GLASS_PANE","YELLOW_TERRACOTTA","YELLOW_WALL_BANNER","YELLOW_WOOL","ZOMBIE_HEAD","ZOMBIE_HORSE_SPAWN_EGG","ZOMBIE_PIGMAN_SPAWN_EGG","ZOMBIE_SPAWN_EGG","ZOMBIE_VILLAGER_SPAWN_EGG","ZOMBIE_WALL_HEAD","LEGACY_AIR","LEGACY_STONE","LEGACY_GRASS","LEGACY_DIRT","LEGACY_COBBLESTONE","LEGACY_WOOD","LEGACY_SAPLING","LEGACY_BEDROCK","LEGACY_WATER","LEGACY_STATIONARY_WATER","LEGACY_LAVA","LEGACY_STATIONARY_LAVA","LEGACY_SAND","LEGACY_GRAVEL","LEGACY_GOLD_ORE","LEGACY_IRON_ORE","LEGACY_COAL_ORE","LEGACY_LOG","LEGACY_LEAVES","LEGACY_SPONGE","LEGACY_GLASS","LEGACY_LAPIS_ORE","LEGACY_LAPIS_BLOCK","LEGACY_DISPENSER","LEGACY_SANDSTONE","LEGACY_NOTE_BLOCK","LEGACY_BED_BLOCK","LEGACY_POWERED_RAIL","LEGACY_DETECTOR_RAIL","LEGACY_PISTON_STICKY_BASE","LEGACY_WEB","LEGACY_LONG_GRASS","LEGACY_DEAD_BUSH","LEGACY_PISTON_BASE","LEGACY_PISTON_EXTENSION","LEGACY_WOOL","LEGACY_PISTON_MOVING_PIECE","LEGACY_YELLOW_FLOWER","LEGACY_RED_ROSE","LEGACY_BROWN_MUSHROOM","LEGACY_RED_MUSHROOM","LEGACY_GOLD_BLOCK","LEGACY_IRON_BLOCK","LEGACY_DOUBLE_STEP","LEGACY_STEP","LEGACY_BRICK","LEGACY_TNT","LEGACY_BOOKSHELF","LEGACY_MOSSY_COBBLESTONE","LEGACY_OBSIDIAN","LEGACY_TORCH","LEGACY_FIRE","LEGACY_MOB_SPAWNER","LEGACY_WOOD_STAIRS","LEGACY_CHEST","LEGACY_REDSTONE_WIRE","LEGACY_DIAMOND_ORE","LEGACY_DIAMOND_BLOCK","LEGACY_WORKBENCH","LEGACY_CROPS","LEGACY_SOIL","LEGACY_FURNACE","LEGACY_BURNING_FURNACE","LEGACY_SIGN_POST","LEGACY_WOODEN_DOOR","LEGACY_LADDER","LEGACY_RAILS","LEGACY_COBBLESTONE_STAIRS","LEGACY_WALL_SIGN","LEGACY_LEVER","LEGACY_STONE_PLATE","LEGACY_IRON_DOOR_BLOCK","LEGACY_WOOD_PLATE","LEGACY_REDSTONE_ORE","LEGACY_GLOWING_REDSTONE_ORE","LEGACY_REDSTONE_TORCH_OFF","LEGACY_REDSTONE_TORCH_ON","LEGACY_STONE_BUTTON","LEGACY_SNOW","LEGACY_ICE","LEGACY_SNOW_BLOCK","LEGACY_CACTUS","LEGACY_CLAY","LEGACY_SUGAR_CANE_BLOCK","LEGACY_JUKEBOX","LEGACY_FENCE","LEGACY_PUMPKIN","LEGACY_NETHERRACK","LEGACY_SOUL_SAND","LEGACY_GLOWSTONE","LEGACY_PORTAL","LEGACY_JACK_O_LANTERN","LEGACY_CAKE_BLOCK","LEGACY_DIODE_BLOCK_OFF","LEGACY_DIODE_BLOCK_ON","LEGACY_STAINED_GLASS","LEGACY_TRAP_DOOR","LEGACY_MONSTER_EGGS","LEGACY_SMOOTH_BRICK","LEGACY_HUGE_MUSHROOM_1","LEGACY_HUGE_MUSHROOM_2","LEGACY_IRON_FENCE","LEGACY_THIN_GLASS","LEGACY_MELON_BLOCK","LEGACY_PUMPKIN_STEM","LEGACY_MELON_STEM","LEGACY_VINE","LEGACY_FENCE_GATE","LEGACY_BRICK_STAIRS","LEGACY_SMOOTH_STAIRS","LEGACY_MYCEL","LEGACY_WATER_LILY","LEGACY_NETHER_BRICK","LEGACY_NETHER_FENCE","LEGACY_NETHER_BRICK_STAIRS","LEGACY_NETHER_WARTS","LEGACY_ENCHANTMENT_TABLE","LEGACY_BREWING_STAND","LEGACY_CAULDRON","LEGACY_ENDER_PORTAL","LEGACY_ENDER_PORTAL_FRAME","LEGACY_ENDER_STONE","LEGACY_DRAGON_EGG","LEGACY_REDSTONE_LAMP_OFF","LEGACY_REDSTONE_LAMP_ON","LEGACY_WOOD_DOUBLE_STEP","LEGACY_WOOD_STEP","LEGACY_COCOA","LEGACY_SANDSTONE_STAIRS","LEGACY_EMERALD_ORE","LEGACY_ENDER_CHEST","LEGACY_TRIPWIRE_HOOK","LEGACY_TRIPWIRE","LEGACY_EMERALD_BLOCK","LEGACY_SPRUCE_WOOD_STAIRS","LEGACY_BIRCH_WOOD_STAIRS","LEGACY_JUNGLE_WOOD_STAIRS","LEGACY_COMMAND","LEGACY_BEACON","LEGACY_COBBLE_WALL","LEGACY_FLOWER_POT","LEGACY_CARROT","LEGACY_POTATO","LEGACY_WOOD_BUTTON","LEGACY_SKULL","LEGACY_ANVIL","LEGACY_TRAPPED_CHEST","LEGACY_GOLD_PLATE","LEGACY_IRON_PLATE","LEGACY_REDSTONE_COMPARATOR_OFF","LEGACY_REDSTONE_COMPARATOR_ON","LEGACY_DAYLIGHT_DETECTOR","LEGACY_REDSTONE_BLOCK","LEGACY_QUARTZ_ORE","LEGACY_HOPPER","LEGACY_QUARTZ_BLOCK","LEGACY_QUARTZ_STAIRS","LEGACY_ACTIVATOR_RAIL","LEGACY_DROPPER","LEGACY_STAINED_CLAY","LEGACY_STAINED_GLASS_PANE","LEGACY_LEAVES_2","LEGACY_LOG_2","LEGACY_ACACIA_STAIRS","LEGACY_DARK_OAK_STAIRS","LEGACY_SLIME_BLOCK","LEGACY_BARRIER","LEGACY_IRON_TRAPDOOR","LEGACY_PRISMARINE","LEGACY_SEA_LANTERN","LEGACY_HAY_BLOCK","LEGACY_CARPET","LEGACY_HARD_CLAY","LEGACY_COAL_BLOCK","LEGACY_PACKED_ICE","LEGACY_DOUBLE_PLANT","LEGACY_STANDING_BANNER","LEGACY_WALL_BANNER","LEGACY_DAYLIGHT_DETECTOR_INVERTED","LEGACY_RED_SANDSTONE","LEGACY_RED_SANDSTONE_STAIRS","LEGACY_DOUBLE_STONE_SLAB2","LEGACY_STONE_SLAB2","LEGACY_SPRUCE_FENCE_GATE","LEGACY_BIRCH_FENCE_GATE","LEGACY_JUNGLE_FENCE_GATE","LEGACY_DARK_OAK_FENCE_GATE","LEGACY_ACACIA_FENCE_GATE","LEGACY_SPRUCE_FENCE","LEGACY_BIRCH_FENCE","LEGACY_JUNGLE_FENCE","LEGACY_DARK_OAK_FENCE","LEGACY_ACACIA_FENCE","LEGACY_SPRUCE_DOOR","LEGACY_BIRCH_DOOR","LEGACY_JUNGLE_DOOR","LEGACY_ACACIA_DOOR","LEGACY_DARK_OAK_DOOR","LEGACY_END_ROD","LEGACY_CHORUS_PLANT","LEGACY_CHORUS_FLOWER","LEGACY_PURPUR_BLOCK","LEGACY_PURPUR_PILLAR","LEGACY_PURPUR_STAIRS","LEGACY_PURPUR_DOUBLE_SLAB","LEGACY_PURPUR_SLAB","LEGACY_END_BRICKS","LEGACY_BEETROOT_BLOCK","LEGACY_GRASS_PATH","LEGACY_END_GATEWAY","LEGACY_COMMAND_REPEATING","LEGACY_COMMAND_CHAIN","LEGACY_FROSTED_ICE","LEGACY_MAGMA","LEGACY_NETHER_WART_BLOCK","LEGACY_RED_NETHER_BRICK","LEGACY_BONE_BLOCK","LEGACY_STRUCTURE_VOID","LEGACY_OBSERVER","LEGACY_WHITE_SHULKER_BOX","LEGACY_ORANGE_SHULKER_BOX","LEGACY_MAGENTA_SHULKER_BOX","LEGACY_LIGHT_BLUE_SHULKER_BOX","LEGACY_YELLOW_SHULKER_BOX","LEGACY_LIME_SHULKER_BOX","LEGACY_PINK_SHULKER_BOX","LEGACY_GRAY_SHULKER_BOX","LEGACY_SILVER_SHULKER_BOX","LEGACY_CYAN_SHULKER_BOX","LEGACY_PURPLE_SHULKER_BOX","LEGACY_BLUE_SHULKER_BOX","LEGACY_BROWN_SHULKER_BOX","LEGACY_GREEN_SHULKER_BOX","LEGACY_RED_SHULKER_BOX","LEGACY_BLACK_SHULKER_BOX","LEGACY_WHITE_GLAZED_TERRACOTTA","LEGACY_ORANGE_GLAZED_TERRACOTTA","LEGACY_MAGENTA_GLAZED_TERRACOTTA","LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA","LEGACY_YELLOW_GLAZED_TERRACOTTA","LEGACY_LIME_GLAZED_TERRACOTTA","LEGACY_PINK_GLAZED_TERRACOTTA","LEGACY_GRAY_GLAZED_TERRACOTTA","LEGACY_SILVER_GLAZED_TERRACOTTA","LEGACY_CYAN_GLAZED_TERRACOTTA","LEGACY_PURPLE_GLAZED_TERRACOTTA","LEGACY_BLUE_GLAZED_TERRACOTTA","LEGACY_BROWN_GLAZED_TERRACOTTA","LEGACY_GREEN_GLAZED_TERRACOTTA","LEGACY_RED_GLAZED_TERRACOTTA","LEGACY_BLACK_GLAZED_TERRACOTTA","LEGACY_CONCRETE","LEGACY_CONCRETE_POWDER","LEGACY_STRUCTURE_BLOCK","LEGACY_IRON_SPADE","LEGACY_IRON_PICKAXE","LEGACY_IRON_AXE","LEGACY_FLINT_AND_STEEL","LEGACY_APPLE","LEGACY_BOW","LEGACY_ARROW","LEGACY_COAL","LEGACY_DIAMOND","LEGACY_IRON_INGOT","LEGACY_GOLD_INGOT","LEGACY_IRON_SWORD","LEGACY_WOOD_SWORD","LEGACY_WOOD_SPADE","LEGACY_WOOD_PICKAXE","LEGACY_WOOD_AXE","LEGACY_STONE_SWORD","LEGACY_STONE_SPADE","LEGACY_STONE_PICKAXE","LEGACY_STONE_AXE","LEGACY_DIAMOND_SWORD","LEGACY_DIAMOND_SPADE","LEGACY_DIAMOND_PICKAXE","LEGACY_DIAMOND_AXE","LEGACY_STICK","LEGACY_BOWL","LEGACY_MUSHROOM_SOUP","LEGACY_GOLD_SWORD","LEGACY_GOLD_SPADE","LEGACY_GOLD_PICKAXE","LEGACY_GOLD_AXE","LEGACY_STRING","LEGACY_FEATHER","LEGACY_SULPHUR","LEGACY_WOOD_HOE","LEGACY_STONE_HOE","LEGACY_IRON_HOE","LEGACY_DIAMOND_HOE","LEGACY_GOLD_HOE","LEGACY_SEEDS","LEGACY_WHEAT","LEGACY_BREAD","LEGACY_LEATHER_HELMET","LEGACY_LEATHER_CHESTPLATE","LEGACY_LEATHER_LEGGINGS","LEGACY_LEATHER_BOOTS","LEGACY_CHAINMAIL_HELMET","LEGACY_CHAINMAIL_CHESTPLATE","LEGACY_CHAINMAIL_LEGGINGS","LEGACY_CHAINMAIL_BOOTS","LEGACY_IRON_HELMET","LEGACY_IRON_CHESTPLATE","LEGACY_IRON_LEGGINGS","LEGACY_IRON_BOOTS","LEGACY_DIAMOND_HELMET","LEGACY_DIAMOND_CHESTPLATE","LEGACY_DIAMOND_LEGGINGS","LEGACY_DIAMOND_BOOTS","LEGACY_GOLD_HELMET","LEGACY_GOLD_CHESTPLATE","LEGACY_GOLD_LEGGINGS","LEGACY_GOLD_BOOTS","LEGACY_FLINT","LEGACY_PORK","LEGACY_GRILLED_PORK","LEGACY_PAINTING","LEGACY_GOLDEN_APPLE","LEGACY_SIGN","LEGACY_WOOD_DOOR","LEGACY_BUCKET","LEGACY_WATER_BUCKET","LEGACY_LAVA_BUCKET","LEGACY_MINECART","LEGACY_SADDLE","LEGACY_IRON_DOOR","LEGACY_REDSTONE","LEGACY_SNOW_BALL","LEGACY_BOAT","LEGACY_LEATHER","LEGACY_MILK_BUCKET","LEGACY_CLAY_BRICK","LEGACY_CLAY_BALL","LEGACY_SUGAR_CANE","LEGACY_PAPER","LEGACY_BOOK","LEGACY_SLIME_BALL","LEGACY_STORAGE_MINECART","LEGACY_POWERED_MINECART","LEGACY_EGG","LEGACY_COMPASS","LEGACY_FISHING_ROD","LEGACY_WATCH","LEGACY_GLOWSTONE_DUST","LEGACY_RAW_FISH","LEGACY_COOKED_FISH","LEGACY_INK_SACK","LEGACY_BONE","LEGACY_SUGAR","LEGACY_CAKE","LEGACY_BED","LEGACY_DIODE","LEGACY_COOKIE","LEGACY_MAP","LEGACY_SHEARS","LEGACY_MELON","LEGACY_PUMPKIN_SEEDS","LEGACY_MELON_SEEDS","LEGACY_RAW_BEEF","LEGACY_COOKED_BEEF","LEGACY_RAW_CHICKEN","LEGACY_COOKED_CHICKEN","LEGACY_ROTTEN_FLESH","LEGACY_ENDER_PEARL","LEGACY_BLAZE_ROD","LEGACY_GHAST_TEAR","LEGACY_GOLD_NUGGET","LEGACY_NETHER_STALK","LEGACY_POTION","LEGACY_GLASS_BOTTLE","LEGACY_SPIDER_EYE","LEGACY_FERMENTED_SPIDER_EYE","LEGACY_BLAZE_POWDER","LEGACY_MAGMA_CREAM","LEGACY_BREWING_STAND_ITEM","LEGACY_CAULDRON_ITEM","LEGACY_EYE_OF_ENDER","LEGACY_SPECKLED_MELON","LEGACY_MONSTER_EGG","LEGACY_EXP_BOTTLE","LEGACY_FIREBALL","LEGACY_BOOK_AND_QUILL","LEGACY_WRITTEN_BOOK","LEGACY_EMERALD","LEGACY_ITEM_FRAME","LEGACY_FLOWER_POT_ITEM","LEGACY_CARROT_ITEM","LEGACY_POTATO_ITEM","LEGACY_BAKED_POTATO","LEGACY_POISONOUS_POTATO","LEGACY_EMPTY_MAP","LEGACY_GOLDEN_CARROT","LEGACY_SKULL_ITEM","LEGACY_CARROT_STICK","LEGACY_NETHER_STAR","LEGACY_PUMPKIN_PIE","LEGACY_FIREWORK","LEGACY_FIREWORK_CHARGE","LEGACY_ENCHANTED_BOOK","LEGACY_REDSTONE_COMPARATOR","LEGACY_NETHER_BRICK_ITEM","LEGACY_QUARTZ","LEGACY_EXPLOSIVE_MINECART","LEGACY_HOPPER_MINECART","LEGACY_PRISMARINE_SHARD","LEGACY_PRISMARINE_CRYSTALS","LEGACY_RABBIT","LEGACY_COOKED_RABBIT","LEGACY_RABBIT_STEW","LEGACY_RABBIT_FOOT","LEGACY_RABBIT_HIDE","LEGACY_ARMOR_STAND","LEGACY_IRON_BARDING","LEGACY_GOLD_BARDING","LEGACY_DIAMOND_BARDING","LEGACY_LEASH","LEGACY_NAME_TAG","LEGACY_COMMAND_MINECART","LEGACY_MUTTON","LEGACY_COOKED_MUTTON","LEGACY_BANNER","LEGACY_END_CRYSTAL","LEGACY_SPRUCE_DOOR_ITEM","LEGACY_BIRCH_DOOR_ITEM","LEGACY_JUNGLE_DOOR_ITEM","LEGACY_ACACIA_DOOR_ITEM","LEGACY_DARK_OAK_DOOR_ITEM","LEGACY_CHORUS_FRUIT","LEGACY_CHORUS_FRUIT_POPPED","LEGACY_BEETROOT","LEGACY_BEETROOT_SEEDS","LEGACY_BEETROOT_SOUP","LEGACY_DRAGONS_BREATH","LEGACY_SPLASH_POTION","LEGACY_SPECTRAL_ARROW","LEGACY_TIPPED_ARROW","LEGACY_LINGERING_POTION","LEGACY_SHIELD","LEGACY_ELYTRA","LEGACY_BOAT_SPRUCE","LEGACY_BOAT_BIRCH","LEGACY_BOAT_JUNGLE","LEGACY_BOAT_ACACIA","LEGACY_BOAT_DARK_OAK","LEGACY_TOTEM","LEGACY_SHULKER_SHELL","LEGACY_IRON_NUGGET","LEGACY_KNOWLEDGE_BOOK","LEGACY_GOLD_RECORD","LEGACY_GREEN_RECORD","LEGACY_RECORD_3","LEGACY_RECORD_4","LEGACY_RECORD_5","LEGACY_RECORD_6","LEGACY_RECORD_7","LEGACY_RECORD_8","LEGACY_RECORD_9","LEGACY_RECORD_10","LEGACY_RECORD_11","LEGACY_RECORD_12"]},{"name":"org.bukkit.Location","interfaces":["java.lang.Cloneable","org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Represents a 3-dimensional position in a world.\n <br>\n No constraints are placed on any angular values other than that they be\n specified in degrees. This means that negative angles or angles of greater\n magnitude than 360 are valid, but may be normalized to any other equivalent\n representation by the implementation.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Location","comment_text":"Constructs a new Location with the given coordinates","parameters":[{"name":"world","comment_text":"The world in which this location resides","type":"org.bukkit.World","type_dimension":""},{"name":"x","comment_text":"The x-coordinate of this new location","type":"double","type_dimension":""},{"name":"y","comment_text":"The y-coordinate of this new location","type":"double","type_dimension":""},{"name":"z","comment_text":"The z-coordinate of this new location","type":"double","type_dimension":""}],"throws":[]},{"name":"Location","comment_text":"Constructs a new Location with the given coordinates and direction","parameters":[{"name":"world","comment_text":"The world in which this location resides","type":"org.bukkit.World","type_dimension":""},{"name":"x","comment_text":"The x-coordinate of this new location","type":"double","type_dimension":""},{"name":"y","comment_text":"The y-coordinate of this new location","type":"double","type_dimension":""},{"name":"z","comment_text":"The z-coordinate of this new location","type":"double","type_dimension":""},{"name":"yaw","comment_text":"The absolute rotation on the x-plane, in degrees","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The absolute rotation on the y-plane, in degrees","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setWorld","comment_text":"Sets the world that this location resides in","return_type":"void","return_type_dimension":"","parameters":[{"name":"world","comment_text":"New world that this location resides in","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Gets the world that this location resides in","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChunk","comment_text":"Gets the chunk at the represented location","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlock","comment_text":"Gets the block at the represented location","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setX","comment_text":"Sets the x-coordinate of this location","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getX","comment_text":"Gets the x-coordinate of this location","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockX","comment_text":"Gets the floored value of the X component, indicating the block that\n this location is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setY","comment_text":"Sets the y-coordinate of this location","return_type":"void","return_type_dimension":"","parameters":[{"name":"y","comment_text":"y-coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getY","comment_text":"Gets the y-coordinate of this location","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockY","comment_text":"Gets the floored value of the Y component, indicating the block that\n this location is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setZ","comment_text":"Sets the z-coordinate of this location","return_type":"void","return_type_dimension":"","parameters":[{"name":"z","comment_text":"z-coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getZ","comment_text":"Gets the z-coordinate of this location","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockZ","comment_text":"Gets the floored value of the Z component, indicating the block that\n this location is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setYaw","comment_text":"Sets the yaw of this location, measured in degrees.\n <ul>\n <li>A yaw of 0 or 360 represents the positive z direction.\n <li>A yaw of 180 represents the negative z direction.\n <li>A yaw of 90 represents the negative x direction.\n <li>A yaw of 270 represents the positive x direction.\n </ul>\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"yaw","comment_text":"new rotation's yaw","type":"float","type_dimension":""}],"throws":[]},{"name":"getYaw","comment_text":"Gets the yaw of this location, measured in degrees.\n <ul>\n <li>A yaw of 0 or 360 represents the positive z direction.\n <li>A yaw of 180 represents the negative z direction.\n <li>A yaw of 90 represents the negative x direction.\n <li>A yaw of 270 represents the positive x direction.\n </ul>\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPitch","comment_text":"Sets the pitch of this location, measured in degrees.\n <ul>\n <li>A pitch of 0 represents level forward facing.\n <li>A pitch of 90 represents downward facing, or negative y\n     direction.\n <li>A pitch of -90 represents upward facing, or positive y direction.\n </ul>\n Increasing pitch values the equivalent of looking down.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pitch","comment_text":"new incline's pitch","type":"float","type_dimension":""}],"throws":[]},{"name":"getPitch","comment_text":"Gets the pitch of this location, measured in degrees.\n <ul>\n <li>A pitch of 0 represents level forward facing.\n <li>A pitch of 90 represents downward facing, or negative y\n     direction.\n <li>A pitch of -90 represents upward facing, or positive y direction.\n </ul>\n Increasing pitch values the equivalent of looking down.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDirection","comment_text":"Gets a unit-vector pointing in the direction that this Location is\n facing.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDirection","comment_text":"Sets the {@link #getYaw() yaw} and {@link #getPitch() pitch} to point\n in the direction of the vector.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"vector","comment_text":"the direction vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"add","comment_text":"Adds the location by another.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"add","comment_text":"Adds the location by a vector.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"Vector to use","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"add","comment_text":"Adds the location by another. Not world-aware.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"subtract","comment_text":"Subtracts the location by another.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"subtract","comment_text":"Subtracts the location by a vector.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The vector to use","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"subtract","comment_text":"Subtracts the location by another. Not world-aware and\n orientation independent.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"length","comment_text":"Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the location's\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long. Not\n world-aware and orientation independent.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"lengthSquared","comment_text":"Gets the magnitude of the location squared. Not world-aware and\n orientation independent.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"distance","comment_text":"Get the distance between this location and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the location's magnitude. NaN will\n be returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.","return_type":"double","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"distanceSquared","comment_text":"Get the squared distance between this location and another.","return_type":"double","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"multiply","comment_text":"Performs scalar multiplication, multiplying all components with a\n scalar. Not world-aware.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"m","comment_text":"The factor","type":"double","type_dimension":""}],"throws":[]},{"name":"zero","comment_text":"Zero this location's components. Not world-aware.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toVector","comment_text":"Constructs a new {@link Vector} based on this Location","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"checkFinite","comment_text":"Check if each component of this Location is finite.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any component is not finite"}]},{"name":"locToBlock","comment_text":"Safely converts a double (location coordinate) to an int (block\n coordinate)","return_type":"int","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"Precise coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"Required method for deserialization","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"args","comment_text":"map to deserialize","type":"java.util.Map","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Keyed","interfaces":[],"superclass":"","comment_text":"Represents an object which has a {@link NamespacedKey} attached to it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getKey","comment_text":"Return the namespaced identifier for this object.","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Instrument","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Instrument","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Instrument","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByType","comment_text":"Get an instrument by its type ID.","return_type":"org.bukkit.Instrument","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The type ID","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["PIANO","BASS_DRUM","SNARE_DRUM","STICKS","BASS_GUITAR","FLUTE","BELL","GUITAR","CHIME","XYLOPHONE"]},{"name":"org.bukkit.GrassSpecies","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different types of grass.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.GrassSpecies","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.GrassSpecies","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this species","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the GrassSpecies with the given data value","return_type":"org.bukkit.GrassSpecies","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["DEAD","NORMAL","FERN_LIKE"]},{"name":"org.bukkit.GameRule","interfaces":[],"superclass":"java.lang.Object","comment_text":"GameRules dictate certain behavior within Minecraft itself\n <br>\n For more information please visit the\n <a href=\"https://minecraft.gamepedia.com/Commands/gamerule\">Minecraft\n Wiki</a>","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"ANNOUNCE_ADVANCEMENTS","comment_text":"Toggles the announcing of advancements.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"COMMAND_BLOCK_OUTPUT","comment_text":"Whether command blocks should notify admins when they perform commands.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DISABLE_ELYTRA_MOVEMENT_CHECK","comment_text":"Whether the server should skip checking player speed when the player is\n wearing elytra.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_DAYLIGHT_CYCLE","comment_text":"Whether time progresses from the current moment.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_ENTITY_DROPS","comment_text":"Whether entities that are not mobs should have drops.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_FIRE_TICK","comment_text":"Whether fire should spread and naturally extinguish.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_LIMITED_CRAFTING","comment_text":"Whether players should only be able to craft recipes they've unlocked\n first.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_MOB_LOOT","comment_text":"Whether mobs should drop items.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_MOB_SPAWNING","comment_text":"Whether mobs should naturally spawn.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_TILE_DROPS","comment_text":"Whether blocks should have drops.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"DO_WEATHER_CYCLE","comment_text":"Whether the weather will change from the current moment.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"KEEP_INVENTORY","comment_text":"Whether the player should keep items in their inventory after death.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"LOG_ADMIN_COMMANDS","comment_text":"Whether to log admin commands to server log.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"MOB_GRIEFING","comment_text":"Whether mobs can pick up items or change blocks.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"NATURAL_REGENERATION","comment_text":"Whether players can regenerate health naturally through their hunger bar.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"REDUCED_DEBUG_INFO","comment_text":"Whether the debug screen shows all or reduced information.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"SEND_COMMAND_FEEDBACK","comment_text":"Whether the feedback from commands executed by a player should show up in\n chat. Also affects the default behavior of whether command blocks store\n their output text.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"SHOW_DEATH_MESSAGES","comment_text":"Whether a message appears in chat when a player dies.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"SPECTATORS_GENERATE_CHUNKS","comment_text":"Whether players in spectator mode can generate chunks.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"RANDOM_TICK_SPEED","comment_text":"How often a random block tick occurs (such as plant growth, leaf decay,\n etc.) per chunk section per game tick. 0 will disable random ticks,\n higher numbers will increase random ticks.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"SPAWN_RADIUS","comment_text":"The number of blocks outward from the world spawn coordinates that a\n player will spawn in when first joining a server or when dying without a\n spawnpoint.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"MAX_ENTITY_CRAMMING","comment_text":"The maximum number of other pushable entities a mob or player can push,\n before taking suffocation damage.\n <br>\n Setting to 0 disables this rule.","type":"org.bukkit.GameRule","type_dimension":""},{"name":"MAX_COMMAND_CHAIN_LENGTH","comment_text":"Determines the number at which the chain of command blocks act as a\n \"chain.\"\n <br>\n This is the maximum amount of command blocks that can be activated in a\n single tick from a single chain.","type":"org.bukkit.GameRule","type_dimension":""}],"methods":[{"name":"getName","comment_text":"Get the name of this GameRule.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Get the type of this rule.","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByName","comment_text":"Get a {@link GameRule} by its name.","return_type":"org.bukkit.GameRule","return_type_dimension":"","parameters":[{"name":"rule","comment_text":"the name of the GameRule","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"values","comment_text":"Get an immutable collection of {@link GameRule}s.","return_type":"org.bukkit.GameRule","return_type_dimension":"[]","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.GameMode","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the various type of game modes that {@link HumanEntity}s may\n have","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.GameMode","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"Gets the mode value associated with this GameMode","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByValue","comment_text":"Gets the GameMode represented by the specified value","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Value to check","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["CREATIVE","SURVIVAL","ADVENTURE","SPECTATOR"]},{"name":"org.bukkit.FireworkEffect","interfaces":["org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Represents a single firework effect.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"builder","comment_text":"Construct a firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasFlicker","comment_text":"Get whether the firework effect flickers.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasTrail","comment_text":"Get whether the firework effect has a trail.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColors","comment_text":"Get the primary colors of the firework effect.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFadeColors","comment_text":"Get the fade colors of the firework effect.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Get the type of the firework effect.","return_type":"org.bukkit.FireworkEffect.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"map","comment_text":"the map to deserialize","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.FireworkEffect.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The type or shape of the effect.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.FireworkEffect.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.FireworkEffect.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BALL","BALL_LARGE","STAR","BURST","CREEPER"]},{"name":"org.bukkit.FireworkEffect.Builder","interfaces":[],"superclass":"java.lang.Object","comment_text":"This is a builder for FireworkEffects.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.FireworkEffect"],"constructors":[],"fields":[],"methods":[{"name":"with","comment_text":"Specify the type of the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The effect type","type":"org.bukkit.FireworkEffect.Type","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If type is null"}]},{"name":"withFlicker","comment_text":"Add a flicker to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"flicker","comment_text":"Set whether the firework effect should flicker.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"flicker","comment_text":"true if it should flicker, false if not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"withTrail","comment_text":"Add a trail to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"trail","comment_text":"Set whether the firework effect should have a trail.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"trail","comment_text":"true if it should have a trail, false for no trail","type":"boolean","type_dimension":""}],"throws":[]},{"name":"withColor","comment_text":"Add a primary color to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"color","comment_text":"The color to add","type":"org.bukkit.Color","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If color is null"}]},{"name":"withColor","comment_text":"Add several primary colors to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"The colors to add","type":"org.bukkit.Color","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If colors is null"}]},{"name":"withColor","comment_text":"Add several primary colors to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"An iterable object whose iterator yields the desired\n     colors","type":"java.lang.Iterable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If colors is null"}]},{"name":"withFade","comment_text":"Add a fade color to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"color","comment_text":"The color to add","type":"org.bukkit.Color","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If colors is null"}]},{"name":"withFade","comment_text":"Add several fade colors to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"The colors to add","type":"org.bukkit.Color","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If colors is null"}]},{"name":"withFade","comment_text":"Add several fade colors to the firework effect.","return_type":"org.bukkit.FireworkEffect.Builder","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"An iterable object whose iterator yields the desired\n     colors","type":"java.lang.Iterable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If colors is null"}]},{"name":"build","comment_text":"Create a {@link FireworkEffect} from the current contents of this\n builder.\n <p>\n To successfully build, you must have specified at least one color.","return_type":"org.bukkit.FireworkEffect","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.EntityEffect","interfaces":[],"superclass":"java.lang.Enum","comment_text":"A list of all Effects that can happen to entities.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.EntityEffect","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.EntityEffect","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the data value of this EntityEffect","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getApplicable","comment_text":"Gets entity superclass which this affect is applicable to.","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the EntityEffect with the given data value","return_type":"org.bukkit.EntityEffect","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["ARROW_PARTICLES","RABBIT_JUMP","HURT","DEATH","WOLF_SMOKE","WOLF_HEARTS","WOLF_SHAKE","SHEEP_EAT","IRON_GOLEM_ROSE","VILLAGER_HEART","VILLAGER_ANGRY","VILLAGER_HAPPY","WITCH_MAGIC","ZOMBIE_TRANSFORM","FIREWORK_EXPLODE","LOVE_HEARTS","SQUID_ROTATE","ENTITY_POOF","GUARDIAN_TARGET","SHIELD_BLOCK","SHIELD_BREAK","ARMOR_STAND_HIT","THORNS_HURT","IRON_GOLEM_SHEATH","TOTEM_RESURRECT","HURT_DROWN","HURT_EXPLOSION"]},{"name":"org.bukkit.Effect","interfaces":[],"superclass":"java.lang.Enum","comment_text":"A list of effects that the server is able to send to players.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Effect","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Effect","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"Gets the ID for this effect.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"","return_type":"org.bukkit.Effect.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getData","comment_text":"","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getById","comment_text":"Gets the Effect associated with the given ID.","return_type":"org.bukkit.Effect","return_type_dimension":"","parameters":[{"name":"id","comment_text":"ID of the Effect to return","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["CLICK2","CLICK1","BOW_FIRE","DOOR_TOGGLE","IRON_DOOR_TOGGLE","TRAPDOOR_TOGGLE","IRON_TRAPDOOR_TOGGLE","FENCE_GATE_TOGGLE","DOOR_CLOSE","IRON_DOOR_CLOSE","TRAPDOOR_CLOSE","IRON_TRAPDOOR_CLOSE","FENCE_GATE_CLOSE","EXTINGUISH","RECORD_PLAY","GHAST_SHRIEK","GHAST_SHOOT","BLAZE_SHOOT","ZOMBIE_CHEW_WOODEN_DOOR","ZOMBIE_CHEW_IRON_DOOR","ZOMBIE_DESTROY_DOOR","SMOKE","STEP_SOUND","POTION_BREAK","ENDER_SIGNAL","MOBSPAWNER_FLAMES","BREWING_STAND_BREW","CHORUS_FLOWER_GROW","CHORUS_FLOWER_DEATH","PORTAL_TRAVEL","ENDEREYE_LAUNCH","FIREWORK_SHOOT","VILLAGER_PLANT_GROW","DRAGON_BREATH","ANVIL_BREAK","ANVIL_USE","ANVIL_LAND","ENDERDRAGON_SHOOT","WITHER_BREAK_BLOCK","WITHER_SHOOT","ZOMBIE_INFECT","ZOMBIE_CONVERTED_VILLAGER","BAT_TAKEOFF","END_GATEWAY_SPAWN","ENDERDRAGON_GROWL"]},{"name":"org.bukkit.Effect.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the type of an effect.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Effect.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Effect.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SOUND","VISUAL"]},{"name":"org.bukkit.DyeColor","interfaces":[],"superclass":"java.lang.Enum","comment_text":"All supported color values for dyes and cloth","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.DyeColor","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getWoolData","comment_text":"Gets the associated wool data value representing this color.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDyeData","comment_text":"Gets the associated dye data value representing this color.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the color that this dye represents.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFireworkColor","comment_text":"Gets the firework color that this dye represents.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByWoolData","comment_text":"Gets the DyeColor with the given wool data value.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Wool data value to fetch","type":"byte","type_dimension":""}],"throws":[]},{"name":"getByDyeData","comment_text":"Gets the DyeColor with the given dye data value.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Dye data value to fetch","type":"byte","type_dimension":""}],"throws":[]},{"name":"getByColor","comment_text":"Gets the DyeColor with the given color value.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"color","comment_text":"Color value to get the dye by","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"getByFireworkColor","comment_text":"Gets the DyeColor with the given firework color value.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"color","comment_text":"Color value to get dye by","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"legacyValueOf","comment_text":"Gets the DyeColor for the given name, possibly doing legacy transformations.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[{"name":"name","comment_text":"dye name","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["WHITE","ORANGE","MAGENTA","LIGHT_BLUE","YELLOW","LIME","PINK","GRAY","LIGHT_GRAY","CYAN","PURPLE","BLUE","BROWN","GREEN","RED","BLACK"]},{"name":"org.bukkit.Difficulty","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the various difficulty levels that are available.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Difficulty","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Difficulty","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"Gets the difficulty value associated with this Difficulty.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByValue","comment_text":"Gets the Difficulty represented by the specified value","return_type":"org.bukkit.Difficulty","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Value to check","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["PEACEFUL","EASY","NORMAL","HARD"]},{"name":"org.bukkit.CropState","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different growth states of crops","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.CropState","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.CropState","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this growth state","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the CropState with the given data value","return_type":"org.bukkit.CropState","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["SEEDED","GERMINATED","VERY_SMALL","SMALL","MEDIUM","TALL","VERY_TALL","RIPE"]},{"name":"org.bukkit.Color","interfaces":["org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"A container for a color palette. This class is immutable; the set methods\n return a new color. The color names listed as fields are HTML4 standards,\n but subject to change.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"WHITE","comment_text":"White, or (0xFF,0xFF,0xFF) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"SILVER","comment_text":"Silver, or (0xC0,0xC0,0xC0) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"GRAY","comment_text":"Gray, or (0x80,0x80,0x80) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"BLACK","comment_text":"Black, or (0x00,0x00,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"RED","comment_text":"Red, or (0xFF,0x00,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"MAROON","comment_text":"Maroon, or (0x80,0x00,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"YELLOW","comment_text":"Yellow, or (0xFF,0xFF,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"OLIVE","comment_text":"Olive, or (0x80,0x80,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"LIME","comment_text":"Lime, or (0x00,0xFF,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"GREEN","comment_text":"Green, or (0x00,0x80,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"AQUA","comment_text":"Aqua, or (0x00,0xFF,0xFF) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"TEAL","comment_text":"Teal, or (0x00,0x80,0x80) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"BLUE","comment_text":"Blue, or (0x00,0x00,0xFF) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"NAVY","comment_text":"Navy, or (0x00,0x00,0x80) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"FUCHSIA","comment_text":"Fuchsia, or (0xFF,0x00,0xFF) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"PURPLE","comment_text":"Purple, or (0x80,0x00,0x80) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""},{"name":"ORANGE","comment_text":"Orange, or (0xFF,0xA5,0x00) in (R,G,B)","type":"org.bukkit.Color","type_dimension":""}],"methods":[{"name":"fromRGB","comment_text":"Creates a new Color object from a red, green, and blue","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"red","comment_text":"integer from 0-255","type":"int","type_dimension":""},{"name":"green","comment_text":"integer from 0-255","type":"int","type_dimension":""},{"name":"blue","comment_text":"integer from 0-255","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any value is strictly {@literal >255 or <0}"}]},{"name":"fromBGR","comment_text":"Creates a new Color object from a blue, green, and red","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"blue","comment_text":"integer from 0-255","type":"int","type_dimension":""},{"name":"green","comment_text":"integer from 0-255","type":"int","type_dimension":""},{"name":"red","comment_text":"integer from 0-255","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any value is strictly {@literal >255 or <0}"}]},{"name":"fromRGB","comment_text":"Creates a new color object from an integer that contains the red,\n green, and blue bytes in the lowest order 24 bits.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"rgb","comment_text":"the integer storing the red, green, and blue values","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any data is in the highest order 8\n     bits"}]},{"name":"fromBGR","comment_text":"Creates a new color object from an integer that contains the blue,\n green, and red bytes in the lowest order 24 bits.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"bgr","comment_text":"the integer storing the blue, green, and red values","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any data is in the highest order 8\n     bits"}]},{"name":"getRed","comment_text":"Gets the red component","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRed","comment_text":"Creates a new Color object with specified component","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"red","comment_text":"the red component, from 0 to 255","type":"int","type_dimension":""}],"throws":[]},{"name":"getGreen","comment_text":"Gets the green component","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGreen","comment_text":"Creates a new Color object with specified component","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"green","comment_text":"the red component, from 0 to 255","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlue","comment_text":"Gets the blue component","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBlue","comment_text":"Creates a new Color object with specified component","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"blue","comment_text":"the red component, from 0 to 255","type":"int","type_dimension":""}],"throws":[]},{"name":"asRGB","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asBGR","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"mixDyes","comment_text":"Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"The DyeColors to dye with","type":"org.bukkit.DyeColor","type_dimension":"[]"}],"throws":[]},{"name":"mixColors","comment_text":"Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"colors","comment_text":"The colors to dye with","type":"org.bukkit.Color","type_dimension":"[]"}],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"o","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"map","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.CoalType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the two types of coal","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.CoalType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.CoalType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this type of coal","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the type of coal with the given data value","return_type":"org.bukkit.CoalType","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["COAL","CHARCOAL"]},{"name":"org.bukkit.ChunkSnapshot","interfaces":[],"superclass":"","comment_text":"Represents a static, thread-safe snapshot of chunk of blocks.\n <p>\n Purpose is to allow clean, efficient copy of a chunk data to be made, and\n then handed off for processing in another thread (e.g. map rendering)","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getX","comment_text":"Gets the X-coordinate of this chunk","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Gets the Z-coordinate of this chunk","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldName","comment_text":"Gets name of the world containing this chunk","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockType","comment_text":"Get block type for block at corresponding coordinate in the chunk","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlockData","comment_text":"Get block data for block at corresponding coordinate in the chunk","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Get block data for block at corresponding coordinate in the chunk","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlockSkyLight","comment_text":"Get sky light level for block at corresponding coordinate in the chunk","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlockEmittedLight","comment_text":"Get light level emitted by block at corresponding coordinate in the\n chunk","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getHighestBlockYAt","comment_text":"Gets the highest non-air coordinate at the given coordinates","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate of the blocks (0-15)","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the blocks (0-15)","type":"int","type_dimension":""}],"throws":[]},{"name":"getBiome","comment_text":"Get biome at given coordinates","return_type":"org.bukkit.block.Biome","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate (0-15)","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate (0-15)","type":"int","type_dimension":""}],"throws":[]},{"name":"getRawBiomeTemperature","comment_text":"Get raw biome temperature (0.0-1.0) at given coordinate","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate (0-15)","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate (0-15)","type":"int","type_dimension":""}],"throws":[]},{"name":"getCaptureFullTime","comment_text":"Get world full time when chunk snapshot was captured","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSectionEmpty","comment_text":"Test if section is empty","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sy","comment_text":"- section Y coordinate (block Y / 16, 0-255)","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Chunk","interfaces":[],"superclass":"","comment_text":"Represents a chunk of blocks","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getX","comment_text":"Gets the X-coordinate of this chunk","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Gets the Z-coordinate of this chunk","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorld","comment_text":"Gets the world containing this chunk","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlock","comment_text":"Gets a block from this chunk","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"x","comment_text":"0-15","type":"int","type_dimension":""},{"name":"y","comment_text":"0-255","type":"int","type_dimension":""},{"name":"z","comment_text":"0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"getChunkSnapshot","comment_text":"Capture thread-safe read-only snapshot of chunk data","return_type":"org.bukkit.ChunkSnapshot","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChunkSnapshot","comment_text":"Capture thread-safe read-only snapshot of chunk data","return_type":"org.bukkit.ChunkSnapshot","return_type_dimension":"","parameters":[{"name":"includeMaxblocky","comment_text":"- if true, snapshot includes per-coordinate\n     maximum Y values","type":"boolean","type_dimension":""},{"name":"includeBiome","comment_text":"- if true, snapshot includes per-coordinate biome\n     type","type":"boolean","type_dimension":""},{"name":"includeBiomeTempRain","comment_text":"- if true, snapshot includes per-coordinate\n     raw biome temperature and rainfall","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntities","comment_text":"Get a list of all entities in the chunk.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getTileEntities","comment_text":"Get a list of all tile entities in the chunk.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"isLoaded","comment_text":"Checks if the chunk is loaded.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"load","comment_text":"Loads the chunk.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"generate","comment_text":"Whether or not to generate a chunk if it doesn't\n     already exist","type":"boolean","type_dimension":""}],"throws":[]},{"name":"load","comment_text":"Loads the chunk.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"unload","comment_text":"Unloads and optionally saves the Chunk","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"save","comment_text":"Controls whether the chunk is saved","type":"boolean","type_dimension":""},{"name":"safe","comment_text":"Controls whether to unload the chunk when players are\n     nearby","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unload","comment_text":"Unloads and optionally saves the Chunk","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"save","comment_text":"Controls whether the chunk is saved","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unload","comment_text":"Unloads and optionally saves the Chunk","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSlimeChunk","comment_text":"Checks if this chunk can spawn slimes without being a swamp biome.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.ChatColor","interfaces":[],"superclass":"java.lang.Enum","comment_text":"All supported color values for chat","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[{"name":"COLOR_CHAR","comment_text":"The special character which prefixes all chat colour codes. Use this if\n you need to dynamically convert colour codes from your custom format.","type":"char","type_dimension":""}],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.ChatColor","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.ChatColor","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getChar","comment_text":"Gets the char value associated with this color","return_type":"char","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isFormat","comment_text":"Checks if this code is a format code as opposed to a color code.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isColor","comment_text":"Checks if this code is a color code as opposed to a format code.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByChar","comment_text":"Gets the color represented by the specified color code","return_type":"org.bukkit.ChatColor","return_type_dimension":"","parameters":[{"name":"code","comment_text":"Code to check","type":"char","type_dimension":""}],"throws":[]},{"name":"getByChar","comment_text":"Gets the color represented by the specified color code","return_type":"org.bukkit.ChatColor","return_type_dimension":"","parameters":[{"name":"code","comment_text":"Code to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"stripColor","comment_text":"Strips the given message of all color codes","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"input","comment_text":"String to strip of color","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"translateAlternateColorCodes","comment_text":"Translates a string using an alternate color code character into a\n string that uses the internal ChatColor.COLOR_CODE color code\n character. The alternate color code character will only be replaced if\n it is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"altColorChar","comment_text":"The alternate color code character to replace. Ex: {@literal &}","type":"char","type_dimension":""},{"name":"textToTranslate","comment_text":"Text containing the alternate color code character.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLastColors","comment_text":"Gets the ChatColors used at the end of the given input string.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"input","comment_text":"Input string to retrieve the colors from.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BLACK","DARK_BLUE","DARK_GREEN","DARK_AQUA","DARK_RED","DARK_PURPLE","GOLD","GRAY","DARK_GRAY","BLUE","GREEN","AQUA","RED","LIGHT_PURPLE","YELLOW","WHITE","MAGIC","BOLD","STRIKETHROUGH","UNDERLINE","ITALIC","RESET"]},{"name":"org.bukkit.Bukkit","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents the Bukkit core, for version and Server singleton handling","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getServer","comment_text":"Gets the current {@link Server} singleton","return_type":"org.bukkit.Server","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setServer","comment_text":"Attempts to set the {@link Server} singleton.\n <p>\n This cannot be done if the Server is already set.","return_type":"void","return_type_dimension":"","parameters":[{"name":"server","comment_text":"Server instance","type":"org.bukkit.Server","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the name of this server implementation.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getVersion","comment_text":"Gets the version string of this server implementation.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBukkitVersion","comment_text":"Gets the Bukkit version that this server is running.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOnlinePlayers","comment_text":"Gets a view of all currently logged in players. This {@linkplain\n Collections#unmodifiableCollection(Collection) view} is a reused\n object, making some operations like {@link Collection#size()}\n zero-allocation.\n <p>\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like {@link\n Serializable} or {@link List}), is deprecated.\n <p>\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) {@link Entity#teleport(Location) teleportation},\n {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\n String) kicking} are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n <p>\n For safe consequential iteration or mimicking the old array behavior,\n using {@link Collection#toArray(Object[])} is recommended. For making\n snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxPlayers","comment_text":"Get the maximum amount of players which can login to this server.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPort","comment_text":"Get the game port that the server runs on.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getViewDistance","comment_text":"Get the view distance from this server.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIp","comment_text":"Get the IP that this server is bound to, or empty string if not\n specified.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerName","comment_text":"Get the name of this server.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerId","comment_text":"Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldType","comment_text":"Get world type (level-type setting) for default world.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGenerateStructures","comment_text":"Get generate-structures setting.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowEnd","comment_text":"Gets whether this server allows the End or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowNether","comment_text":"Gets whether this server allows the Nether or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasWhitelist","comment_text":"Gets whether this server has a whitelist or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWhitelist","comment_text":"Sets if the server is whitelisted.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"true for whitelist on, false for off","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getWhitelistedPlayers","comment_text":"Gets a list of whitelisted players.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"reloadWhitelist","comment_text":"Reloads the whitelist from disk.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"broadcastMessage","comment_text":"Broadcast a message to all players.\n <p>\n This is the same as calling {@link #broadcast(java.lang.String,\n java.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}","return_type":"int","return_type_dimension":"","parameters":[{"name":"message","comment_text":"the message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getUpdateFolder","comment_text":"Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n <p>\n The update folder name is relative to the plugins folder.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUpdateFolderFile","comment_text":"Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConnectionThrottle","comment_text":"Gets the value of the connection throttle setting.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksPerAnimalSpawns","comment_text":"Gets default ticks per animal spawns value.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b> If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n <p>\n Minecraft default: 400.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksPerMonsterSpawns","comment_text":"Gets the default ticks per monster spawns value.\n <p>\n <b>Example Usage:</b>\n <ul>\n <li>A value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n <li>A value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n <li>A value below 0 will be reset back to Minecraft's default.\n </ul>\n <p>\n <b>Note:</b> If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n <p>\n Minecraft default: 1.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Gets a player object by the given username.\n <p>\n This method may not return objects for offline players.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to look up","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayerExact","comment_text":"Gets the player with the exact given name, case insensitive.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Exact name of the player to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"matchPlayer","comment_text":"Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n <p>\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the (partial) name to match","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayer","comment_text":"Gets the player with the given UUID.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[{"name":"id","comment_text":"UUID of the player to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getPluginManager","comment_text":"Gets the plugin manager for interfacing with plugins.","return_type":"org.bukkit.plugin.PluginManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScheduler","comment_text":"Gets the scheduler for managing scheduled events.","return_type":"org.bukkit.scheduler.BukkitScheduler","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServicesManager","comment_text":"Gets a services manager.","return_type":"org.bukkit.plugin.ServicesManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorlds","comment_text":"Gets a list of all worlds on this server.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createWorld","comment_text":"Creates or loads a world with the given name using the specified\n options.\n <p>\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"creator","comment_text":"the options to use when creating the world","type":"org.bukkit.WorldCreator","type_dimension":""}],"throws":[]},{"name":"unloadWorld","comment_text":"Unloads a world with the given name.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the world to unload","type":"java.lang.String","type_dimension":""},{"name":"save","comment_text":"whether to save the chunks before unloading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unloadWorld","comment_text":"Unloads the given world.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world to unload","type":"org.bukkit.World","type_dimension":""},{"name":"save","comment_text":"whether to save the chunks before unloading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Gets the world with the given name.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name of the world to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Gets the world from the given Unique ID.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[{"name":"uid","comment_text":"a unique-id of the world to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getMap","comment_text":"Gets the map from the given item ID.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the id of the map to get","type":"short","type_dimension":""}],"throws":[]},{"name":"createMap","comment_text":"Create a new map with an automatically assigned ID.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world the map will belong to","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"reload","comment_text":"Reloads the server, refreshing settings and plugin information.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"reloadData","comment_text":"Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLogger","comment_text":"Returns the primary logger associated with this server instance.","return_type":"java.util.logging.Logger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPluginCommand","comment_text":"Gets a {@link PluginCommand} with the given name or alias.","return_type":"org.bukkit.command.PluginCommand","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name of the command to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"savePlayers","comment_text":"Writes loaded players to disk.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"dispatchCommand","comment_text":"Dispatches a command on this server, and executes it if found.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"the apparent sender of the command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLine","comment_text":"the command + arguments. Example: <code>test abc\n     123</code>","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.command.CommandException","comment_text":"thrown when the executor for the given command\n     fails with an unhandled exception"}]},{"name":"addRecipe","comment_text":"Adds a recipe to the crafting manager.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"recipe","comment_text":"the recipe to add","type":"org.bukkit.inventory.Recipe","type_dimension":""}],"throws":[]},{"name":"getRecipesFor","comment_text":"Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"result","comment_text":"the item to match against recipe results","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"recipeIterator","comment_text":"Get an iterator through the list of crafting recipes.","return_type":"java.util.Iterator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clearRecipes","comment_text":"Clears the list of crafting recipes.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"resetRecipes","comment_text":"Resets the list of crafting recipes to the default.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCommandAliases","comment_text":"Gets a list of command aliases defined in the server properties.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpawnRadius","comment_text":"Gets the radius, in blocks, around each worlds spawn point to protect.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnRadius","comment_text":"Sets the radius, in blocks, around each worlds spawn point to protect.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"new spawn radius, or 0 if none","type":"int","type_dimension":""}],"throws":[]},{"name":"getOnlineMode","comment_text":"Gets whether the Server is in online mode or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowFlight","comment_text":"Gets whether this server allows flying or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isHardcore","comment_text":"Gets whether the server is in hardcore mode or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"shutdown","comment_text":"Shutdowns the server, stopping everything.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"broadcast","comment_text":"Broadcasts the specified message to every user with the given\n permission name.","return_type":"int","return_type_dimension":"","parameters":[{"name":"message","comment_text":"message to broadcast","type":"java.lang.String","type_dimension":""},{"name":"permission","comment_text":"the required permission {@link Permissible\n     permissibles} must have to receive the broadcast","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the player by the given name, regardless if they are offline or\n online.\n <p>\n This method may involve a blocking web request to get the UUID for the\n given name.\n <p>\n This will return an object even if the player does not exist. To this\n method, all players will exist.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name the player to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the player by the given UUID, regardless if they are offline or\n online.\n <p>\n This will return an object even if the player does not exist. To this\n method, all players will exist.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the UUID of the player to retrieve","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getIPBans","comment_text":"Gets a set containing all current IPs that are banned.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"banIP","comment_text":"Bans the specified address from the server.","return_type":"void","return_type_dimension":"","parameters":[{"name":"address","comment_text":"the IP address to ban","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unbanIP","comment_text":"Unbans the specified address from the server.","return_type":"void","return_type_dimension":"","parameters":[{"name":"address","comment_text":"the IP address to unban","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBannedPlayers","comment_text":"Gets a set containing all banned players.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBanList","comment_text":"Gets a ban list for the supplied type.\n <p>\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.","return_type":"org.bukkit.BanList","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the type of list to fetch, cannot be null","type":"org.bukkit.BanList.Type","type_dimension":""}],"throws":[]},{"name":"getOperators","comment_text":"Gets a set containing all player operators.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefaultGameMode","comment_text":"Gets the default {@link GameMode} for new players.","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDefaultGameMode","comment_text":"Sets the default {@link GameMode} for new players.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"the new game mode","type":"org.bukkit.GameMode","type_dimension":""}],"throws":[]},{"name":"getConsoleSender","comment_text":"Gets a {@link ConsoleCommandSender} that may be used as an input source\n for this server.","return_type":"org.bukkit.command.ConsoleCommandSender","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorldContainer","comment_text":"Gets the folder that contains all of the various {@link World}s.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOfflinePlayers","comment_text":"Gets every player that has ever played on this server.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getMessenger","comment_text":"Gets the {@link Messenger} responsible for this server.","return_type":"org.bukkit.plugin.messaging.Messenger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHelpMap","comment_text":"Gets the {@link HelpMap} providing help topics for this server.","return_type":"org.bukkit.help.HelpMap","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.<br>\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n <br>\n {@link InventoryType#WORKBENCH} will not process crafting recipes if\n created with this method. Use\n {@link Player#openWorkbench(Location, boolean)} instead.\n <br>\n {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n for possible enchanting results. Use\n {@link Player#openEnchanting(Location, boolean)} instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"type","comment_text":"the type of inventory to create","type":"org.bukkit.event.inventory.InventoryType","type_dimension":""}],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.<br>\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n <br>\n {@link InventoryType#WORKBENCH} will not process crafting recipes if\n created with this method. Use\n {@link Player#openWorkbench(Location, boolean)} instead.\n <br>\n {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n for possible enchanting results. Use\n {@link Player#openEnchanting(Location, boolean)} instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"The holder of the inventory; can be null if there's no holder.","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"type","comment_text":"The type of inventory to create.","type":"org.bukkit.event.inventory.InventoryType","type_dimension":""},{"name":"title","comment_text":"The title of the inventory, to be displayed when it is viewed.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"createInventory","comment_text":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"size","comment_text":"a multiple of 9 as the size of inventory to create","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the size is not a multiple of 9"}]},{"name":"createInventory","comment_text":"Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size and title.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the holder of the inventory, or null to indicate no holder","type":"org.bukkit.inventory.InventoryHolder","type_dimension":""},{"name":"size","comment_text":"a multiple of 9 as the size of inventory to create","type":"int","type_dimension":""},{"name":"title","comment_text":"the title of the inventory, displayed when inventory is\n     viewed","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the size is not a multiple of 9"}]},{"name":"createMerchant","comment_text":"Creates an empty merchant.","return_type":"org.bukkit.inventory.Merchant","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title of the corresponding merchant inventory, displayed\n when the merchant inventory is viewed","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMonsterSpawnLimit","comment_text":"Gets user-specified limit for number of monsters that can spawn in a\n chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAnimalSpawnLimit","comment_text":"Gets user-specified limit for number of animals that can spawn in a\n chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWaterAnimalSpawnLimit","comment_text":"Gets user-specified limit for number of water animals that can spawn in\n a chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAmbientSpawnLimit","comment_text":"Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPrimaryThread","comment_text":"Checks the current thread against the expected primary thread for the\n server.\n <p>\n <b>Note:</b> this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch <b>does not\n preclude</b> the same assumption.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMotd","comment_text":"Gets the message that is displayed on the server list.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShutdownMessage","comment_text":"Gets the default message that is displayed when the server is stopped.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWarningState","comment_text":"Gets the current warning state for the server.","return_type":"org.bukkit.Warning.WarningState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemFactory","comment_text":"Gets the instance of the item factory (for {@link ItemMeta}).","return_type":"org.bukkit.inventory.ItemFactory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScoreboardManager","comment_text":"Gets the instance of the scoreboard manager.\n <p>\n This will only exist after the first world has loaded.","return_type":"org.bukkit.scoreboard.ScoreboardManager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServerIcon","comment_text":"Gets an instance of the server's default server-icon.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[],"throws":[]},{"name":"loadServerIcon","comment_text":"Loads an image from a file, and returns a cached image for the specific\n server-icon.\n <p>\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[{"name":"file","comment_text":"the file to load the from","type":"java.io.File","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if image is null"},{"name":"java.lang.Exception","comment_text":"if the image does not meet current server server-icon\n     specifications"}]},{"name":"loadServerIcon","comment_text":"Creates a cached server-icon for the specific image.\n <p>\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.","return_type":"org.bukkit.util.CachedServerIcon","return_type_dimension":"","parameters":[{"name":"image","comment_text":"the image to use","type":"java.awt.image.BufferedImage","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if image is null"},{"name":"java.lang.Exception","comment_text":"if the image does not meet current server\n     server-icon specifications"}]},{"name":"setIdleTimeout","comment_text":"Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n <p>\n A value of 0 will disable the idle kick timeout.","return_type":"void","return_type_dimension":"","parameters":[{"name":"threshold","comment_text":"the idle timeout in minutes","type":"int","type_dimension":""}],"throws":[]},{"name":"getIdleTimeout","comment_text":"Gets the idle kick timeout.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createChunkData","comment_text":"Create a ChunkData for use in a generator.\n \n See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}","return_type":"org.bukkit.generator.ChunkGenerator.ChunkData","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world to create the ChunkData for","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"createBossBar","comment_text":"Creates a boss bar instance to display to players. The progress\n defaults to 1.0","return_type":"org.bukkit.boss.BossBar","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title of the boss bar","type":"java.lang.String","type_dimension":""},{"name":"color","comment_text":"the color of the boss bar","type":"org.bukkit.boss.BarColor","type_dimension":""},{"name":"style","comment_text":"the style of the boss bar","type":"org.bukkit.boss.BarStyle","type_dimension":""},{"name":"flags","comment_text":"an optional list of flags to set on the boss bar","type":"org.bukkit.boss.BarFlag","type_dimension":"[]"}],"throws":[]},{"name":"getEntity","comment_text":"Gets an entity on the server by its UUID","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[{"name":"uuid","comment_text":"the UUID of the entity","type":"java.util.UUID","type_dimension":""}],"throws":[]},{"name":"getAdvancement","comment_text":"Get the advancement specified by this key.","return_type":"org.bukkit.advancement.Advancement","return_type_dimension":"","parameters":[{"name":"key","comment_text":"unique advancement key","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]},{"name":"advancementIterator","comment_text":"Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,","return_type":"java.util.Iterator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""},{"name":"consumer","comment_text":"consumer to run on new instance before returning","type":"java.util.function.Consumer","type_dimension":""}],"throws":[]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance with material and properties\n parsed from provided data.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"data","comment_text":"data string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified data is not valid"}]},{"name":"createBlockData","comment_text":"Creates a new {@link BlockData} instance for the specified Material, with\n all properties initialized to unspecified defaults, except for those\n provided in data.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"data string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified data is not valid"}]},{"name":"getTag","comment_text":"Gets a tag which has already been defined within the server. Plugins are\n suggested to use the concrete tags in {@link Tag} rather than this method\n which makes no guarantees about which tags are available, and may also be\n less performant due to lack of caching.\n <br>\n Tags will be searched for in an implementation specific manner, but a\n path consisting of namespace/tags/registry/key is expected.\n <br>\n Server implementations are allowed to handle only the registries\n indicated in {@link Tag}.","return_type":"org.bukkit.Tag","return_type_dimension":"","parameters":[{"name":"registry","comment_text":"the tag registry to look at","type":"java.lang.String","type_dimension":""},{"name":"tag","comment_text":"the name of the tag","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"clazz","comment_text":"the class of the tag entries","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getLootTable","comment_text":"Gets the specified {@link LootTable}.","return_type":"org.bukkit.loot.LootTable","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the name of the LootTable","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]},{"name":"getUnsafe","comment_text":"","return_type":"org.bukkit.UnsafeValues","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.BlockChangeDelegate","interfaces":[],"superclass":"","comment_text":"A delegate for handling block changes. This serves as a direct interface\n between generation algorithms in the server implementation and utilizing\n code.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setBlockData","comment_text":"Set a block data at the specified coordinates.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"int","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"int","type_dimension":""},{"name":"blockData","comment_text":"Block data","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"getBlockData","comment_text":"Get the block data at the location.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"int","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"int","type_dimension":""}],"throws":[]},{"name":"getHeight","comment_text":"Gets the height of the world.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEmpty","comment_text":"Checks if the specified block is empty (air) or not.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"int","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"int","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.BanList","interfaces":[],"superclass":"","comment_text":"A ban list, containing bans of some {@link Type}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBanEntry","comment_text":"Gets a {@link BanEntry} by target.","return_type":"org.bukkit.BanEntry","return_type_dimension":"","parameters":[{"name":"target","comment_text":"entry parameter to search for","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"addBan","comment_text":"Adds a ban to the this list. If a previous ban exists, this will\n update the previous entry.","return_type":"org.bukkit.BanEntry","return_type_dimension":"","parameters":[{"name":"target","comment_text":"the target of the ban","type":"java.lang.String","type_dimension":""},{"name":"reason","comment_text":"reason for the ban, null indicates implementation default","type":"java.lang.String","type_dimension":""},{"name":"expires","comment_text":"date for the ban's expiration (unban), or null to imply\n     forever","type":"java.util.Date","type_dimension":""},{"name":"source","comment_text":"source of the ban, null indicates implementation default","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBanEntries","comment_text":"Gets a set containing every {@link BanEntry} in this list.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBanned","comment_text":"Gets if a {@link BanEntry} exists for the target, indicating an active\n ban status.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"target","comment_text":"the target to find","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"pardon","comment_text":"Removes the specified target from this list, therefore indicating a\n \"not banned\" status.","return_type":"void","return_type_dimension":"","parameters":[{"name":"target","comment_text":"the target to remove from this list","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.BanList.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents a ban-type that a {@link BanList} may track.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.BanList.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.BanList.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NAME","IP"]},{"name":"org.bukkit.BanEntry","interfaces":[],"superclass":"","comment_text":"A single entry from a ban list. This may represent either a player ban or\n an IP ban.\n <p>\n Ban entries include the following properties:\n <table border=1>\n <caption>Property information</caption>\n <tr>\n     <th>Property</th>\n     <th>Description</th>\n </tr><tr>\n     <td>Target Name / IP Address</td>\n     <td>The target name or IP address</td>\n </tr><tr>\n     <td>Creation Date</td>\n     <td>The creation date of the ban</td>\n </tr><tr>\n     <td>Source</td>\n     <td>The source of the ban, such as a player, console, plugin, etc</td>\n </tr><tr>\n     <td>Expiration Date</td>\n     <td>The expiration date of the ban</td>\n </tr><tr>\n     <td>Reason</td>\n     <td>The reason for the ban</td>\n </tr>\n </table>\n <p>\n Unsaved information is not automatically written to the implementation's\n ban list, instead, the {@link #save()} method must be called to write the\n changes to the ban list. If this ban entry has expired (such as from an\n unban) and is no longer found in the list, the {@link #save()} call will\n re-add it to the list, therefore banning the victim specified.\n <p>\n Likewise, changes to the associated {@link BanList} or other entries may or\n may not be reflected in this entry.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTarget","comment_text":"Gets the target involved. This may be in the form of an IP or a player\n name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCreated","comment_text":"Gets the date this ban entry was created.","return_type":"java.util.Date","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCreated","comment_text":"Sets the date this ban entry was created.","return_type":"void","return_type_dimension":"","parameters":[{"name":"created","comment_text":"the new created date, cannot be null","type":"java.util.Date","type_dimension":""}],"throws":[]},{"name":"getSource","comment_text":"Gets the source of this ban.\n <p>\n Note: A source is considered any String, although this is generally a\n player name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSource","comment_text":"Sets the source of this ban.\n <p>\n Note: A source is considered any String, although this is generally a\n player name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"the new source where null values become empty strings","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getExpiration","comment_text":"Gets the date this ban expires on, or null for no defined end date.","return_type":"java.util.Date","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExpiration","comment_text":"Sets the date this ban expires on. Null values are considered\n \"infinite\" bans.","return_type":"void","return_type_dimension":"","parameters":[{"name":"expiration","comment_text":"the new expiration date, or null to indicate an\n     eternity","type":"java.util.Date","type_dimension":""}],"throws":[]},{"name":"getReason","comment_text":"Gets the reason for this ban.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setReason","comment_text":"Sets the reason for this ban. Reasons must not be null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"reason","comment_text":"the new reason, null values assume the implementation\n     default","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"save","comment_text":"Saves the ban entry, overwriting any previous data in the ban list.\n <p>\n Saving the ban entry of an unbanned player will cause the player to be\n banned once again.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.Axis","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents a mutually perpendicular axis in 3D Cartesian coordinates. In\n Minecraft the x, z axes lie in the horizontal plane, whilst the y axis points\n upwards.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Axis","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Axis","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["X","Y","Z"]},{"name":"org.bukkit.Art","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the art on a painting","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Art","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Art","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBlockWidth","comment_text":"Gets the width of the painting, in blocks","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockHeight","comment_text":"Gets the height of the painting, in blocks","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getId","comment_text":"Get the ID of this painting.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getById","comment_text":"Get a painting by its numeric ID","return_type":"org.bukkit.Art","return_type_dimension":"","parameters":[{"name":"id","comment_text":"The ID","type":"int","type_dimension":""}],"throws":[]},{"name":"getByName","comment_text":"Get a painting by its unique name\n <p>\n This ignores underscores and capitalization","return_type":"org.bukkit.Art","return_type_dimension":"","parameters":[{"name":"name","comment_text":"The name","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["KEBAB","AZTEC","ALBAN","AZTEC2","BOMB","PLANT","WASTELAND","POOL","COURBET","SEA","SUNSET","CREEBET","WANDERER","GRAHAM","MATCH","BUST","STAGE","VOID","SKULL_AND_ROSES","WITHER","FIGHTERS","POINTER","PIGSCENE","BURNING_SKULL","SKELETON","DONKEY_KONG"]},{"name":"org.bukkit.Achievement","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents an achievement, which may be given to players.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.Achievement","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.Achievement","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasParent","comment_text":"Returns whether or not this achievement has a parent achievement.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getParent","comment_text":"Returns the parent achievement of this achievement, or null if none.","return_type":"org.bukkit.Achievement","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["OPEN_INVENTORY","MINE_WOOD","BUILD_WORKBENCH","BUILD_PICKAXE","BUILD_FURNACE","ACQUIRE_IRON","BUILD_HOE","MAKE_BREAD","BAKE_CAKE","BUILD_BETTER_PICKAXE","COOK_FISH","ON_A_RAIL","BUILD_SWORD","KILL_ENEMY","KILL_COW","FLY_PIG","SNIPE_SKELETON","GET_DIAMONDS","NETHER_PORTAL","GHAST_RETURN","GET_BLAZE_ROD","BREW_POTION","END_PORTAL","THE_END","ENCHANTMENTS","OVERKILL","BOOKCASE","EXPLORE_ALL_BIOMES","SPAWN_WITHER","KILL_WITHER","FULL_BEACON","BREED_COW","DIAMONDS_TO_YOU","OVERPOWERED"]},{"name":"org.bukkit.advancement.AdvancementProgress","interfaces":[],"superclass":"","comment_text":"The individual status of an advancement for a player. This class is not\n reference safe as the underlying advancement may be reloaded.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAdvancement","comment_text":"The advancement this progress is concerning.","return_type":"org.bukkit.advancement.Advancement","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isDone","comment_text":"Check if all criteria for this advancement have been met.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"awardCriteria","comment_text":"Mark the specified criteria as awarded at the current time.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"criteria","comment_text":"the criteria to mark","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"revokeCriteria","comment_text":"Mark the specified criteria as uncompleted.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"criteria","comment_text":"the criteria to mark","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDateAwarded","comment_text":"Get the date the specified criteria was awarded.","return_type":"java.util.Date","return_type_dimension":"","parameters":[{"name":"criteria","comment_text":"the criteria to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getRemainingCriteria","comment_text":"Get the criteria which have not been awarded.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAwardedCriteria","comment_text":"Gets the criteria which have been awarded.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.advancement.Advancement","interfaces":["org.bukkit.Keyed"],"superclass":"","comment_text":"Represents an advancement that may be awarded to a player. This class is not\n reference safe as the underlying advancement may be reloaded.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCriteria","comment_text":"Get all the criteria present in this advancement.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.attribute.AttributeModifier","interfaces":["org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Concrete implementation of an attribute modifier.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"AttributeModifier","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"amount","comment_text":"","type":"double","type_dimension":""},{"name":"operation","comment_text":"","type":"org.bukkit.attribute.AttributeModifier.Operation","type_dimension":""}],"throws":[]},{"name":"AttributeModifier","comment_text":"","parameters":[{"name":"uuid","comment_text":"","type":"java.util.UUID","type_dimension":""},{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"amount","comment_text":"","type":"double","type_dimension":""},{"name":"operation","comment_text":"","type":"org.bukkit.attribute.AttributeModifier.Operation","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getUniqueId","comment_text":"Get the unique ID for this modifier.","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Get the name of this modifier.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAmount","comment_text":"Get the amount by which this modifier will apply its {@link Operation}.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOperation","comment_text":"Get the operation this modifier will apply.","return_type":"org.bukkit.attribute.AttributeModifier.Operation","return_type_dimension":"","parameters":[],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.attribute.AttributeModifier","return_type_dimension":"","parameters":[{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.attribute.AttributeModifier.Operation","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Enumerable operation to be applied.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.attribute.AttributeModifier.Operation","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.attribute.AttributeModifier.Operation","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ADD_NUMBER","ADD_SCALAR","MULTIPLY_SCALAR_1"]},{"name":"org.bukkit.attribute.AttributeInstance","interfaces":[],"superclass":"","comment_text":"Represents a mutable instance of an attribute and its associated modifiers\n and values.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAttribute","comment_text":"The attribute pertaining to this instance.","return_type":"org.bukkit.attribute.Attribute","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBaseValue","comment_text":"Base value of this instance before modifiers are applied.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBaseValue","comment_text":"Set the base value of this instance.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"new base value","type":"double","type_dimension":""}],"throws":[]},{"name":"getModifiers","comment_text":"Get all modifiers present on this instance.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addModifier","comment_text":"Add a modifier to this instance.","return_type":"void","return_type_dimension":"","parameters":[{"name":"modifier","comment_text":"to add","type":"org.bukkit.attribute.AttributeModifier","type_dimension":""}],"throws":[]},{"name":"removeModifier","comment_text":"Remove a modifier from this instance.","return_type":"void","return_type_dimension":"","parameters":[{"name":"modifier","comment_text":"to remove","type":"org.bukkit.attribute.AttributeModifier","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"Get the value of this instance after all associated modifiers have been\n applied.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefaultValue","comment_text":"Gets the default value of the Attribute attached to this instance.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.attribute.Attribute","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Types of attributes which may be present on an {@link Attributable}.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.attribute.Attribute","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.attribute.Attribute","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["GENERIC_MAX_HEALTH","GENERIC_FOLLOW_RANGE","GENERIC_KNOCKBACK_RESISTANCE","GENERIC_MOVEMENT_SPEED","GENERIC_FLYING_SPEED","GENERIC_ATTACK_DAMAGE","GENERIC_ATTACK_SPEED","GENERIC_ARMOR","GENERIC_ARMOR_TOUGHNESS","GENERIC_LUCK","HORSE_JUMP_STRENGTH","ZOMBIE_SPAWN_REINFORCEMENTS"]},{"name":"org.bukkit.attribute.Attributable","interfaces":[],"superclass":"","comment_text":"Represents an object which may contain attributes.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAttribute","comment_text":"Gets the specified attribute instance from the object. This instance will\n be backed directly to the object and any changes will be visible at once.","return_type":"org.bukkit.attribute.AttributeInstance","return_type_dimension":"","parameters":[{"name":"attribute","comment_text":"the attribute to get","type":"org.bukkit.attribute.Attribute","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.banner.PatternType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.banner.PatternType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.banner.PatternType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getIdentifier","comment_text":"Returns the identifier used to represent\n this pattern type","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByIdentifier","comment_text":"Returns the pattern type which matches the passed\n identifier or null if no matches are found","return_type":"org.bukkit.block.banner.PatternType","return_type_dimension":"","parameters":[{"name":"identifier","comment_text":"the identifier","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BASE","SQUARE_BOTTOM_LEFT","SQUARE_BOTTOM_RIGHT","SQUARE_TOP_LEFT","SQUARE_TOP_RIGHT","STRIPE_BOTTOM","STRIPE_TOP","STRIPE_LEFT","STRIPE_RIGHT","STRIPE_CENTER","STRIPE_MIDDLE","STRIPE_DOWNRIGHT","STRIPE_DOWNLEFT","STRIPE_SMALL","CROSS","STRAIGHT_CROSS","TRIANGLE_BOTTOM","TRIANGLE_TOP","TRIANGLES_BOTTOM","TRIANGLES_TOP","DIAGONAL_LEFT","DIAGONAL_RIGHT","DIAGONAL_LEFT_MIRROR","DIAGONAL_RIGHT_MIRROR","CIRCLE_MIDDLE","RHOMBUS_MIDDLE","HALF_VERTICAL","HALF_HORIZONTAL","HALF_VERTICAL_MIRROR","HALF_HORIZONTAL_MIRROR","BORDER","CURLY_BORDER","CREEPER","GRADIENT","GRADIENT_UP","BRICKS","SKULL","FLOWER","MOJANG"]},{"name":"org.bukkit.block.banner.Pattern","interfaces":["org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Pattern","comment_text":"Creates a new pattern from the specified color and\n pattern type","parameters":[{"name":"color","comment_text":"the pattern color","type":"org.bukkit.DyeColor","type_dimension":""},{"name":"pattern","comment_text":"the pattern type","type":"org.bukkit.block.banner.PatternType","type_dimension":""}],"throws":[]},{"name":"Pattern","comment_text":"Constructor for deserialization.","parameters":[{"name":"map","comment_text":"the map to deserialize from","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Returns the color of the pattern","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPattern","comment_text":"Returns the type of pattern","return_type":"org.bukkit.block.banner.PatternType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Structure","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a structure block that can save and load blocks from a file. They\n can only be used by OPs, and are not obtainable in survival.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getStructureName","comment_text":"The name of this structure.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStructureName","comment_text":"Set the name of this structure. This is case-sensitive. The name of the\n structure in the {@link UsageMode#SAVE} structure block MUST match the\n name within the {@link UsageMode#CORNER} block or the size calculation\n will fail.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the case-sensitive name of this structure","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getAuthor","comment_text":"Get the name of who created this structure.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAuthor","comment_text":"Set the name of whoever created this structure.","return_type":"void","return_type_dimension":"","parameters":[{"name":"author","comment_text":"whoever created this structure","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setAuthor","comment_text":"Set the name of whoever created this structure using a\n {@link LivingEntity}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"livingEntity","comment_text":"the entity who created this structure","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]},{"name":"getRelativePosition","comment_text":"The relative position of the structure outline based on the position of\n the structure block. Maximum allowed distance is 32 blocks in any\n direction.","return_type":"org.bukkit.util.BlockVector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRelativePosition","comment_text":"Set the relative position from the structure block. Maximum allowed\n distance is 32 blocks in any direction.","return_type":"void","return_type_dimension":"","parameters":[{"name":"vector","comment_text":"the {@link BlockVector} containing the relative origin\n coordinates of this structure.","type":"org.bukkit.util.BlockVector","type_dimension":""}],"throws":[]},{"name":"getStructureSize","comment_text":"The distance to the opposite corner of this structure. The maximum\n structure size is 32x32x32. When a structure has successfully been\n calculated (i.e. it is within the maximum allowed distance) a white\n border surrounds the structure.","return_type":"org.bukkit.util.BlockVector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStructureSize","comment_text":"Set the maximum size of this structure from the origin point. Maximum\n allowed size is 32x32x32.","return_type":"void","return_type_dimension":"","parameters":[{"name":"vector","comment_text":"the {@link BlockVector} containing the size of this\n structure, based off of the origin coordinates.","type":"org.bukkit.util.BlockVector","type_dimension":""}],"throws":[]},{"name":"setMirror","comment_text":"Sets the mirroring of the structure.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mirror","comment_text":"the new mirroring method","type":"org.bukkit.block.structure.Mirror","type_dimension":""}],"throws":[]},{"name":"getMirror","comment_text":"How this structure is mirrored.","return_type":"org.bukkit.block.structure.Mirror","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRotation","comment_text":"Set how this structure is rotated.","return_type":"void","return_type_dimension":"","parameters":[{"name":"rotation","comment_text":"the new rotation","type":"org.bukkit.block.structure.StructureRotation","type_dimension":""}],"throws":[]},{"name":"getRotation","comment_text":"Get how this structure is rotated.","return_type":"org.bukkit.block.structure.StructureRotation","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUsageMode","comment_text":"Set the {@link UsageMode} of this structure block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"the new mode to set.","type":"org.bukkit.block.structure.UsageMode","type_dimension":""}],"throws":[]},{"name":"getUsageMode","comment_text":"Get the {@link UsageMode} of this structure block.","return_type":"org.bukkit.block.structure.UsageMode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setIgnoreEntities","comment_text":"While in {@link UsageMode#SAVE} mode, this will ignore any entities when\n saving the structure.\n <br>\n While in {@link UsageMode#LOAD} mode this will ignore any entities that\n were saved to file.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ignoreEntities","comment_text":"the flag to set","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isIgnoreEntities","comment_text":"Get if this structure block should ignore entities.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShowAir","comment_text":"Set if the structure outline should show air blocks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"showAir","comment_text":"if the structure block should show air blocks","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isShowAir","comment_text":"Check if this structure block is currently showing all air blocks","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBoundingBoxVisible","comment_text":"Set if this structure box should show the bounding box.","return_type":"void","return_type_dimension":"","parameters":[{"name":"showBoundingBox","comment_text":"if the structure box should be shown","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isBoundingBoxVisible","comment_text":"Get if this structure block is currently showing the bounding box.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setIntegrity","comment_text":"Set the integrity of the structure. Integrity must be between 0.0 and 1.0\n Lower integrity values will result in more blocks being removed when\n loading a structure. Integrity and {@link #getSeed()} are used together\n to determine which blocks are randomly removed to mimic \"decay.\"","return_type":"void","return_type_dimension":"","parameters":[{"name":"integrity","comment_text":"the integrity of this structure","type":"float","type_dimension":""}],"throws":[]},{"name":"getIntegrity","comment_text":"Get the integrity of this structure.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSeed","comment_text":"The seed used to determine which blocks will be removed upon loading.\n {@link #getIntegrity()} and seed are used together to determine which\n blocks are randomly removed to mimic \"decay.\"","return_type":"void","return_type_dimension":"","parameters":[{"name":"seed","comment_text":"the seed used to determine how many blocks will be removed","type":"long","type_dimension":""}],"throws":[]},{"name":"getSeed","comment_text":"The seed used to determine how many blocks are removed upon loading of\n this structure.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMetadata","comment_text":"Only applicable while in {@link UsageMode#DATA}. Metadata are specific\n functions that can be applied to the structure location. Consult the\n <a href=\"https://minecraft.gamepedia.com/Structure_Block#Data\">Minecraft\n wiki</a> for more information.","return_type":"void","return_type_dimension":"","parameters":[{"name":"metadata","comment_text":"the function to perform on the selected location","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMetadata","comment_text":"Get the metadata function this structure block will perform when\n activated. Consult the\n <a href=\"https://minecraft.gamepedia.com/Structure_Block#Data\">Minecraft\n Wiki</a> for more information.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Skull","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a skull block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasOwner","comment_text":"Checks to see if the skull has an owner","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOwner","comment_text":"Gets the owner of the skull, if one exists","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwner","comment_text":"Sets the owner of the skull\n <p>\n Involves a potentially blocking web request to acquire the profile data for\n the provided name.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the new owner of the skull","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOwningPlayer","comment_text":"Get the player which owns the skull. This player may appear as the\n texture depending on skull type.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwningPlayer","comment_text":"Set the player which owns the skull. This player may appear as the\n texture depending on skull type.","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the owning player","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[]},{"name":"getRotation","comment_text":"Gets the rotation of the skull in the world","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRotation","comment_text":"Sets the rotation of the skull in the world","return_type":"void","return_type_dimension":"","parameters":[{"name":"rotation","comment_text":"the rotation of the skull","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getSkullType","comment_text":"Gets the type of skull","return_type":"org.bukkit.SkullType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSkullType","comment_text":"Sets the type of skull","return_type":"void","return_type_dimension":"","parameters":[{"name":"skullType","comment_text":"the type of skull","type":"org.bukkit.SkullType","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Sign","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of either a SignPost or a WallSign.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getLines","comment_text":"Gets all the lines of text currently on this sign.","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getLine","comment_text":"Gets the line of text at the specified index.\n <p>\n For example, getLine(0) will return the first line of text.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"index","comment_text":"Line number to get the text from, starting at 0","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":"Thrown when the line does not exist"}]},{"name":"setLine","comment_text":"Sets the line of text at the specified index.\n <p>\n For example, setLine(0, \"Line One\") will set the first line of text to\n \"Line One\".","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"Line number to set the text at, starting from 0","type":"int","type_dimension":""},{"name":"line","comment_text":"New text to set at the specified index","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":"If the index is out of the range 0..3"}]}],"enumConstants":[]},{"name":"org.bukkit.block.ShulkerBox","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a captured state of a ShulkerBox.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getColor","comment_text":"Get the {@link DyeColor} corresponding to this ShulkerBox","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.PistonMoveReaction","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents how a block or entity will react when interacting with a piston\n when it is extending or retracting.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.PistonMoveReaction","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.PistonMoveReaction","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getById","comment_text":"","return_type":"org.bukkit.block.PistonMoveReaction","return_type_dimension":"","parameters":[{"name":"id","comment_text":"An ID","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["MOVE","BREAK","BLOCK","IGNORE","PUSH_ONLY"]},{"name":"org.bukkit.block.NoteBlock","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a note block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getNote","comment_text":"Gets the note.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRawNote","comment_text":"Gets the note.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNote","comment_text":"Set the note.","return_type":"void","return_type_dimension":"","parameters":[{"name":"note","comment_text":"The note.","type":"org.bukkit.Note","type_dimension":""}],"throws":[]},{"name":"setRawNote","comment_text":"Set the note.","return_type":"void","return_type_dimension":"","parameters":[{"name":"note","comment_text":"The note ID.","type":"byte","type_dimension":""}],"throws":[]},{"name":"play","comment_text":"Attempts to play the note at the block.\n <p>\n If the block represented by this block state is no longer a note block,\n this will return false.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"play","comment_text":"Plays an arbitrary note with an arbitrary instrument at the block.\n <p>\n If the block represented by this block state is no longer a note block,\n this will return false.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"instrument","comment_text":"Instrument ID","type":"byte","type_dimension":""},{"name":"note","comment_text":"Note ID","type":"byte","type_dimension":""}],"throws":[]},{"name":"play","comment_text":"Plays an arbitrary note with an arbitrary instrument at the block.\n <p>\n If the block represented by this block state is no longer a note block,\n this will return false.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"instrument","comment_text":"The instrument","type":"org.bukkit.Instrument","type_dimension":""},{"name":"note","comment_text":"The note","type":"org.bukkit.Note","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Lockable","interfaces":[],"superclass":"","comment_text":"Represents a block (usually a container) that may be locked. When a lock is\n active an item with a name corresponding to the key will be required to open\n this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isLocked","comment_text":"Checks if the container has a valid (non empty) key.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLock","comment_text":"Gets the key needed to access the container.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLock","comment_text":"Sets the key required to access this container. Set to null (or empty\n string) to remove key.","return_type":"void","return_type_dimension":"","parameters":[{"name":"key","comment_text":"the key required to access the container.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Jukebox","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a jukebox.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPlaying","comment_text":"Gets the record being played.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPlaying","comment_text":"Sets the record being played.","return_type":"void","return_type_dimension":"","parameters":[{"name":"record","comment_text":"The record Material, or null/AIR to stop playing","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"isPlaying","comment_text":"Checks if the jukebox is playing a record.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"eject","comment_text":"Stops the jukebox playing and ejects the current record.\n <p>\n If the block represented by this state is no longer a jukebox, this will\n do nothing and return false.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Hopper","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a captured state of a hopper.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.Furnace","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable"],"superclass":"","comment_text":"Represents a captured state of a furnace.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBurnTime","comment_text":"Get burn time.","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBurnTime","comment_text":"Set burn time.","return_type":"void","return_type_dimension":"","parameters":[{"name":"burnTime","comment_text":"Burn time","type":"short","type_dimension":""}],"throws":[]},{"name":"getCookTime","comment_text":"Get cook time.","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCookTime","comment_text":"Set cook time.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cookTime","comment_text":"Cook time","type":"short","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.FurnaceInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSnapshotInventory","comment_text":"","return_type":"org.bukkit.inventory.FurnaceInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.FlowerPot","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a flower pot.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getContents","comment_text":"Gets the item present in this flower pot.","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setContents","comment_text":"Sets the item present in this flower pot.\n\n NOTE: The Vanilla Minecraft client will currently not refresh this until\n a block update is triggered.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"new item, or null for empty.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.EndGateway","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of an end gateway.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getExitLocation","comment_text":"Gets the location that entities are teleported to when \n entering the gateway portal.\n <p>\n If this block state is not placed the location's world will be null.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExitLocation","comment_text":"Sets the exit location that entities are teleported to when\n they enter the gateway portal.\n <p>\n If this block state is not placed the location's world has to be null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the new exit location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"isExactTeleport","comment_text":"Gets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExactTeleport","comment_text":"Sets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"exact","comment_text":"whether to teleport to the exact location","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.EnderChest","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of an ender chest.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.EnchantingTable","interfaces":["org.bukkit.block.BlockState","org.bukkit.Nameable"],"superclass":"","comment_text":"Represents a captured state of an enchanting table.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.Dropper","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a captured state of a dropper.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"drop","comment_text":"Tries to drop a randomly selected item from the dropper's inventory,\n following the normal behavior of a dropper.\n <p>\n Normal behavior of a dropper is as follows:\n <p>\n If the block that the dropper is facing is an InventoryHolder,\n the randomly selected ItemStack is placed within that \n Inventory in the first slot that's available, starting with 0 and\n counting up.  If the inventory is full, nothing happens.\n <p>\n If the block that the dropper is facing is not an InventoryHolder,\n the randomly selected ItemStack is dropped on\n the ground in the form of an {@link org.bukkit.entity.Item Item}.\n <p>\n If the block represented by this state is no longer a dropper, this will\n do nothing.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.DoubleChest","interfaces":["org.bukkit.inventory.InventoryHolder"],"superclass":"java.lang.Object","comment_text":"Represents a double chest.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"DoubleChest","comment_text":"","parameters":[{"name":"chest","comment_text":"","type":"org.bukkit.inventory.DoubleChestInventory","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLeftSide","comment_text":"","return_type":"org.bukkit.inventory.InventoryHolder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRightSide","comment_text":"","return_type":"org.bukkit.inventory.InventoryHolder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorld","comment_text":"","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getX","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Dispenser","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a captured state of a dispenser.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlockProjectileSource","comment_text":"Gets the BlockProjectileSource object for the dispenser.\n <p>\n If the block represented by this state is no longer a dispenser, this\n will return null.","return_type":"org.bukkit.projectiles.BlockProjectileSource","return_type_dimension":"","parameters":[],"throws":[]},{"name":"dispense","comment_text":"Attempts to dispense the contents of the dispenser.\n <p>\n If the block represented by this state is no longer a dispenser, this\n will return false.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.DaylightDetector","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a (possibly inverted) daylight detector.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.CreatureSpawner","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a creature spawner.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSpawnedType","comment_text":"Get the spawner's creature type.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnedType","comment_text":"Set the spawner's creature type.","return_type":"void","return_type_dimension":"","parameters":[{"name":"creatureType","comment_text":"The creature type.","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"setCreatureTypeByName","comment_text":"Set the spawner mob type.","return_type":"void","return_type_dimension":"","parameters":[{"name":"creatureType","comment_text":"The creature type's name.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getCreatureTypeName","comment_text":"Get the spawner's creature type.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDelay","comment_text":"Get the spawner's delay.\n <br>\n This is the delay, in ticks, until the spawner will spawn its next mob.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDelay","comment_text":"Set the spawner's delay.\n <br>\n If set to -1, the spawn delay will be reset to a random value between\n {@link #getMinSpawnDelay} and {@link #getMaxSpawnDelay()}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"The delay.","type":"int","type_dimension":""}],"throws":[]},{"name":"getMinSpawnDelay","comment_text":"The minimum spawn delay amount (in ticks).\n <br>\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between {@link #getMinSpawnDelay()}\n and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n\n Default value is 200 ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMinSpawnDelay","comment_text":"Set the minimum spawn delay amount (in ticks).","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"the minimum spawn delay amount","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxSpawnDelay","comment_text":"The maximum spawn delay amount (in ticks).\n <br>\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between {@link #getMinSpawnDelay()}\n and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n <br>\n This value <b>must</b> be greater than 0 and less than or equal to\n {@link #getMaxSpawnDelay()}.\n\n Default value is 800 ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxSpawnDelay","comment_text":"Set the maximum spawn delay amount (in ticks).\n <br>\n This value <b>must</b> be greater than 0, as well as greater than or\n equal to {@link #getMinSpawnDelay()}","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"the new maximum spawn delay amount","type":"int","type_dimension":""}],"throws":[]},{"name":"getSpawnCount","comment_text":"Get how many mobs attempt to spawn.\n <br>\n Default value is 4.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnCount","comment_text":"Set how many mobs attempt to spawn.","return_type":"void","return_type_dimension":"","parameters":[{"name":"spawnCount","comment_text":"the new spawn count","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxNearbyEntities","comment_text":"Set the new maximum amount of similar entities that are allowed to be\n within spawning range of this spawner.\n <br>\n If more than the maximum number of entities are within range, the spawner\n will not spawn and try again with a new {@link #getDelay()}.\n <br>\n Default value is 16.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxNearbyEntities","comment_text":"Set the maximum number of similar entities that are allowed to be within\n spawning range of this spawner.\n <br>\n Similar entities are entities that are of the same {@link EntityType}","return_type":"void","return_type_dimension":"","parameters":[{"name":"maxNearbyEntities","comment_text":"the maximum number of nearby, similar, entities","type":"int","type_dimension":""}],"throws":[]},{"name":"getRequiredPlayerRange","comment_text":"Get the maximum distance(squared) a player can be in order for this\n spawner to be active.\n <br>\n If this value is less than or equal to 0, this spawner is always active\n (given that there are players online).\n <br>\n Default value is 16.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRequiredPlayerRange","comment_text":"Set the maximum distance (squared) a player can be in order for this\n spawner to be active.\n <br>\n Setting this value to less than or equal to 0 will make this spawner\n always active (given that there are players online).","return_type":"void","return_type_dimension":"","parameters":[{"name":"requiredPlayerRange","comment_text":"the maximum distance (squared) a player can be\n in order for this spawner to be active.","type":"int","type_dimension":""}],"throws":[]},{"name":"getSpawnRange","comment_text":"Get the radius around which the spawner will attempt to spawn mobs in.\n <br>\n This area is square, includes the block the spawner is in, and is\n centered on the spawner's x,z coordinates - not the spawner itself.\n <br>\n It is 2 blocks high, centered on the spawner's y-coordinate (its bottom);\n thus allowing mobs to spawn as high as its top surface and as low\n as 1 block below its bottom surface.\n <br>\n Default value is 4.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnRange","comment_text":"Set the new spawn range.\n <br>","return_type":"void","return_type_dimension":"","parameters":[{"name":"spawnRange","comment_text":"the new spawn range","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Container","interfaces":["org.bukkit.block.BlockState","org.bukkit.inventory.InventoryHolder","org.bukkit.block.Lockable"],"superclass":"","comment_text":"Represents a captured state of a container block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getInventory","comment_text":"Gets the inventory of the block represented by this block state.\n <p>\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n <p>\n If this block state is not placed this will return the captured inventory\n snapshot instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSnapshotInventory","comment_text":"Gets the captured inventory snapshot of this container.\n <p>\n The returned inventory is not linked to any block. Any modifications to\n the returned inventory will not be applied to the block represented by\n this block state up until {@link #update(boolean, boolean)} has been\n called.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Conduit","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a conduit.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.Comparator","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of an on / off comparator.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.CommandBlock","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a command block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCommand","comment_text":"Gets the command that this CommandBlock will run when powered.\n This will never return null.  If the CommandBlock does not have a\n command, an empty String will be returned instead.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCommand","comment_text":"Sets the command that this CommandBlock will run when powered.\n Setting the command to null is the same as setting it to an empty\n String.","return_type":"void","return_type_dimension":"","parameters":[{"name":"command","comment_text":"Command that this CommandBlock will run when powered.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  This name will never be null, and\n by default is \"@\".","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setName","comment_text":"Sets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  Setting the name to null is the\n same as setting it to \"@\".","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"New name for this CommandBlock.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Chest","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a captured state of a chest.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlockInventory","comment_text":"Gets the inventory of the chest block represented by this block state.\n <p>\n If the chest is a double chest, it returns just the portion of the\n inventory linked to the half of the chest corresponding to this block state.\n <p>\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n <p>\n If this block state is not placed this will return the captured\n inventory snapshot instead.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.BrewingStand","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable"],"superclass":"","comment_text":"Represents a captured state of a brewing stand.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBrewingTime","comment_text":"How much time is left in the brewing cycle.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBrewingTime","comment_text":"Set the time left before brewing completes.","return_type":"void","return_type_dimension":"","parameters":[{"name":"brewTime","comment_text":"Brewing time","type":"int","type_dimension":""}],"throws":[]},{"name":"getFuelLevel","comment_text":"Get the level of current fuel for brewing.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFuelLevel","comment_text":"Set the level of current fuel for brewing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"fuel level","type":"int","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.BrewerInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSnapshotInventory","comment_text":"","return_type":"org.bukkit.inventory.BrewerInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.BlockState","interfaces":["org.bukkit.metadata.Metadatable"],"superclass":"","comment_text":"Represents a captured state of a block, which will not change\n automatically.\n <p>\n Unlike Block, which only one object can exist per coordinate, BlockState\n can exist multiple times for any given Block. Note that another plugin may\n change the state of the block and you will not know, or they may change the\n block to another type entirely, causing your BlockState to become invalid.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlock","comment_text":"Gets the block represented by this block state.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getData","comment_text":"Gets the metadata for this block state.","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockData","comment_text":"Gets the data for this block state.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Gets the type of this block state.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightLevel","comment_text":"Gets the current light level of the block represented by this block state.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorld","comment_text":"Gets the world which contains the block represented by this block state.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getX","comment_text":"Gets the x-coordinate of this block state.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"Gets the y-coordinate of this block state.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Gets the z-coordinate of this block state.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Gets the location of this block state.\n <p>\n If this block state is not placed the location's world will be null!","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Stores the location of this block state in the provided Location object.\n <p>\n If the provided Location is null this method does nothing and returns\n null.\n <p>\n If this block state is not placed the location's world will be null!","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location to copy into","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getChunk","comment_text":"Gets the chunk which contains the block represented by this block state.","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setData","comment_text":"Sets the metadata for this block state.","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"New block specific metadata","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setBlockData","comment_text":"Sets the data for this block state.","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"New block specific data","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"setType","comment_text":"Sets the type of this block state.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"Material to change this block state to","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"update","comment_text":"Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n <p>\n This has the same effect as calling update(false). That is to say,\n this will not modify the state of a block if it is no longer the same\n type as it was when this state was taken. It will return false in this\n eventuality.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"update","comment_text":"Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n <p>\n This has the same effect as calling update(force, true). That is to\n say, this will trigger a physics update to surrounding blocks.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"force","comment_text":"true to forcefully set the state","type":"boolean","type_dimension":""}],"throws":[]},{"name":"update","comment_text":"Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n <p>\n If this state is not placed, this will have no effect and return true.\n <p>\n Unless force is true, this will not modify the state of a block if it\n is no longer the same type as it was when this state was taken. It will\n return false in this eventuality.\n <p>\n If force is true, it will set the type of the block to match the new\n state, set the state data and then return true.\n <p>\n If applyPhysics is true, it will trigger a physics update on\n surrounding blocks which could cause them to update or disappear.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"force","comment_text":"true to forcefully set the state","type":"boolean","type_dimension":""},{"name":"applyPhysics","comment_text":"false to cancel updating physics on surrounding\n     blocks","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getRawData","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRawData","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"The new data value for the block.","type":"byte","type_dimension":""}],"throws":[]},{"name":"isPlaced","comment_text":"Returns whether this state is placed in the world.\n <p>\n Some methods will not work if the block state isn't\n placed in the world.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.BlockFace","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the face of a block","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getModX","comment_text":"Get the amount of X-coordinates to modify to get the represented block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getModY","comment_text":"Get the amount of Y-coordinates to modify to get the represented block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getModZ","comment_text":"Get the amount of Z-coordinates to modify to get the represented block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOppositeFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["NORTH","EAST","SOUTH","WEST","UP","DOWN","NORTH_EAST","NORTH_WEST","SOUTH_EAST","SOUTH_WEST","WEST_NORTH_WEST","NORTH_NORTH_WEST","NORTH_NORTH_EAST","EAST_NORTH_EAST","EAST_SOUTH_EAST","SOUTH_SOUTH_EAST","SOUTH_SOUTH_WEST","WEST_SOUTH_WEST","SELF"]},{"name":"org.bukkit.block.Block","interfaces":["org.bukkit.metadata.Metadatable"],"superclass":"","comment_text":"Represents a block. This is a live object, and only one Block may exist for\n any given location in a world. The state of the block may change\n concurrently to your own handling of it; use block.getState() to get a\n snapshot state of a block which will not be modified.\n\n <br>\n Note that parts of this class which require access to the world at large\n (i.e. lighting and power) may not be able to be safely accessed during world\n generation when used in cases like BlockPhysicsEvent!!!!","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getData","comment_text":"Gets the metadata for this block","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockData","comment_text":"Gets the complete block data for this block","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRelative","comment_text":"Gets the block at the given offsets","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"modX","comment_text":"X-coordinate offset","type":"int","type_dimension":""},{"name":"modY","comment_text":"Y-coordinate offset","type":"int","type_dimension":""},{"name":"modZ","comment_text":"Z-coordinate offset","type":"int","type_dimension":""}],"throws":[]},{"name":"getRelative","comment_text":"Gets the block at the given face\n <p>\n This method is equal to getRelative(face, 1)","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"face","comment_text":"Face of this block to return","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getRelative","comment_text":"Gets the block at the given distance of the given face\n <p>\n For example, the following method places water at 100,102,100; two\n blocks above 100,100,100.\n\n <pre>\n Block block = world.getBlockAt(100, 100, 100);\n Block shower = block.getRelative(BlockFace.UP, 2);\n shower.setType(Material.WATER);\n </pre>","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"face","comment_text":"Face of this block to return","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"distance","comment_text":"Distance to get the block at","type":"int","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"Gets the type of this block","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightLevel","comment_text":"Gets the light level between 0-15","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightFromSky","comment_text":"Get the amount of light at this block from the sky.\n <p>\n Any light given from other sources (such as blocks like torches) will\n be ignored.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightFromBlocks","comment_text":"Get the amount of light at this block from nearby blocks.\n <p>\n Any light given from other sources (such as the sun) will be ignored.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorld","comment_text":"Gets the world which contains this Block","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getX","comment_text":"Gets the x-coordinate of this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"Gets the y-coordinate of this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Gets the z-coordinate of this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Gets the Location of the block","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Stores the location of the block in the provided Location object.\n <p>\n If the provided Location is null this method does nothing and returns\n null.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location to copy into","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getChunk","comment_text":"Gets the chunk which contains this block","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBlockData","comment_text":"Sets the complete data for this block","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"new block specific data","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"setBlockData","comment_text":"Sets the complete data for this block","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"new block specific data","type":"org.bukkit.block.data.BlockData","type_dimension":""},{"name":"applyPhysics","comment_text":"false to cancel physics from the changed block","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setType","comment_text":"Sets the type of this block","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"Material to change this block to","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setType","comment_text":"Sets the type of this block","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"Material to change this block to","type":"org.bukkit.Material","type_dimension":""},{"name":"applyPhysics","comment_text":"False to cancel physics on the changed block.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getFace","comment_text":"Gets the face relation of this block compared to the given block.\n <p>\n For example: \n <pre>{@code\n Block current = world.getBlockAt(100, 100, 100);\n Block target = world.getBlockAt(100, 101, 100);\n\n current.getFace(target) == BlockFace.Up;\n }</pre>\n <br>\n If the given block is not connected to this block, null may be returned","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[{"name":"block","comment_text":"Block to compare against this block","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]},{"name":"getState","comment_text":"Captures the current state of this block. You may then cast that state\n into any accepted type, such as Furnace or Sign.\n <p>\n The returned object will never be updated, and you are not guaranteed\n that (for example) a sign is still a sign after you capture its state.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBiome","comment_text":"Returns the biome that this block resides in","return_type":"org.bukkit.block.Biome","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBiome","comment_text":"Sets the biome that this block resides in","return_type":"void","return_type_dimension":"","parameters":[{"name":"bio","comment_text":"new Biome type for this block","type":"org.bukkit.block.Biome","type_dimension":""}],"throws":[]},{"name":"isBlockPowered","comment_text":"Returns true if the block is being powered by Redstone.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBlockIndirectlyPowered","comment_text":"Returns true if the block is being indirectly powered by Redstone.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBlockFacePowered","comment_text":"Returns true if the block face is being powered by Redstone.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The block face","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"isBlockFaceIndirectlyPowered","comment_text":"Returns true if the block face is being indirectly powered by Redstone.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The block face","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getBlockPower","comment_text":"Returns the redstone power being provided to this block face","return_type":"int","return_type_dimension":"","parameters":[{"name":"face","comment_text":"the face of the block to query or BlockFace.SELF for the\n     block itself","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getBlockPower","comment_text":"Returns the redstone power being provided to this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEmpty","comment_text":"Checks if this block is empty.\n <p>\n A block is considered empty when {@link #getType()} returns {@link\n Material#AIR}.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLiquid","comment_text":"Checks if this block is liquid.\n <p>\n A block is considered liquid when {@link #getType()} returns {@link\n Material#WATER} or {@link Material#LAVA}.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTemperature","comment_text":"Gets the temperature of the biome of this block","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHumidity","comment_text":"Gets the humidity of the biome of this block","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPistonMoveReaction","comment_text":"Returns the reaction of the block when moved by a piston","return_type":"org.bukkit.block.PistonMoveReaction","return_type_dimension":"","parameters":[],"throws":[]},{"name":"breakNaturally","comment_text":"Breaks the block and spawns items as if a player had digged it","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"breakNaturally","comment_text":"Breaks the block and spawns items as if a player had digged it with a\n specific tool","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"tool","comment_text":"The tool or item in hand used for digging","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getDrops","comment_text":"Returns a list of items which would drop by destroying this block","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDrops","comment_text":"Returns a list of items which would drop by destroying this block with\n a specific tool","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"tool","comment_text":"The tool or item in hand used for digging","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Biome","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Holds all accepted Biomes in the default server","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.Biome","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.Biome","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["OCEAN","PLAINS","DESERT","MOUNTAINS","FOREST","TAIGA","SWAMP","RIVER","NETHER","THE_END","FROZEN_OCEAN","FROZEN_RIVER","SNOWY_TUNDRA","SNOWY_MOUNTAINS","MUSHROOM_FIELDS","MUSHROOM_FIELD_SHORE","BEACH","DESERT_HILLS","WOODED_HILLS","TAIGA_HILLS","MOUNTAIN_EDGE","JUNGLE","JUNGLE_HILLS","JUNGLE_EDGE","DEEP_OCEAN","STONE_SHORE","SNOWY_BEACH","BIRCH_FOREST","BIRCH_FOREST_HILLS","DARK_FOREST","SNOWY_TAIGA","SNOWY_TAIGA_HILLS","GIANT_TREE_TAIGA","GIANT_TREE_TAIGA_HILLS","WOODED_MOUNTAINS","SAVANNA","SAVANNA_PLATEAU","BADLANDS","WOODED_BADLANDS_PLATEAU","BADLANDS_PLATEAU","SMALL_END_ISLANDS","END_MIDLANDS","END_HIGHLANDS","END_BARRENS","WARM_OCEAN","LUKEWARM_OCEAN","COLD_OCEAN","DEEP_WARM_OCEAN","DEEP_LUKEWARM_OCEAN","DEEP_COLD_OCEAN","DEEP_FROZEN_OCEAN","THE_VOID","SUNFLOWER_PLAINS","DESERT_LAKES","GRAVELLY_MOUNTAINS","FLOWER_FOREST","TAIGA_MOUNTAINS","SWAMP_HILLS","ICE_SPIKES","MODIFIED_JUNGLE","MODIFIED_JUNGLE_EDGE","TALL_BIRCH_FOREST","TALL_BIRCH_HILLS","DARK_FOREST_HILLS","SNOWY_TAIGA_MOUNTAINS","GIANT_SPRUCE_TAIGA","GIANT_SPRUCE_TAIGA_HILLS","MODIFIED_GRAVELLY_MOUNTAINS","SHATTERED_SAVANNA","SHATTERED_SAVANNA_PLATEAU","ERODED_BADLANDS","MODIFIED_WOODED_BADLANDS_PLATEAU","MODIFIED_BADLANDS_PLATEAU"]},{"name":"org.bukkit.block.Bed","interfaces":["org.bukkit.block.BlockState","org.bukkit.material.Colorable"],"superclass":"","comment_text":"Represents a captured state of a bed.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.Beacon","interfaces":["org.bukkit.block.Container","org.bukkit.Nameable"],"superclass":"","comment_text":"Represents a captured state of a beacon.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.BeaconInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSnapshotInventory","comment_text":"","return_type":"org.bukkit.inventory.BeaconInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntitiesInRange","comment_text":"Returns the list of players within the beacon's range of effect.\n <p>\n This will return an empty list if the block represented by this state is\n no longer a beacon.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTier","comment_text":"Returns the tier of the beacon pyramid (0-4). The tier refers to the\n beacon's power level, based on how many layers of blocks are in the\n pyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPrimaryEffect","comment_text":"Returns the primary effect set on the beacon","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPrimaryEffect","comment_text":"Set the primary effect on this beacon, or null to clear.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"new primary effect","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"getSecondaryEffect","comment_text":"Returns the secondary effect set on the beacon.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSecondaryEffect","comment_text":"Set the secondary effect on this beacon, or null to clear. Note that tier\n must be &gt;= 4 for this effect to be active.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"desired secondary effect","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.Banner","interfaces":["org.bukkit.block.BlockState"],"superclass":"","comment_text":"Represents a captured state of a banner.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBaseColor","comment_text":"Returns the base color for this banner","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBaseColor","comment_text":"Sets the base color for this banner.\n <b>Only valid for shield pseudo banners, otherwise base depends on block\n type</b>","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the base color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getPatterns","comment_text":"Returns a list of patterns on this banner","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPatterns","comment_text":"Sets the patterns used on this banner","return_type":"void","return_type_dimension":"","parameters":[{"name":"patterns","comment_text":"the new list of patterns","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"addPattern","comment_text":"Adds a new pattern on top of the existing\n patterns","return_type":"void","return_type_dimension":"","parameters":[{"name":"pattern","comment_text":"the new pattern to add","type":"org.bukkit.block.banner.Pattern","type_dimension":""}],"throws":[]},{"name":"getPattern","comment_text":"Returns the pattern at the specified index","return_type":"org.bukkit.block.banner.Pattern","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""}],"throws":[]},{"name":"removePattern","comment_text":"Removes the pattern at the specified index","return_type":"org.bukkit.block.banner.Pattern","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""}],"throws":[]},{"name":"setPattern","comment_text":"Sets the pattern at the specified index","return_type":"void","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""},{"name":"pattern","comment_text":"the new pattern","type":"org.bukkit.block.banner.Pattern","type_dimension":""}],"throws":[]},{"name":"numberOfPatterns","comment_text":"Returns the number of patterns on this\n banner","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Waterlogged","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'waterlogged' denotes whether this block has fluid in it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isWaterlogged","comment_text":"Gets the value of the 'waterlogged' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWaterlogged","comment_text":"Sets the value of the 'waterlogged' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"waterlogged","comment_text":"the new 'waterlogged' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Snowable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'snowy' denotes whether this block has a snow covered side and top texture\n (normally because the block above is snow).","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isSnowy","comment_text":"Gets the value of the 'snowy' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSnowy","comment_text":"Sets the value of the 'snowy' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"snowy","comment_text":"the new 'snowy' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Rotatable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'rotation' represents the current rotation of this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getRotation","comment_text":"Gets the value of the 'rotation' property.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRotation","comment_text":"Sets the value of the 'rotation' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"rotation","comment_text":"the new 'rotation' value","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Rail","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'shape' represents the current layout of a minecart rail.\n <br>\n Some types of rail may not be able to be laid out in all shapes, use\n {@link #getShapes()} to get those applicable to this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getShape","comment_text":"Gets the value of the 'shape' property.","return_type":"org.bukkit.block.data.Rail.Shape","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShape","comment_text":"Sets the value of the 'shape' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"shape","comment_text":"the new 'shape' value","type":"org.bukkit.block.data.Rail.Shape","type_dimension":""}],"throws":[]},{"name":"getShapes","comment_text":"Gets the shapes which are applicable to this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Rail.Shape","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The different types of shapes a rail block can occupy.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.Rail.Shape","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.Rail.Shape","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NORTH_SOUTH","EAST_WEST","ASCENDING_EAST","ASCENDING_WEST","ASCENDING_NORTH","ASCENDING_SOUTH","SOUTH_EAST","SOUTH_WEST","NORTH_WEST","NORTH_EAST"]},{"name":"org.bukkit.block.data.Powerable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'powered' indicates whether this block is in the powered state or not, i.e.\n receiving a redstone current of power &gt; 0.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the value of the 'powered' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Sets the value of the 'powered' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"powered","comment_text":"the new 'powered' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Orientable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'axis' represents the axis along whilst this block is oriented.\n <br>\n Some blocks such as the portal block may not be able to be placed in all\n orientations, use {@link #getAxes()} to retrieve all possible such\n orientations.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAxis","comment_text":"Gets the value of the 'axis' property.","return_type":"org.bukkit.Axis","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAxis","comment_text":"Sets the value of the 'axis' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"axis","comment_text":"the new 'axis' value","type":"org.bukkit.Axis","type_dimension":""}],"throws":[]},{"name":"getAxes","comment_text":"Gets the axes which are applicable to this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Openable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'open' denotes whether this door-like block is currently opened.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isOpen","comment_text":"Gets the value of the 'open' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOpen","comment_text":"Sets the value of the 'open' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"open","comment_text":"the new 'open' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.MultipleFacing","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'\n boolean flags which are used to set which faces of the block textures are\n displayed on.\n <br>\n Some blocks may not be able to have faces on all directions, use\n {@link #getAllowedFaces()} to get all possible faces for this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasFace","comment_text":"Checks if this block has the specified face enabled.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"to check","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"setFace","comment_text":"Set whether this block has the specified face enabled.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"to set","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"has","comment_text":"the face","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getFaces","comment_text":"Get all of the faces which are enabled on this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAllowedFaces","comment_text":"Gets all of this faces which may be set on this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Lightable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'lit' denotes whether this block (either a redstone torch or furnace) is\n currently lit - that is not burned out.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isLit","comment_text":"Gets the value of the 'lit' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLit","comment_text":"Sets the value of the 'lit' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"lit","comment_text":"the new 'lit' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Levelled","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'level' represents the amount of fluid contained within this block, either by\n itself or inside a cauldron.\n <br>\n In the case of water and lava blocks the levels have special meanings: a\n level of 0 corresponds to a source block, 1-7 regular fluid heights, and 8-15\n to \"falling\" fluids. All falling fluids have the same behaviour, but the\n level corresponds to that of the block above them, equal to\n <code>this.level - 8</code>\n <br>\n May not be higher than {@link #getMaximumLevel()}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getLevel","comment_text":"Gets the value of the 'level' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLevel","comment_text":"Sets the value of the 'level' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"the new 'level' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumLevel","comment_text":"Gets the maximum allowed value of the 'level' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Directional","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'facing' represents the face towards which the block is pointing.\n <br>\n Some blocks may not be able to face in all directions, use\n {@link #getFaces()} to get all possible directions for this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getFacing","comment_text":"Gets the value of the 'facing' property.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacing","comment_text":"Sets the value of the 'facing' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"facing","comment_text":"the new 'facing' value","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFaces","comment_text":"Gets the faces which are applicable to this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.BlockData","interfaces":["java.lang.Cloneable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMaterial","comment_text":"Get the Material represented by this block data.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAsString","comment_text":"Gets a string, which when passed into a method such as\n {@link Server#createBlockData(java.lang.String)} will unambiguously\n recreate this instance.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"merge","comment_text":"Merges all explicitly set states from the given data with this BlockData.\n <br>\n Note that the given data MUST have been created from one of the String\n parse methods, e.g. {@link Server#createBlockData(java.lang.String)} and\n not have been subsequently modified.\n <br>\n Note also that the block types must match identically.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"data","comment_text":"the data to merge from","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"matches","comment_text":"Checks if the specified BlockData matches this block data.\n <br>\n The semantics of this method are such that for manually created or\n modified BlockData it has the same effect as\n {@link Object#equals(java.lang.Object)}, whilst for parsed data (that to\n which {@link #merge(org.bukkit.block.data.BlockData)} applies, it will\n return true when the type and all explicitly set states match.\n <br>\n <b>Note that these semantics mean that a.matches(b) may not be the same\n as b.matches(a)</b>","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"data","comment_text":"the data to match against (normally a parsed constant)","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"Returns a copy of this BlockData.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Bisected","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'half' denotes which half of a two block tall material this block is.\n <br>\n In game it may be referred to as either (top, bottom) or (upper, lower).","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getHalf","comment_text":"Gets the value of the 'half' property.","return_type":"org.bukkit.block.data.Bisected.Half","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHalf","comment_text":"Sets the value of the 'half' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"half","comment_text":"the new 'half' value","type":"org.bukkit.block.data.Bisected.Half","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Bisected.Half","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The half of a vertically bisected block.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.Bisected.Half","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.Bisected.Half","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["TOP","BOTTOM"]},{"name":"org.bukkit.block.data.Attachable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'attached' denotes whether a tripwire hook or string forms a complete\n tripwire circuit and is ready to trigger.\n <br>\n Updating the property on a tripwire hook will change the texture to indicate\n a connected string, but will not have any effect when used on the tripwire\n string itself. It may however still be used to check whether the string forms\n a circuit.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isAttached","comment_text":"Gets the value of the 'attached' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAttached","comment_text":"Sets the value of the 'attached' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"attached","comment_text":"the new 'attached' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.AnaloguePowerable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'power' represents the redstone power level currently being emitted or\n transmitted via this block.\n <br>\n May not be over 9000 or {@link #getMaximumPower()} (usually 15).","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPower","comment_text":"Gets the value of the 'power' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPower","comment_text":"Sets the value of the 'power' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"power","comment_text":"the new 'power' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumPower","comment_text":"Gets the maximum allowed value of the 'power' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.Ageable","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'age' represents the different growth stages that a crop-like block can go\n through.\n <br>\n A value of 0 indicates that the crop was freshly planted, whilst a value\n equal to {@link #getMaximumAge()} indicates that the crop is ripe and ready\n to be harvested.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAge","comment_text":"Gets the value of the 'age' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAge","comment_text":"Sets the value of the 'age' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"age","comment_text":"the new 'age' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumAge","comment_text":"Gets the maximum allowed value of the 'age' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.WallSign","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TurtleEgg","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'hatch' is the number of turtles which may hatch from these eggs.\n <br>\n 'eggs' is the number of eggs which appear in this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getEggs","comment_text":"Gets the value of the 'eggs' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEggs","comment_text":"Sets the value of the 'eggs' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"eggs","comment_text":"the new 'eggs' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMinimumEggs","comment_text":"Gets the minimum allowed value of the 'eggs' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaximumEggs","comment_text":"Gets the maximum allowed value of the 'eggs' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHatch","comment_text":"Gets the value of the 'hatch' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHatch","comment_text":"Sets the value of the 'hatch' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"hatch","comment_text":"the new 'hatch' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumHatch","comment_text":"Gets the maximum allowed value of the 'hatch' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TripwireHook","interfaces":["org.bukkit.block.data.Attachable","org.bukkit.block.data.Directional","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Tripwire","interfaces":["org.bukkit.block.data.Attachable","org.bukkit.block.data.MultipleFacing","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'disarmed' denotes that the tripwire was broken with shears and will not\n subsequently produce a current when destroyed.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isDisarmed","comment_text":"Gets the value of the 'disarmed' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDisarmed","comment_text":"Sets the value of the 'disarmed' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"disarmed","comment_text":"the new 'disarmed' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TrapDoor","interfaces":["org.bukkit.block.data.Bisected","org.bukkit.block.data.Directional","org.bukkit.block.data.Openable","org.bukkit.block.data.Powerable","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TNT","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'unstable' indicates whether this TNT will explode on punching.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isUnstable","comment_text":"Gets the value of the 'unstable' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUnstable","comment_text":"Sets the value of the 'unstable' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"unstable","comment_text":"the new 'unstable' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TechnicalPiston","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"'type' represents the type of piston which this (technical) block corresponds\n to.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the value of the 'type' property.","return_type":"org.bukkit.block.data.type.TechnicalPiston.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the value of the 'type' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the new ''type value","type":"org.bukkit.block.data.type.TechnicalPiston.Type","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.TechnicalPiston.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Different piston variants.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.TechnicalPiston.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.TechnicalPiston.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NORMAL","STICKY"]},{"name":"org.bukkit.block.data.type.Switch","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'face' represents the face to which a lever or button is stuck.\n <br>\n This is used in conjunction with {@link Directional} to compute the\n orientation of these blocks.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getFace","comment_text":"Gets the value of the 'face' property.","return_type":"org.bukkit.block.data.type.Switch.Face","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFace","comment_text":"Sets the value of the 'face' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"the new 'face' value","type":"org.bukkit.block.data.type.Switch.Face","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Switch.Face","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The face to which a switch type block is stuck.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Switch.Face","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Switch.Face","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["FLOOR","WALL","CEILING"]},{"name":"org.bukkit.block.data.type.StructureBlock","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'mode' represents the different modes in which this structure block may\n operate.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMode","comment_text":"Gets the value of the 'mode' property.","return_type":"org.bukkit.block.data.type.StructureBlock.Mode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMode","comment_text":"Sets the value of the 'mode' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"the new 'mode' value","type":"org.bukkit.block.data.type.StructureBlock.Mode","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.StructureBlock.Mode","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Operating mode of a structure block.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.StructureBlock.Mode","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.StructureBlock.Mode","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SAVE","LOAD","CORNER","DATA"]},{"name":"org.bukkit.block.data.type.Stairs","interfaces":["org.bukkit.block.data.Bisected","org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"'shape' represents the texture and bounding box shape of these stairs.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getShape","comment_text":"Gets the value of the 'shape' property.","return_type":"org.bukkit.block.data.type.Stairs.Shape","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShape","comment_text":"Sets the value of the 'shape' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"shape","comment_text":"the new 'shape' value","type":"org.bukkit.block.data.type.Stairs.Shape","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Stairs.Shape","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The shape of a stair block - used for constructing corners.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Stairs.Shape","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Stairs.Shape","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["STRAIGHT","INNER_LEFT","INNER_RIGHT","OUTER_LEFT","OUTER_RIGHT"]},{"name":"org.bukkit.block.data.type.Snow","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'layers' represents the amount of layers of snow which are present in this\n block.\n <br>\n May not be lower than {@link #getMinimumLayers()} or higher than\n {@link #getMaximumLayers()}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getLayers","comment_text":"Gets the value of the 'layers' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLayers","comment_text":"Sets the value of the 'layers' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"layers","comment_text":"the new 'layers' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMinimumLayers","comment_text":"Gets the minimum allowed value of the 'layers' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaximumLayers","comment_text":"Gets the maximum allowed value of the 'layers' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Slab","interfaces":["org.bukkit.block.data.BlockData","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"'type' represents what state the slab is in - either top, bottom, or a double\n slab occupying the full block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the value of the 'type' property.","return_type":"org.bukkit.block.data.type.Slab.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the value of the 'type' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the new 'type' value","type":"org.bukkit.block.data.type.Slab.Type","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Slab.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The type of the slab.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Slab.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Slab.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["TOP","BOTTOM","DOUBLE"]},{"name":"org.bukkit.block.data.type.Sign","interfaces":["org.bukkit.block.data.Rotatable","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.SeaPickle","interfaces":["org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"'pickles' indicates the number of pickles in this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPickles","comment_text":"Gets the value of the 'pickles' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPickles","comment_text":"Sets the value of the 'pickles' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pickles","comment_text":"the new 'pickles' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMinimumPickles","comment_text":"Gets the minimum allowed value of the 'pickles' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaximumPickles","comment_text":"Gets the maximum allowed value of the 'pickles' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Sapling","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'stage' represents the growth stage of a sapling.\n <br>\n When the sapling reaches {@link #getMaximumStage()} it will attempt to grow\n into a tree as the next stage.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getStage","comment_text":"Gets the value of the 'stage' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStage","comment_text":"Sets the value of the 'stage' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stage","comment_text":"the new 'stage' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumStage","comment_text":"Gets the maximum allowed value of the 'stage' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Repeater","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'delay' is the propagation delay of a repeater, i.e. how many ticks before it\n will be activated from a current change and propagate it to the next block.\n <br>\n Delay may not be lower than {@link #getMinimumDelay()} or higher than\n {@link #getMaximumDelay()}.\n <br>\n 'locked' denotes whether the repeater is in the locked state or not.\n <br>\n A locked repeater will not change its output until it is unlocked. In game, a\n locked repeater is created by having a constant current perpendicularly\n entering the block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getDelay","comment_text":"Gets the value of the 'delay' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDelay","comment_text":"Sets the value of the 'delay' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"the new 'delay' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMinimumDelay","comment_text":"Gets the minimum allowed value of the 'delay' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaximumDelay","comment_text":"Gets the maximum allowed value of the 'delay' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLocked","comment_text":"Gets the value of the 'locked' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLocked","comment_text":"Sets the value of the 'locked' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"locked","comment_text":"the new 'locked' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.RedstoneWire","interfaces":["org.bukkit.block.data.AnaloguePowerable"],"superclass":"","comment_text":"'north', 'east', 'south', 'west' represent the types of connections this\n redstone wire has to adjacent blocks.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getFace","comment_text":"Checks the type of connection on the specified face.","return_type":"org.bukkit.block.data.type.RedstoneWire.Connection","return_type_dimension":"","parameters":[{"name":"face","comment_text":"to check","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"setFace","comment_text":"Sets the type of connection on the specified face.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"to set","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"connection","comment_text":"the connection type","type":"org.bukkit.block.data.type.RedstoneWire.Connection","type_dimension":""}],"throws":[]},{"name":"getAllowedFaces","comment_text":"Gets all of this faces which may be set on this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.RedstoneWire.Connection","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The way in which a redstone wire can connect to an adjacent block face.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.RedstoneWire.Connection","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.RedstoneWire.Connection","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["UP","SIDE","NONE"]},{"name":"org.bukkit.block.data.type.RedstoneWallTorch","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Lightable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.RedstoneRail","interfaces":["org.bukkit.block.data.Powerable","org.bukkit.block.data.Rail"],"superclass":"","comment_text":"A type of minecart rail which interacts with redstone in one way or another.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.PistonHead","interfaces":["org.bukkit.block.data.type.TechnicalPiston"],"superclass":"","comment_text":"'short' denotes this piston head is shorter than the usual amount because it\n is currently retracting.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isShort","comment_text":"Gets the value of the 'short' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShort","comment_text":"Sets the value of the 'short' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"_short","comment_text":"the new 'short' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Piston","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"'extended' denotes whether the piston head is currently extended or not.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isExtended","comment_text":"Gets the value of the 'extended' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExtended","comment_text":"Sets the value of the 'extended' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"extended","comment_text":"the new 'extended' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Observer","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.NoteBlock","interfaces":["org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'instrument' is the type of sound made when this note block is activated.\n <br>\n 'note' is the specified tuned pitch that the instrument will be played in.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getInstrument","comment_text":"Gets the value of the 'instrument' property.","return_type":"org.bukkit.Instrument","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInstrument","comment_text":"Sets the value of the 'instrument' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"instrument","comment_text":"the new 'instrument' value","type":"org.bukkit.Instrument","type_dimension":""}],"throws":[]},{"name":"getNote","comment_text":"Gets the value of the 'note' property.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNote","comment_text":"Sets the value of the 'note' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"note","comment_text":"the new 'note' value","type":"org.bukkit.Note","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Leaves","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'persistent' indicates whether or not leaves will be checked by the server to\n see if they are subject to decay or not.\n <br>\n 'distance' denotes how far the block is from a tree and is used in\n conjunction with 'persistent' flag to determine if the leaves will decay or\n not.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPersistent","comment_text":"Gets the value of the 'persistent' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPersistent","comment_text":"Sets the value of the 'persistent' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"persistent","comment_text":"the new 'persistent' value","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getDistance","comment_text":"Gets the value of the 'distance' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDistance","comment_text":"Sets the value of the 'distance' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"distance","comment_text":"the new 'distance' value","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Ladder","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Jukebox","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'has_record' is a quick flag to check whether this jukebox has a record\n inside it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasRecord","comment_text":"Gets the value of the 'has_record' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Hopper","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"Similar to {@link Powerable}, 'enabled' indicates whether or not the hopper\n is currently activated.\n <br>\n Unlike most other blocks, a hopper is only enabled when it is <b>not</b>\n receiving any power.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isEnabled","comment_text":"Gets the value of the 'enabled' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEnabled","comment_text":"Sets the value of the 'enabled' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enabled","comment_text":"the new 'enabled' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.GlassPane","interfaces":["org.bukkit.block.data.MultipleFacing","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Gate","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Openable","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'in_wall\" indicates if the fence gate is attached to a wall, and if true the\n texture is lowered by a small amount to blend in better.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isInWall","comment_text":"Gets the value of the 'in_wall' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInWall","comment_text":"Sets the value of the 'in_wall' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"inWall","comment_text":"the new 'in_wall' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Furnace","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Lightable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Fire","interfaces":["org.bukkit.block.data.Ageable","org.bukkit.block.data.MultipleFacing"],"superclass":"","comment_text":"md_5's mixtape.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Fence","interfaces":["org.bukkit.block.data.MultipleFacing","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Farmland","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"The 'moisture' level of farmland indicates how close it is to a water source\n (if any).\n <br>\n A higher moisture level leads, to faster growth of crops on this block, but\n cannot be higher than {@link #getMaximumMoisture()}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMoisture","comment_text":"Gets the value of the 'moisture' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMoisture","comment_text":"Sets the value of the 'moisture' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"moisture","comment_text":"the new 'moisture' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumMoisture","comment_text":"Gets the maximum allowed value of the 'moisture' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.EndPortalFrame","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"'eye' denotes whether this end portal frame has been activated by having an\n eye of ender placed in it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasEye","comment_text":"Gets the value of the 'eye' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEye","comment_text":"Sets the value of the 'eye' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"eye","comment_text":"the new 'eye' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.EnderChest","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Door","interfaces":["org.bukkit.block.data.Bisected","org.bukkit.block.data.Directional","org.bukkit.block.data.Openable","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'hinge' indicates which hinge this door is attached to and will rotate around\n when opened.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getHinge","comment_text":"Gets the value of the 'hinge' property.","return_type":"org.bukkit.block.data.type.Door.Hinge","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHinge","comment_text":"Sets the value of the 'hinge' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"hinge","comment_text":"the new 'hinge' value","type":"org.bukkit.block.data.type.Door.Hinge","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Door.Hinge","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The hinge of a door.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Door.Hinge","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Door.Hinge","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["LEFT","RIGHT"]},{"name":"org.bukkit.block.data.type.Dispenser","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"Similar to {@link Powerable}, 'triggered' indicates whether or not the\n dispenser is currently activated.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isTriggered","comment_text":"Gets the value of the 'triggered' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTriggered","comment_text":"Sets the value of the 'triggered' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"triggered","comment_text":"the new 'triggered' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.DaylightDetector","interfaces":["org.bukkit.block.data.AnaloguePowerable"],"superclass":"","comment_text":"'inverted' denotes whether this daylight detector is in the inverted mode,\n i.e. activates in the absence of light rather than presence.\"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isInverted","comment_text":"Gets the value of the 'inverted' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInverted","comment_text":"Sets the value of the 'inverted' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"inverted","comment_text":"the new 'inverted' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.CoralWallFan","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Comparator","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Powerable"],"superclass":"","comment_text":"'mode' indicates what mode this comparator will operate in.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMode","comment_text":"Gets the value of the 'mode' property.","return_type":"org.bukkit.block.data.type.Comparator.Mode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMode","comment_text":"Sets the value of the 'mode' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"the new 'mode' value","type":"org.bukkit.block.data.type.Comparator.Mode","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Comparator.Mode","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The mode in which a comparator will operate in.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Comparator.Mode","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Comparator.Mode","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["COMPARE","SUBTRACT"]},{"name":"org.bukkit.block.data.type.CommandBlock","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"'conditional' denotes whether this command block is conditional or not, i.e.\n will only execute if the preceeding command block also executed successfully.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isConditional","comment_text":"Gets the value of the 'conditional' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setConditional","comment_text":"Sets the value of the 'conditional' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"conditional","comment_text":"the new 'conditional' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Cocoa","interfaces":["org.bukkit.block.data.Ageable","org.bukkit.block.data.Directional"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Chest","interfaces":["org.bukkit.block.data.Directional","org.bukkit.block.data.Waterlogged"],"superclass":"","comment_text":"'type' represents which part of a double chest this block is, or if it is a\n single chest.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the value of the 'type' property.","return_type":"org.bukkit.block.data.type.Chest.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the value of the 'type' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the new 'type' value","type":"org.bukkit.block.data.type.Chest.Type","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Chest.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Type of this chest block.\n <br>\n NB: Left and right are relative to the chest itself, i.e opposite to what\n a player placing the appropriate block would see.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Chest.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Chest.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SINGLE","LEFT","RIGHT"]},{"name":"org.bukkit.block.data.type.Cake","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'bites' represents the amount of bites which have been taken from this slice\n of cake.\n <br>\n A value of 0 indicates that the cake has not been eaten, whilst a value of\n {@link #getMaximumBites()} indicates that it is all gone :(","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBites","comment_text":"Gets the value of the 'bites' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBites","comment_text":"Sets the value of the 'bites' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"bites","comment_text":"the new 'bites' value","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumBites","comment_text":"Gets the maximum allowed value of the 'bites' property.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.BubbleColumn","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"'drag' indicates whether a force will be applied on entities moving through\n this block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isDrag","comment_text":"Gets the value of the 'drag' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDrag","comment_text":"Sets the value of the 'drag' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"drag","comment_text":"the new 'drag' value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.BrewingStand","interfaces":["org.bukkit.block.data.BlockData"],"superclass":"","comment_text":"Interface to the 'has_bottle_0', 'has_bottle_1', 'has_bottle_2' flags on a\n brewing stand which indicate which bottles are rendered on the outside.\n <br>\n Stand may have 0, 1... {@link #getMaximumBottles()}-1 bottles.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasBottle","comment_text":"Checks if the stand has the following bottle","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"bottle","comment_text":"to check","type":"int","type_dimension":""}],"throws":[]},{"name":"setBottle","comment_text":"Set whether the stand has this bottle present.","return_type":"void","return_type_dimension":"","parameters":[{"name":"bottle","comment_text":"to set","type":"int","type_dimension":""},{"name":"has","comment_text":"bottle","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getBottles","comment_text":"Get the indexes of all the bottles present on this block.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaximumBottles","comment_text":"Get the maximum amount of bottles present on this stand.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Bed","interfaces":["org.bukkit.block.data.Directional"],"superclass":"","comment_text":"Similar to {@link Bisected}, 'part' denotes which half of the bed this block\n corresponds to.\n <br>\n 'occupied' property is a quick flag to check if a player is currently\n sleeping in this bed block.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPart","comment_text":"Gets the value of the 'part' property.","return_type":"org.bukkit.block.data.type.Bed.Part","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPart","comment_text":"Sets the value of the 'part' property.","return_type":"void","return_type_dimension":"","parameters":[{"name":"part","comment_text":"the new 'part' value","type":"org.bukkit.block.data.type.Bed.Part","type_dimension":""}],"throws":[]},{"name":"isOccupied","comment_text":"Gets the value of the 'occupied' property.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.block.data.type.Bed.Part","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Horizontal half of a bed.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.data.type.Bed.Part","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.data.type.Bed.Part","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["HEAD","FOOT"]},{"name":"org.bukkit.block.structure.UsageMode","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents how a {@link org.bukkit.block.Structure} can be used.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.structure.UsageMode","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.structure.UsageMode","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SAVE","LOAD","CORNER","DATA"]},{"name":"org.bukkit.block.structure.StructureRotation","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents how a {@link org.bukkit.block.Structure} can be rotated.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.structure.StructureRotation","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.structure.StructureRotation","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NONE","CLOCKWISE_90","CLOCKWISE_180","COUNTERCLOCKWISE_90"]},{"name":"org.bukkit.block.structure.Mirror","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents how a {@link org.bukkit.block.Structure} can be mirrored upon\n being loaded.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.block.structure.Mirror","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.block.structure.Mirror","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NONE","LEFT_RIGHT","FRONT_BACK"]},{"name":"org.bukkit.boss.BossBar","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTitle","comment_text":"Returns the title of this boss bar","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTitle","comment_text":"Sets the title of this boss bar","return_type":"void","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title of the bar","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"Returns the color of this boss bar","return_type":"org.bukkit.boss.BarColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this boss bar.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the color of the bar","type":"org.bukkit.boss.BarColor","type_dimension":""}],"throws":[]},{"name":"getStyle","comment_text":"Returns the style of this boss bar","return_type":"org.bukkit.boss.BarStyle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStyle","comment_text":"Sets the bar style of this boss bar","return_type":"void","return_type_dimension":"","parameters":[{"name":"style","comment_text":"the style of the bar","type":"org.bukkit.boss.BarStyle","type_dimension":""}],"throws":[]},{"name":"removeFlag","comment_text":"Remove an existing flag on this boss bar","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"the existing flag to remove","type":"org.bukkit.boss.BarFlag","type_dimension":""}],"throws":[]},{"name":"addFlag","comment_text":"Add an optional flag to this boss bar","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"an optional flag to set on the boss bar","type":"org.bukkit.boss.BarFlag","type_dimension":""}],"throws":[]},{"name":"hasFlag","comment_text":"Returns whether this boss bar as the passed flag set","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"the flag to check","type":"org.bukkit.boss.BarFlag","type_dimension":""}],"throws":[]},{"name":"setProgress","comment_text":"Sets the progress of the bar. Values should be between 0.0 (empty) and\n 1.0 (full)","return_type":"void","return_type_dimension":"","parameters":[{"name":"progress","comment_text":"the progress of the bar","type":"double","type_dimension":""}],"throws":[]},{"name":"getProgress","comment_text":"Returns the progress of the bar between 0.0 and 1.0","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addPlayer","comment_text":"Adds the player to this boss bar causing it to display on their screen.","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to add","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"removePlayer","comment_text":"Removes the player from this boss bar causing it to be removed from their\n screen.","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to remove","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"removeAll","comment_text":"Removes all players from this boss bar","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayers","comment_text":"Returns all players viewing this boss bar","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVisible","comment_text":"Set if the boss bar is displayed to attached players.","return_type":"void","return_type_dimension":"","parameters":[{"name":"visible","comment_text":"visible status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isVisible","comment_text":"Return if the boss bar is displayed to attached players.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"show","comment_text":"Shows the previously hidden boss bar to all attached players","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hide","comment_text":"Hides this boss bar from all attached players","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.boss.BarStyle","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.boss.BarStyle","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.boss.BarStyle","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SOLID","SEGMENTED_6","SEGMENTED_10","SEGMENTED_12","SEGMENTED_20"]},{"name":"org.bukkit.boss.BarFlag","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.boss.BarFlag","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.boss.BarFlag","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["DARKEN_SKY","PLAY_BOSS_MUSIC","CREATE_FOG"]},{"name":"org.bukkit.boss.BarColor","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.boss.BarColor","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.boss.BarColor","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["PINK","BLUE","RED","GREEN","YELLOW","PURPLE","WHITE"]},{"name":"org.bukkit.command.TabExecutor","interfaces":["org.bukkit.command.TabCompleter","org.bukkit.command.CommandExecutor"],"superclass":"","comment_text":"This class is provided as a convenience to implement both TabCompleter and\n CommandExecutor.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.command.TabCompleter","interfaces":[],"superclass":"","comment_text":"Represents a class which can suggest tab completions for commands.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"onTabComplete","comment_text":"Requests a list of possible completions for a command argument.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source of the command.  For players tab-completing a\n     command inside of a command block, this will be the player, not\n     the command block.","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"Command which was executed","type":"org.bukkit.command.Command","type_dimension":""},{"name":"alias","comment_text":"The alias used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"The arguments passed to the command, including final\n     partial argument to be completed and command label","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.SimpleCommandMap","interfaces":["org.bukkit.command.CommandMap"],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimpleCommandMap","comment_text":"","parameters":[{"name":"server","comment_text":"","type":"org.bukkit.Server","type_dimension":""}],"throws":[]}],"fields":[{"name":"knownCommands","comment_text":"","type":"java.util.Map","type_dimension":""}],"methods":[{"name":"setFallbackCommands","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"registerAll","comment_text":"{@inheritDoc}","return_type":"void","return_type_dimension":"","parameters":[{"name":"fallbackPrefix","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"commands","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"{@inheritDoc}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"fallbackPrefix","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"{@inheritDoc}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"label","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"fallbackPrefix","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""}],"throws":[]},{"name":"dispatch","comment_text":"{@inheritDoc}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLine","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.command.CommandException","comment_text":""}]},{"name":"clearCommands","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCommand","comment_text":"","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"cmdLine","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"cmdLine","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"location","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getCommands","comment_text":"","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"registerServerAliases","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.RemoteConsoleCommandSender","interfaces":["org.bukkit.command.CommandSender"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.command.ProxiedCommandSender","interfaces":["org.bukkit.command.CommandSender"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCaller","comment_text":"Returns the CommandSender which triggered this proxied command","return_type":"org.bukkit.command.CommandSender","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCallee","comment_text":"Returns the CommandSender which is being used to call the command","return_type":"org.bukkit.command.CommandSender","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.PluginIdentifiableCommand","interfaces":[],"superclass":"","comment_text":"This interface is used by the help system to group commands into\n sub-indexes based on the {@link Plugin} they are a part of. Custom command\n implementations will need to implement this interface to have a sub-index\n automatically generated on the plugin's behalf.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPlugin","comment_text":"Gets the owner of this PluginIdentifiableCommand.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.PluginCommandYamlParser","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginCommandYamlParser","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"parse","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.PluginCommand","interfaces":["org.bukkit.command.PluginIdentifiableCommand"],"superclass":"org.bukkit.command.Command","comment_text":"Represents a {@link Command} belonging to a plugin","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"owner","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"Executes the command, returning its success","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source object which is executing this command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLabel","comment_text":"The alias of the command used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"All arguments passed to the command, split via ' '","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"setExecutor","comment_text":"Sets the {@link CommandExecutor} to run when parsing this command","return_type":"void","return_type_dimension":"","parameters":[{"name":"executor","comment_text":"New executor to run","type":"org.bukkit.command.CommandExecutor","type_dimension":""}],"throws":[]},{"name":"getExecutor","comment_text":"Gets the {@link CommandExecutor} associated with this command","return_type":"org.bukkit.command.CommandExecutor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTabCompleter","comment_text":"Sets the {@link TabCompleter} to run when tab-completing this command.\n <p>\n If no TabCompleter is specified, and the command's executor implements\n TabCompleter, then the executor will be used for tab completion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"completer","comment_text":"New tab completer","type":"org.bukkit.command.TabCompleter","type_dimension":""}],"throws":[]},{"name":"getTabCompleter","comment_text":"Gets the {@link TabCompleter} associated with this command.","return_type":"org.bukkit.command.TabCompleter","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlugin","comment_text":"Gets the owner of this PluginCommand","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"tabComplete","comment_text":"{@inheritDoc}\n <p>\n Delegates to the tab completer if present.\n <p>\n If it is not present or returns null, will delegate to the current\n command executor if it implements {@link TabCompleter}. If a non-null\n list has not been found, will default to standard player name\n completion in {@link\n Command#tabComplete(CommandSender, String, String[])}.\n <p>\n This method does not consider permissions.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[{"name":"org.bukkit.command.CommandException","comment_text":"if the completer or executor throw an\n     exception during the process of tab-completing."},{"name":"java.lang.IllegalArgumentException","comment_text":"if sender, alias, or args is null"}]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.MultipleCommandAlias","interfaces":[],"superclass":"org.bukkit.command.Command","comment_text":"Represents a command that delegates to one or more other commands","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MultipleCommandAlias","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"commands","comment_text":"","type":"org.bukkit.command.Command","type_dimension":"[]"}],"throws":[]}],"fields":[],"methods":[{"name":"getCommands","comment_text":"Gets the commands associated with the multi-command alias.","return_type":"org.bukkit.command.Command","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLabel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.FormattedCommandAlias","interfaces":[],"superclass":"org.bukkit.command.Command","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FormattedCommandAlias","comment_text":"","parameters":[{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"formatStrings","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLabel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.ConsoleCommandSender","interfaces":["org.bukkit.command.CommandSender","org.bukkit.conversations.Conversable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.command.CommandSender","interfaces":["org.bukkit.permissions.Permissible"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"sendMessage","comment_text":"Sends this sender a message","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"Message to be displayed","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"sendMessage","comment_text":"Sends this sender multiple messages","return_type":"void","return_type_dimension":"","parameters":[{"name":"messages","comment_text":"An array of messages to be displayed","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"getServer","comment_text":"Returns the server instance that this command is running on","return_type":"org.bukkit.Server","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Gets the name of this command sender","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.CommandMap","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerAll","comment_text":"Registers all the commands belonging to a certain plugin.\n <p>\n Caller can use:-\n <ul>\n <li>command.getName() to determine the label registered for this\n     command\n <li>command.getAliases() to determine the aliases which where\n     registered\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"fallbackPrefix","comment_text":"a prefix which is prepended to each command with\n     a ':' one or more times to make the command unique","type":"java.lang.String","type_dimension":""},{"name":"commands","comment_text":"a list of commands to register","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n <p>\n Caller can use:-\n <ul>\n <li>command.getName() to determine the label registered for this\n     command\n <li>command.getAliases() to determine the aliases which where\n     registered\n </ul>","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"label","comment_text":"the label of the command, without the '/'-prefix.","type":"java.lang.String","type_dimension":""},{"name":"fallbackPrefix","comment_text":"a prefix which is prepended to the command with a\n     ':' one or more times to make the command unique","type":"java.lang.String","type_dimension":""},{"name":"command","comment_text":"the command to register","type":"org.bukkit.command.Command","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n <p>\n Caller can use:-\n <ul>\n <li>command.getName() to determine the label registered for this\n     command\n <li>command.getAliases() to determine the aliases which where\n     registered\n </ul>","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"fallbackPrefix","comment_text":"a prefix which is prepended to the command with a\n     ':' one or more times to make the command unique","type":"java.lang.String","type_dimension":""},{"name":"command","comment_text":"the command to register, from which label is determined\n     from the command name","type":"org.bukkit.command.Command","type_dimension":""}],"throws":[]},{"name":"dispatch","comment_text":"Looks for the requested command and executes it if found.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"The command's sender","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"cmdLine","comment_text":"command + arguments. Example: \"/test abc 123\"","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.command.CommandException","comment_text":"Thrown when the executor for the given command\n     fails with an unhandled exception"}]},{"name":"clearCommands","comment_text":"Clears all registered commands.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCommand","comment_text":"Gets the command registered to the specified name","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the command to retrieve","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"tabComplete","comment_text":"Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"The command's sender.","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"cmdLine","comment_text":"The entire command string to tab-complete, excluding\n     initial slash.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if either sender or cmdLine are null"}]},{"name":"tabComplete","comment_text":"Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"The command's sender.","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"cmdLine","comment_text":"The entire command string to tab-complete, excluding\n     initial slash.","type":"java.lang.String","type_dimension":""},{"name":"location","comment_text":"The position looked at by the sender, or null if none","type":"org.bukkit.Location","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if either sender or cmdLine are null"}]}],"enumConstants":[]},{"name":"org.bukkit.command.CommandExecutor","interfaces":[],"superclass":"","comment_text":"Represents a class which contains a single method for executing commands","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"onCommand","comment_text":"Executes the given command, returning its success","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source of the command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"Command which was executed","type":"org.bukkit.command.Command","type_dimension":""},{"name":"label","comment_text":"Alias of the command which was used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"Passed command arguments","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.CommandException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown when an unhandled exception occurs during the execution of a Command","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CommandException","comment_text":"Creates a new instance of <code>CommandException</code> without detail\n message.","parameters":[],"throws":[]},{"name":"CommandException","comment_text":"Constructs an instance of <code>CommandException</code> with the\n specified detail message.","parameters":[{"name":"msg","comment_text":"the detail message.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"CommandException","comment_text":"","parameters":[{"name":"msg","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"cause","comment_text":"","type":"java.lang.Throwable","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.command.Command","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a Command, which executes various tasks upon user input","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Command","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"Command","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"usageMessage","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"aliases","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"usageMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"execute","comment_text":"Executes the command, returning its success","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source object which is executing this command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"commandLabel","comment_text":"The alias of the command used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"All arguments passed to the command, split via ' '","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"Executed on tab completion for this command, returning a list of\n options the player can tab through.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source object which is executing this command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"the alias being used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"All arguments passed to the command, split via ' '","type":"java.lang.String","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if sender, alias, or args is null"}]},{"name":"tabComplete","comment_text":"Executed on tab completion for this command, returning a list of\n options the player can tab through.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"Source object which is executing this command","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"the alias being used","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"All arguments passed to the command, split via ' '","type":"java.lang.String","type_dimension":"[]"},{"name":"location","comment_text":"The position looked at by the sender, or null if none","type":"org.bukkit.Location","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if sender, alias, or args is null"}]},{"name":"getName","comment_text":"Returns the name of this command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setName","comment_text":"Sets the name of this command.\n <p>\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"New command name","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPermission","comment_text":"Gets the permission required by users to be able to perform this\n command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPermission","comment_text":"Sets the permission required by users to be able to perform this\n command","return_type":"void","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"Permission name or null","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"testPermission","comment_text":"Tests the given {@link CommandSender} to see if they can perform this\n command.\n <p>\n If they do not have permission, they will be informed that they cannot\n do this.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"target","comment_text":"User to test","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"testPermissionSilent","comment_text":"Tests the given {@link CommandSender} to see if they can perform this\n command.\n <p>\n No error is sent to the sender.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"target","comment_text":"User to test","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"getLabel","comment_text":"Returns the label for this command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLabel","comment_text":"Sets the label of this command.\n <p>\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"The command's name","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"Registers this command to a CommandMap.\n Once called it only allows changes the registered CommandMap","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"commandMap","comment_text":"the CommandMap to register this command to","type":"org.bukkit.command.CommandMap","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Unregisters this command from the passed CommandMap applying any\n outstanding changes","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"commandMap","comment_text":"the CommandMap to unregister","type":"org.bukkit.command.CommandMap","type_dimension":""}],"throws":[]},{"name":"isRegistered","comment_text":"Returns the current registered state of this command","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAliases","comment_text":"Returns a list of active aliases of this command","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermissionMessage","comment_text":"Returns a message to be displayed on a failed permission check for this\n command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDescription","comment_text":"Gets a brief description of this command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUsage","comment_text":"Gets an example usage of this command","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAliases","comment_text":"Sets the list of aliases to request on registration for this command.\n This is not effective outside of defining aliases in the {@link\n PluginDescriptionFile#getCommands()} (under the\n `<code>aliases</code>' node) is equivalent to this method.","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"aliases","comment_text":"aliases to register to this command","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"setDescription","comment_text":"Sets a brief description of this command. Defining a description in the\n {@link PluginDescriptionFile#getCommands()} (under the\n `<code>description</code>' node) is equivalent to this method.","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"description","comment_text":"new command description","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setPermissionMessage","comment_text":"Sets the message sent when a permission check fails","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"permissionMessage","comment_text":"new permission message, null to indicate\n     default message, or an empty string to indicate no message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setUsage","comment_text":"Sets the example usage of this command","return_type":"org.bukkit.command.Command","return_type_dimension":"","parameters":[{"name":"usage","comment_text":"new example usage","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"broadcastCommandMessage","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"broadcastCommandMessage","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"sendToSource","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.BlockCommandSender","interfaces":["org.bukkit.command.CommandSender"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlock","comment_text":"Returns the block this command sender belongs to","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.VersionCommand","interfaces":[],"superclass":"org.bukkit.command.defaults.BukkitCommand","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VersionCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"currentAlias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.TimingsCommand","interfaces":[],"superclass":"org.bukkit.command.defaults.BukkitCommand","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TimingsCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"currentAlias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.ReloadCommand","interfaces":[],"superclass":"org.bukkit.command.defaults.BukkitCommand","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ReloadCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"currentAlias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.PluginsCommand","interfaces":[],"superclass":"org.bukkit.command.defaults.BukkitCommand","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginsCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"currentAlias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.HelpCommand","interfaces":[],"superclass":"org.bukkit.command.defaults.BukkitCommand","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HelpCommand","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"currentAlias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"tabComplete","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"findPossibleMatches","comment_text":"","return_type":"org.bukkit.help.HelpTopic","return_type_dimension":"","parameters":[{"name":"searchString","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"damerauLevenshteinDistance","comment_text":"Computes the Dameraur-Levenshtein Distance between two strings. Adapted\n from the algorithm at <a href=\"http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\">Wikipedia: Damerauâ€“Levenshtein distance</a>","return_type":"int","return_type_dimension":"","parameters":[{"name":"s1","comment_text":"The first string being compared.","type":"java.lang.String","type_dimension":""},{"name":"s2","comment_text":"The second string being compared.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.command.defaults.BukkitCommand","interfaces":[],"superclass":"org.bukkit.command.Command","comment_text":"","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BukkitCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"BukkitCommand","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"usageMessage","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"aliases","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.MemorySection","interfaces":["org.bukkit.configuration.ConfigurationSection"],"superclass":"java.lang.Object","comment_text":"A type of {@link ConfigurationSection} that is stored in memory.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MemorySection","comment_text":"Creates an empty MemorySection for use as a root {@link Configuration}\n section.\n <p>\n Note that calling this without being yourself a {@link Configuration}\n will throw an exception!","parameters":[],"throws":[]},{"name":"MemorySection","comment_text":"Creates an empty MemorySection with the specified parent and path.","parameters":[{"name":"parent","comment_text":"Parent section that contains this own section.","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""},{"name":"path","comment_text":"Path that you may access this section from via the root\n     {@link Configuration}.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[{"name":"map","comment_text":"","type":"java.util.Map","type_dimension":""}],"methods":[{"name":"getKeys","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"deep","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getValues","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[{"name":"deep","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"contains","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"contains","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"ignoreDefault","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSet","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getCurrentPath","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRoot","comment_text":"","return_type":"org.bukkit.configuration.Configuration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getParent","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addDefault","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"getDefaultSection","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"set","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"get","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"get","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"createSection","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"createSection","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"map","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"getString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isString","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getInt","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getInt","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"isInt","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBoolean","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBoolean","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isBoolean","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDouble","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDouble","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"isDouble","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLong","comment_text":"","return_type":"long","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLong","comment_text":"","return_type":"long","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"long","type_dimension":""}],"throws":[]},{"name":"isLong","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"isList","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getStringList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getIntegerList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBooleanList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDoubleList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFloatList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLongList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getByteList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getCharacterList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getShortList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMapList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getSerializable","comment_text":"","return_type":"T","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"clazz","comment_text":"","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getSerializable","comment_text":"","return_type":"T","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"clazz","comment_text":"","type":"java.lang.Class","type_dimension":""},{"name":"def","comment_text":"","type":"T","type_dimension":""}],"throws":[]},{"name":"getVector","comment_text":"","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getVector","comment_text":"","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"isVector","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[]},{"name":"isOfflinePlayer","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getItemStack","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getItemStack","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"isItemStack","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"isColor","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getConfigurationSection","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isConfigurationSection","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isPrimitiveWrapper","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"input","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"getDefault","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"mapChildrenKeys","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"output","comment_text":"","type":"java.util.Set","type_dimension":""},{"name":"section","comment_text":"","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""},{"name":"deep","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"mapChildrenValues","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"output","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"section","comment_text":"","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""},{"name":"deep","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"createPath","comment_text":"Creates a full path to the given {@link ConfigurationSection} from its\n root {@link Configuration}.\n <p>\n You may use this method for any given {@link ConfigurationSection}, not\n only {@link MemorySection}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"section","comment_text":"Section to create a path for.","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""},{"name":"key","comment_text":"Name of the specified section.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"createPath","comment_text":"Creates a relative path to the given {@link ConfigurationSection} from\n the given relative section.\n <p>\n You may use this method for any given {@link ConfigurationSection}, not\n only {@link MemorySection}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"section","comment_text":"Section to create a path for.","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""},{"name":"key","comment_text":"Name of the specified section.","type":"java.lang.String","type_dimension":""},{"name":"relativeTo","comment_text":"Section to create the path relative to.","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.MemoryConfigurationOptions","interfaces":[],"superclass":"org.bukkit.configuration.ConfigurationOptions","comment_text":"Various settings for controlling the input and output of a {@link\n MemoryConfiguration}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MemoryConfigurationOptions","comment_text":"","parameters":[{"name":"configuration","comment_text":"","type":"org.bukkit.configuration.MemoryConfiguration","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"configuration","comment_text":"","return_type":"org.bukkit.configuration.MemoryConfiguration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"copyDefaults","comment_text":"","return_type":"org.bukkit.configuration.MemoryConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"pathSeparator","comment_text":"","return_type":"org.bukkit.configuration.MemoryConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"char","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.MemoryConfiguration","interfaces":["org.bukkit.configuration.Configuration"],"superclass":"org.bukkit.configuration.MemorySection","comment_text":"This is a {@link Configuration} implementation that does not save or load\n from any source, and stores all values in memory only.\n This is useful for temporary Configurations for providing defaults.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MemoryConfiguration","comment_text":"Creates an empty {@link MemoryConfiguration} with no default values.","parameters":[],"throws":[]},{"name":"MemoryConfiguration","comment_text":"Creates an empty {@link MemoryConfiguration} using the specified {@link\n Configuration} as a source for all default values.","parameters":[{"name":"defaults","comment_text":"Default value provider","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]}],"fields":[{"name":"defaults","comment_text":"","type":"org.bukkit.configuration.Configuration","type_dimension":""},{"name":"options","comment_text":"","type":"org.bukkit.configuration.MemoryConfigurationOptions","type_dimension":""}],"methods":[{"name":"addDefault","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"addDefaults","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"addDefaults","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]},{"name":"setDefaults","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]},{"name":"getDefaults","comment_text":"","return_type":"org.bukkit.configuration.Configuration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getParent","comment_text":"","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"options","comment_text":"","return_type":"org.bukkit.configuration.MemoryConfigurationOptions","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.InvalidConfigurationException","interfaces":[],"superclass":"java.lang.Exception","comment_text":"Exception thrown when attempting to load an invalid {@link Configuration}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InvalidConfigurationException","comment_text":"Creates a new instance of InvalidConfigurationException without a\n message or cause.","parameters":[],"throws":[]},{"name":"InvalidConfigurationException","comment_text":"Constructs an instance of InvalidConfigurationException with the\n specified message.","parameters":[{"name":"msg","comment_text":"The details of the exception.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"InvalidConfigurationException","comment_text":"Constructs an instance of InvalidConfigurationException with the\n specified cause.","parameters":[{"name":"cause","comment_text":"The cause of the exception.","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"InvalidConfigurationException","comment_text":"Constructs an instance of InvalidConfigurationException with the\n specified message and cause.","parameters":[{"name":"msg","comment_text":"The details of the exception.","type":"java.lang.String","type_dimension":""},{"name":"cause","comment_text":"The cause of the exception.","type":"java.lang.Throwable","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.ConfigurationSection","interfaces":[],"superclass":"","comment_text":"Represents a section of a {@link Configuration}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getKeys","comment_text":"Gets a set containing all keys in this section.\n <p>\n If deep is set to true, then this will contain all the keys within any\n child {@link ConfigurationSection}s (and their children, etc). These\n will be in a valid path notation for you to use.\n <p>\n If deep is set to false, then this will contain only the keys of any\n direct children, and not their own children.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"deep","comment_text":"Whether or not to get a deep list, as opposed to a shallow\n     list.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getValues","comment_text":"Gets a Map containing all keys and their values for this section.\n <p>\n If deep is set to true, then this will contain all the keys and values\n within any child {@link ConfigurationSection}s (and their children,\n etc). These keys will be in a valid path notation for you to use.\n <p>\n If deep is set to false, then this will contain only the keys and\n values of any direct children, and not their own children.","return_type":"java.util.Map","return_type_dimension":"","parameters":[{"name":"deep","comment_text":"Whether or not to get a deep list, as opposed to a shallow\n     list.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"contains","comment_text":"Checks if this {@link ConfigurationSection} contains the given path.\n <p>\n If the value for the requested path does not exist but a default value\n has been specified, this will return true.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path to check for existence.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"contains","comment_text":"Checks if this {@link ConfigurationSection} contains the given path.\n <p>\n If the value for the requested path does not exist, the boolean parameter\n of true has been specified, a default value for the path exists, this\n will return true.\n <p>\n If a boolean parameter of false has been specified, true will only be\n returned if there is a set value for the specified path.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path to check for existence.","type":"java.lang.String","type_dimension":""},{"name":"ignoreDefault","comment_text":"Whether or not to ignore if a default value for the\n specified path exists.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSet","comment_text":"Checks if this {@link ConfigurationSection} has a value set for the\n given path.\n <p>\n If the value for the requested path does not exist but a default value\n has been specified, this will still return false.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path to check for existence.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getCurrentPath","comment_text":"Gets the path of this {@link ConfigurationSection} from its root {@link\n Configuration}\n <p>\n For any {@link Configuration} themselves, this will return an empty\n string.\n <p>\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.\n <p>\n To retrieve the single name of this section, that is, the final part of\n the path returned by this method, you may use {@link #getName()}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Gets the name of this individual {@link ConfigurationSection}, in the\n path.\n <p>\n This will always be the final part of {@link #getCurrentPath()}, unless\n the section is orphaned.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRoot","comment_text":"Gets the root {@link Configuration} that contains this {@link\n ConfigurationSection}\n <p>\n For any {@link Configuration} themselves, this will return its own\n object.\n <p>\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.","return_type":"org.bukkit.configuration.Configuration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getParent","comment_text":"Gets the parent {@link ConfigurationSection} that directly contains\n this {@link ConfigurationSection}.\n <p>\n For any {@link Configuration} themselves, this will return null.\n <p>\n If the section is no longer contained within its parent for any reason,\n such as being replaced with a different value, this may return null.","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"get","comment_text":"Gets the requested Object by path.\n <p>\n If the Object does not exist but a default value has been specified,\n this will return the default value. If the Object does not exist and no\n default value was specified, this will return null.","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Object to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"get","comment_text":"Gets the requested Object by path, returning a default value if not\n found.\n <p>\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Object to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found.","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"set","comment_text":"Sets the specified path to the given value.\n <p>\n If value is null, the entry will be removed. Any existing entry will be\n replaced, regardless of what the new value is.\n <p>\n Some implementations may have limitations on what you may store. See\n their individual javadocs for details. No implementations should allow\n you to store {@link Configuration}s or {@link ConfigurationSection}s,\n please use {@link #createSection(java.lang.String)} for that.","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the object to set.","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"New value to set the path to.","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"createSection","comment_text":"Creates an empty {@link ConfigurationSection} at the specified path.\n <p>\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a {@link ConfigurationSection}, it will\n be orphaned.","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path to create the section at.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"createSection","comment_text":"Creates a {@link ConfigurationSection} at the specified path, with\n specified values.\n <p>\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a {@link ConfigurationSection}, it will\n be orphaned.","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path to create the section at.","type":"java.lang.String","type_dimension":""},{"name":"map","comment_text":"The values to used.","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"getString","comment_text":"Gets the requested String by path.\n <p>\n If the String does not exist but a default value has been specified,\n this will return the default value. If the String does not exist and no\n default value was specified, this will return null.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the String to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getString","comment_text":"Gets the requested String by path, returning a default value if not\n found.\n <p>\n If the String does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the String to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a String.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isString","comment_text":"Checks if the specified path is a String.\n <p>\n If the path exists but is not a String, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a String and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the String to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getInt","comment_text":"Gets the requested int by path.\n <p>\n If the int does not exist but a default value has been specified, this\n will return the default value. If the int does not exist and no default\n value was specified, this will return 0.","return_type":"int","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the int to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getInt","comment_text":"Gets the requested int by path, returning a default value if not found.\n <p>\n If the int does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"int","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the int to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not an int.","type":"int","type_dimension":""}],"throws":[]},{"name":"isInt","comment_text":"Checks if the specified path is an int.\n <p>\n If the path exists but is not a int, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a int and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the int to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBoolean","comment_text":"Gets the requested boolean by path.\n <p>\n If the boolean does not exist but a default value has been specified,\n this will return the default value. If the boolean does not exist and\n no default value was specified, this will return false.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the boolean to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBoolean","comment_text":"Gets the requested boolean by path, returning a default value if not\n found.\n <p>\n If the boolean does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the boolean to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a boolean.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isBoolean","comment_text":"Checks if the specified path is a boolean.\n <p>\n If the path exists but is not a boolean, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a boolean and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the boolean to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDouble","comment_text":"Gets the requested double by path.\n <p>\n If the double does not exist but a default value has been specified,\n this will return the default value. If the double does not exist and no\n default value was specified, this will return 0.","return_type":"double","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the double to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDouble","comment_text":"Gets the requested double by path, returning a default value if not\n found.\n <p>\n If the double does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"double","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the double to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a double.","type":"double","type_dimension":""}],"throws":[]},{"name":"isDouble","comment_text":"Checks if the specified path is a double.\n <p>\n If the path exists but is not a double, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a double and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the double to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLong","comment_text":"Gets the requested long by path.\n <p>\n If the long does not exist but a default value has been specified, this\n will return the default value. If the long does not exist and no\n default value was specified, this will return 0.","return_type":"long","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the long to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLong","comment_text":"Gets the requested long by path, returning a default value if not\n found.\n <p>\n If the long does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"long","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the long to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a long.","type":"long","type_dimension":""}],"throws":[]},{"name":"isLong","comment_text":"Checks if the specified path is a long.\n <p>\n If the path exists but is not a long, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a long and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the long to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getList","comment_text":"Gets the requested List by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return null.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getList","comment_text":"Gets the requested List by path, returning a default value if not\n found.\n <p>\n If the List does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a List.","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"isList","comment_text":"Checks if the specified path is a List.\n <p>\n If the path exists but is not a List, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a List and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getStringList","comment_text":"Gets the requested List of String by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a String if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getIntegerList","comment_text":"Gets the requested List of Integer by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Integer if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getBooleanList","comment_text":"Gets the requested List of Boolean by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Boolean if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDoubleList","comment_text":"Gets the requested List of Double by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Double if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFloatList","comment_text":"Gets the requested List of Float by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Float if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLongList","comment_text":"Gets the requested List of Long by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Long if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getByteList","comment_text":"Gets the requested List of Byte by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Byte if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getCharacterList","comment_text":"Gets the requested List of Character by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Character if\n possible, but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getShortList","comment_text":"Gets the requested List of Short by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Short if possible,\n but may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getMapList","comment_text":"Gets the requested List of Maps by path.\n <p>\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n <p>\n This method will attempt to cast any values into a Map if possible, but\n may miss any values out if they are not compatible.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the List to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getSerializable","comment_text":"Gets the requested {@link ConfigurationSerializable} object at the given\n path.\n\n If the Object does not exist but a default value has been specified, this\n will return the default value. If the Object does not exist and no\n default value was specified, this will return null.","return_type":"T","return_type_dimension":"","parameters":[{"name":"path","comment_text":"the path to the object.","type":"java.lang.String","type_dimension":""},{"name":"clazz","comment_text":"the type of {@link ConfigurationSerializable}","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getSerializable","comment_text":"Gets the requested {@link ConfigurationSerializable} object at the given\n path, returning a default value if not found\n\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"T","return_type_dimension":"","parameters":[{"name":"path","comment_text":"the path to the object.","type":"java.lang.String","type_dimension":""},{"name":"clazz","comment_text":"the type of {@link ConfigurationSerializable}","type":"java.lang.Class","type_dimension":""},{"name":"def","comment_text":"the default object to return if the object is not present at\n the path","type":"T","type_dimension":""}],"throws":[]},{"name":"getVector","comment_text":"Gets the requested Vector by path.\n <p>\n If the Vector does not exist but a default value has been specified,\n this will return the default value. If the Vector does not exist and no\n default value was specified, this will return null.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Vector to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getVector","comment_text":"Gets the requested {@link Vector} by path, returning a default value if\n not found.\n <p>\n If the Vector does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Vector to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a Vector.","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"isVector","comment_text":"Checks if the specified path is a Vector.\n <p>\n If the path exists but is not a Vector, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Vector and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Vector to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the requested OfflinePlayer by path.\n <p>\n If the OfflinePlayer does not exist but a default value has been\n specified, this will return the default value. If the OfflinePlayer\n does not exist and no default value was specified, this will return\n null.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the OfflinePlayer to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOfflinePlayer","comment_text":"Gets the requested {@link OfflinePlayer} by path, returning a default\n value if not found.\n <p>\n If the OfflinePlayer does not exist then the specified default value\n will returned regardless of if a default has been identified in the\n root {@link Configuration}.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the OfflinePlayer to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not an OfflinePlayer.","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[]},{"name":"isOfflinePlayer","comment_text":"Checks if the specified path is an OfflinePlayer.\n <p>\n If the path exists but is not a OfflinePlayer, this will return false.\n If the path does not exist, this will return false. If the path does\n not exist but a default value has been specified, this will check if\n that default value is a OfflinePlayer and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the OfflinePlayer to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getItemStack","comment_text":"Gets the requested ItemStack by path.\n <p>\n If the ItemStack does not exist but a default value has been specified,\n this will return the default value. If the ItemStack does not exist and\n no default value was specified, this will return null.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the ItemStack to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getItemStack","comment_text":"Gets the requested {@link ItemStack} by path, returning a default value\n if not found.\n <p>\n If the ItemStack does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the ItemStack to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not an ItemStack.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"isItemStack","comment_text":"Checks if the specified path is an ItemStack.\n <p>\n If the path exists but is not a ItemStack, this will return false. If\n the path does not exist, this will return false. If the path does not\n exist but a default value has been specified, this will check if that\n default value is a ItemStack and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the ItemStack to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"Gets the requested Color by path.\n <p>\n If the Color does not exist but a default value has been specified,\n this will return the default value. If the Color does not exist and no\n default value was specified, this will return null.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Color to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"Gets the requested {@link Color} by path, returning a default value if\n not found.\n <p>\n If the Color does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Color to get.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"The default value to return if the path is not found or is\n     not a Color.","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"isColor","comment_text":"Checks if the specified path is a Color.\n <p>\n If the path exists but is not a Color, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Color and return appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the Color to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getConfigurationSection","comment_text":"Gets the requested ConfigurationSection by path.\n <p>\n If the ConfigurationSection does not exist but a default value has been\n specified, this will return the default value. If the\n ConfigurationSection does not exist and no default value was specified,\n this will return null.","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the ConfigurationSection to get.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isConfigurationSection","comment_text":"Checks if the specified path is a ConfigurationSection.\n <p>\n If the path exists but is not a ConfigurationSection, this will return\n false. If the path does not exist, this will return false. If the path\n does not exist but a default value has been specified, this will check\n if that default value is a ConfigurationSection and return\n appropriately.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the ConfigurationSection to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDefaultSection","comment_text":"Gets the equivalent {@link ConfigurationSection} from the default\n {@link Configuration} defined in {@link #getRoot()}.\n <p>\n If the root contains no defaults, or the defaults doesn't contain a\n value for this path, or the value at this path is not a {@link\n ConfigurationSection} then this will return null.","return_type":"org.bukkit.configuration.ConfigurationSection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addDefault","comment_text":"Sets the default value in the root at the given path as provided.\n <p>\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n <p>\n If value is null, the value will be removed from the default\n Configuration source.\n <p>\n If the value as returned by {@link #getDefaultSection()} is null, then\n this will create a new section at the path, replacing anything that may\n have existed there previously.","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the value to set.","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"Value to set the default to.","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.ConfigurationOptions","interfaces":[],"superclass":"java.lang.Object","comment_text":"Various settings for controlling the input and output of a {@link\n Configuration}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ConfigurationOptions","comment_text":"","parameters":[{"name":"configuration","comment_text":"","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"configuration","comment_text":"Returns the {@link Configuration} that this object is responsible for.","return_type":"org.bukkit.configuration.Configuration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"pathSeparator","comment_text":"Gets the char that will be used to separate {@link\n ConfigurationSection}s\n <p>\n This value does not affect how the {@link Configuration} is stored,\n only in how you access the data. The default value is '.'.","return_type":"char","return_type_dimension":"","parameters":[],"throws":[]},{"name":"pathSeparator","comment_text":"Sets the char that will be used to separate {@link\n ConfigurationSection}s\n <p>\n This value does not affect how the {@link Configuration} is stored,\n only in how you access the data. The default value is '.'.","return_type":"org.bukkit.configuration.ConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Path separator","type":"char","type_dimension":""}],"throws":[]},{"name":"copyDefaults","comment_text":"Checks if the {@link Configuration} should copy values from its default\n {@link Configuration} directly.\n <p>\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n {@link ConfigurationSection#contains(java.lang.String)} will always\n return the same value as {@link\n ConfigurationSection#isSet(java.lang.String)}. The default value is\n false.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"copyDefaults","comment_text":"Sets if the {@link Configuration} should copy values from its default\n {@link Configuration} directly.\n <p>\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n {@link ConfigurationSection#contains(java.lang.String)} will always\n return the same value as {@link\n ConfigurationSection#isSet(java.lang.String)}. The default value is\n false.","return_type":"org.bukkit.configuration.ConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Whether or not defaults are directly copied","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.Configuration","interfaces":["org.bukkit.configuration.ConfigurationSection"],"superclass":"","comment_text":"Represents a source of configurable options and settings","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"addDefault","comment_text":"Sets the default value of the given path as provided.\n <p>\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n <p>\n If value is null, the value will be removed from the default\n Configuration source.","return_type":"void","return_type_dimension":"","parameters":[{"name":"path","comment_text":"Path of the value to set.","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"Value to set the default to.","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"addDefaults","comment_text":"Sets the default values of the given paths as provided.\n <p>\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default values.","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"A map of Path{@literal ->}Values to add to defaults.","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"addDefaults","comment_text":"Sets the default values of the given paths as provided.\n <p>\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n <p>\n This method will not hold a reference to the specified Configuration,\n nor will it automatically update if that Configuration ever changes. If\n you require this, you should set the default source with {@link\n #setDefaults(org.bukkit.configuration.Configuration)}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"A configuration holding a list of defaults to copy.","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]},{"name":"setDefaults","comment_text":"Sets the source of all default values for this {@link Configuration}.\n <p>\n If a previous source was set, or previous default values were defined,\n then they will not be copied to the new source.","return_type":"void","return_type_dimension":"","parameters":[{"name":"defaults","comment_text":"New source of default values for this configuration.","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]},{"name":"getDefaults","comment_text":"Gets the source {@link Configuration} for this configuration.\n <p>\n If no configuration source was set, but default values were added, then\n a {@link MemoryConfiguration} will be returned. If no source was set\n and no defaults were set, then this method will return null.","return_type":"org.bukkit.configuration.Configuration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"options","comment_text":"Gets the {@link ConfigurationOptions} for this {@link Configuration}.\n <p>\n All setters through this method are chainable.","return_type":"org.bukkit.configuration.ConfigurationOptions","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.file.YamlRepresenter","interfaces":[],"superclass":"Representer","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"YamlRepresenter","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.file.YamlConstructor","interfaces":[],"superclass":"SafeConstructor","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"YamlConstructor","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.file.YamlConfigurationOptions","interfaces":[],"superclass":"org.bukkit.configuration.file.FileConfigurationOptions","comment_text":"Various settings for controlling the input and output of a {@link\n YamlConfiguration}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"YamlConfigurationOptions","comment_text":"","parameters":[{"name":"configuration","comment_text":"","type":"org.bukkit.configuration.file.YamlConfiguration","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"configuration","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfiguration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"copyDefaults","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"pathSeparator","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"char","type_dimension":""}],"throws":[]},{"name":"header","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"copyHeader","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"indent","comment_text":"Gets how much spaces should be used to indent each line.\n <p>\n The minimum value this may be is 2, and the maximum is 9.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"indent","comment_text":"Sets how much spaces should be used to indent each line.\n <p>\n The minimum value this may be is 2, and the maximum is 9.","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"New indent","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.file.YamlConfiguration","interfaces":[],"superclass":"org.bukkit.configuration.file.FileConfiguration","comment_text":"An implementation of {@link Configuration} which saves all files in Yaml.\n Note that this implementation is not synchronized.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"YamlConfiguration","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"COMMENT_PREFIX","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"BLANK_CONFIG","comment_text":"","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"saveToString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"loadFromString","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"contents","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.configuration.InvalidConfigurationException","comment_text":""}]},{"name":"convertMapsToSections","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"input","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"section","comment_text":"","type":"org.bukkit.configuration.ConfigurationSection","type_dimension":""}],"throws":[]},{"name":"parseHeader","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"buildHeader","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"options","comment_text":"","return_type":"org.bukkit.configuration.file.YamlConfigurationOptions","return_type_dimension":"","parameters":[],"throws":[]},{"name":"loadConfiguration","comment_text":"Creates a new {@link YamlConfiguration}, loading from the given file.\n <p>\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.\n <p>\n The encoding used may follow the system dependent default.","return_type":"org.bukkit.configuration.file.YamlConfiguration","return_type_dimension":"","parameters":[{"name":"file","comment_text":"Input file","type":"java.io.File","type_dimension":""}],"throws":[]},{"name":"loadConfiguration","comment_text":"Creates a new {@link YamlConfiguration}, loading from the given reader.\n <p>\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.","return_type":"org.bukkit.configuration.file.YamlConfiguration","return_type_dimension":"","parameters":[{"name":"reader","comment_text":"input","type":"java.io.Reader","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.file.FileConfigurationOptions","interfaces":[],"superclass":"org.bukkit.configuration.MemoryConfigurationOptions","comment_text":"Various settings for controlling the input and output of a {@link\n FileConfiguration}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FileConfigurationOptions","comment_text":"","parameters":[{"name":"configuration","comment_text":"","type":"org.bukkit.configuration.MemoryConfiguration","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"configuration","comment_text":"","return_type":"org.bukkit.configuration.file.FileConfiguration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"copyDefaults","comment_text":"","return_type":"org.bukkit.configuration.file.FileConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"pathSeparator","comment_text":"","return_type":"org.bukkit.configuration.file.FileConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"char","type_dimension":""}],"throws":[]},{"name":"header","comment_text":"Gets the header that will be applied to the top of the saved output.\n <p>\n This header will be commented out and applied directly at the top of\n the generated output of the {@link FileConfiguration}. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n <p>\n Null is a valid value which will indicate that no header is to be\n applied. The default value is null.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"header","comment_text":"Sets the header that will be applied to the top of the saved output.\n <p>\n This header will be commented out and applied directly at the top of\n the generated output of the {@link FileConfiguration}. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n <p>\n Null is a valid value which will indicate that no header is to be\n applied.","return_type":"org.bukkit.configuration.file.FileConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"New header","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"copyHeader","comment_text":"Gets whether or not the header should be copied from a default source.\n <p>\n If this is true, if a default {@link FileConfiguration} is passed to\n {@link\n FileConfiguration#setDefaults(org.bukkit.configuration.Configuration)}\n then upon saving it will use the header from that config, instead of\n the one provided here.\n <p>\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header ({@link #header()}\n returns null) then the header specified in this configuration will be\n used.\n <p>\n Defaults to true.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"copyHeader","comment_text":"Sets whether or not the header should be copied from a default source.\n <p>\n If this is true, if a default {@link FileConfiguration} is passed to\n {@link\n FileConfiguration#setDefaults(org.bukkit.configuration.Configuration)}\n then upon saving it will use the header from that config, instead of\n the one provided here.\n <p>\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header ({@link #header()}\n returns null) then the header specified in this configuration will be\n used.\n <p>\n Defaults to true.","return_type":"org.bukkit.configuration.file.FileConfigurationOptions","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Whether or not to copy the header","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.file.FileConfiguration","interfaces":[],"superclass":"org.bukkit.configuration.MemoryConfiguration","comment_text":"This is a base class for all File based implementations of {@link\n Configuration}","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FileConfiguration","comment_text":"Creates an empty {@link FileConfiguration} with no default values.","parameters":[],"throws":[]},{"name":"FileConfiguration","comment_text":"Creates an empty {@link FileConfiguration} using the specified {@link\n Configuration} as a source for all default values.","parameters":[{"name":"defaults","comment_text":"Default value provider","type":"org.bukkit.configuration.Configuration","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"save","comment_text":"Saves this {@link FileConfiguration} to the specified location.\n <p>\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n <p>\n This method will save using the system default encoding, or possibly\n using UTF8.","return_type":"void","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to save to.","type":"java.io.File","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":"Thrown when the given file cannot be written to for\n     any reason."}]},{"name":"save","comment_text":"Saves this {@link FileConfiguration} to the specified location.\n <p>\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n <p>\n This method will save using the system default encoding, or possibly\n using UTF8.","return_type":"void","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to save to.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":"Thrown when the given file cannot be written to for\n     any reason."}]},{"name":"saveToString","comment_text":"Saves this {@link FileConfiguration} to a string, and returns it.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"load","comment_text":"Loads this {@link FileConfiguration} from the specified location.\n <p>\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n <p>\n If the file cannot be loaded for any reason, an exception will be\n thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to load from.","type":"java.io.File","type_dimension":""}],"throws":[{"name":"java.io.FileNotFoundException","comment_text":"Thrown when the given file cannot be\n     opened."},{"name":"java.io.IOException","comment_text":"Thrown when the given file cannot be read."},{"name":"org.bukkit.configuration.InvalidConfigurationException","comment_text":"Thrown when the given file is not\n     a valid Configuration."}]},{"name":"load","comment_text":"Loads this {@link FileConfiguration} from the specified reader.\n <p>\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given stream.","return_type":"void","return_type_dimension":"","parameters":[{"name":"reader","comment_text":"the reader to load from","type":"java.io.Reader","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":"thrown when underlying reader throws an IOException"},{"name":"org.bukkit.configuration.InvalidConfigurationException","comment_text":"thrown when the reader does not\n      represent a valid Configuration"}]},{"name":"load","comment_text":"Loads this {@link FileConfiguration} from the specified location.\n <p>\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n <p>\n If the file cannot be loaded for any reason, an exception will be\n thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to load from.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.io.FileNotFoundException","comment_text":"Thrown when the given file cannot be\n     opened."},{"name":"java.io.IOException","comment_text":"Thrown when the given file cannot be read."},{"name":"org.bukkit.configuration.InvalidConfigurationException","comment_text":"Thrown when the given file is not\n     a valid Configuration."}]},{"name":"loadFromString","comment_text":"Loads this {@link FileConfiguration} from the specified string, as\n opposed to from file.\n <p>\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given string.\n <p>\n If the string is invalid in any way, an exception will be thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"contents","comment_text":"Contents of a Configuration to load.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"org.bukkit.configuration.InvalidConfigurationException","comment_text":"Thrown if the specified string is\n     invalid."}]},{"name":"buildHeader","comment_text":"Compiles the header for this {@link FileConfiguration} and returns the\n result.\n <p>\n This will use the header from {@link #options()} -&gt; {@link\n FileConfigurationOptions#header()}, respecting the rules of {@link\n FileConfigurationOptions#copyHeader()} if set.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"options","comment_text":"","return_type":"org.bukkit.configuration.file.FileConfigurationOptions","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.serialization.SerializableAs","interfaces":["java.lang.annotation.Annotation"],"superclass":"","comment_text":"Represents an \"alias\" that a {@link ConfigurationSerializable} may be\n stored as.\n If this is not present on a {@link ConfigurationSerializable} class, it\n will use the fully qualified name of the class.\n <p>\n This value will be stored in the configuration so that the configuration\n deserialization can determine what type it is.\n <p>\n Using this annotation on any other class than a {@link\n ConfigurationSerializable} will have no effect.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.configuration.serialization.ConfigurationSerialization"],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.serialization.DelegateDeserialization","interfaces":["java.lang.annotation.Annotation"],"superclass":"","comment_text":"Applies to a {@link ConfigurationSerializable} that will delegate all\n deserialization to another {@link ConfigurationSerializable}.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.configuration.serialization.ConfigurationSerialization","interfaces":[],"superclass":"java.lang.Object","comment_text":"Utility class for storing and retrieving classes for {@link Configuration}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ConfigurationSerialization","comment_text":"","parameters":[{"name":"clazz","comment_text":"","type":"java.lang.Class","type_dimension":""}],"throws":[]}],"fields":[{"name":"SERIALIZED_TYPE_KEY","comment_text":"","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"getMethod","comment_text":"","return_type":"java.lang.reflect.Method","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"isStatic","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getConstructor","comment_text":"","return_type":"java.lang.reflect.Constructor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserializeViaMethod","comment_text":"","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"method","comment_text":"","type":"java.lang.reflect.Method","type_dimension":""},{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"deserializeViaCtor","comment_text":"","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"ctor","comment_text":"","type":"java.lang.reflect.Constructor","type_dimension":""},{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"deserializeObject","comment_text":"Attempts to deserialize the given arguments into a new instance of the\n given class.\n <p>\n The class must implement {@link ConfigurationSerializable}, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n <p>\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"args","comment_text":"Arguments for deserialization","type":"java.util.Map","type_dimension":""},{"name":"clazz","comment_text":"Class to deserialize into","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"deserializeObject","comment_text":"Attempts to deserialize the given arguments into a new instance of the\n given class.\n <p>\n The class must implement {@link ConfigurationSerializable}, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n <p>\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.","return_type":"org.bukkit.configuration.serialization.ConfigurationSerializable","return_type_dimension":"","parameters":[{"name":"args","comment_text":"Arguments for deserialization","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"registerClass","comment_text":"Registers the given {@link ConfigurationSerializable} class by its\n alias","return_type":"void","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"Class to register","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"registerClass","comment_text":"Registers the given alias to the specified {@link\n ConfigurationSerializable} class","return_type":"void","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"Class to register","type":"java.lang.Class","type_dimension":""},{"name":"alias","comment_text":"Alias to register as","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterClass","comment_text":"Unregisters the specified alias to a {@link ConfigurationSerializable}","return_type":"void","return_type_dimension":"","parameters":[{"name":"alias","comment_text":"Alias to unregister","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterClass","comment_text":"Unregisters any aliases for the specified {@link\n ConfigurationSerializable} class","return_type":"void","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"Class to unregister","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getClassByAlias","comment_text":"Attempts to get a registered {@link ConfigurationSerializable} class by\n its alias","return_type":"java.lang.Class","return_type_dimension":"","parameters":[{"name":"alias","comment_text":"Alias of the serializable","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getAlias","comment_text":"Gets the correct alias for the given {@link ConfigurationSerializable}\n class","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"Class to get alias for","type":"java.lang.Class","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.configuration.serialization.ConfigurationSerializable","interfaces":[],"superclass":"","comment_text":"Represents an object that may be serialized.\n <p>\n These objects MUST implement one of the following, in addition to the\n methods as defined by this interface:\n <ul>\n <li>A static method \"deserialize\" that accepts a single {@link Map}&lt;\n {@link String}, {@link Object}&gt; and returns the class.</li>\n <li>A static method \"valueOf\" that accepts a single {@link Map}&lt;{@link\n String}, {@link Object}&gt; and returns the class.</li>\n <li>A constructor that accepts a single {@link Map}&lt;{@link String},\n {@link Object}&gt;.</li>\n </ul>\n In addition to implementing this interface, you must register the class\n with {@link ConfigurationSerialization#registerClass(Class)}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":["org.bukkit.configuration.serialization.DelegateDeserialization","org.bukkit.configuration.serialization.SerializableAs"],"constructors":[],"fields":[],"methods":[{"name":"serialize","comment_text":"Creates a Map representation of this class.\n <p>\n This class must provide a method to restore this class, as defined in\n the {@link ConfigurationSerializable} interface javadocs.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ValidatingPrompt","interfaces":["org.bukkit.conversations.Prompt"],"superclass":"java.lang.Object","comment_text":"ValidatingPrompt is the base class for any prompt that requires validation.\n ValidatingPrompt will keep replaying the prompt text until the user enters\n a valid response.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ValidatingPrompt","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"acceptInput","comment_text":"Accepts and processes input from the user and validates it. If\n validation fails, this prompt is returned for re-execution, otherwise\n the next Prompt in the prompt graph is returned.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The input text from the user.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"blocksForInput","comment_text":"Ensures that the prompt waits for the user to provide input.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]},{"name":"isInputValid","comment_text":"Override this method to check the validity of the player's input.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The player's raw console input.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"Override this method to accept and processes the validated input from\n the user. Using the input, the next Prompt in the prompt graph should\n be returned.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The validated input text from the user.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFailedValidationText","comment_text":"Optionally override this method to display an additional message if the\n user enters an invalid input.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"invalidInput","comment_text":"The invalid input provided by the user.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.StringPrompt","interfaces":["org.bukkit.conversations.Prompt"],"superclass":"java.lang.Object","comment_text":"StringPrompt is the base class for any prompt that accepts an arbitrary\n string from the user.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"StringPrompt","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"blocksForInput","comment_text":"Ensures that the prompt waits for the user to provide input.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.RegexPrompt","interfaces":[],"superclass":"org.bukkit.conversations.ValidatingPrompt","comment_text":"RegexPrompt is the base class for any prompt that requires an input\n validated by a regular expression.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RegexPrompt","comment_text":"","parameters":[{"name":"regex","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"RegexPrompt","comment_text":"","parameters":[{"name":"pattern","comment_text":"","type":"java.util.regex.Pattern","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isInputValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.Prompt","interfaces":["java.lang.Cloneable"],"superclass":"","comment_text":"A Prompt is the main constituent of a {@link Conversation}. Each prompt\n displays text to the user and optionally waits for a user's response.\n Prompts are chained together into a directed graph that represents the\n conversation flow. To halt a conversation, END_OF_CONVERSATION is returned\n in liu of another Prompt object.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"END_OF_CONVERSATION","comment_text":"A convenience constant for indicating the end of a conversation.","type":"org.bukkit.conversations.Prompt","type_dimension":""}],"methods":[{"name":"getPromptText","comment_text":"Gets the text to display to the user when this prompt is first\n presented.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]},{"name":"blocksForInput","comment_text":"Checks to see if this prompt implementation should wait for user input\n or immediately display the next prompt.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]},{"name":"acceptInput","comment_text":"Accepts and processes input from the user. Using the input, the next\n Prompt in the prompt graph is returned.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The input text from the user.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.PluginNameConversationPrefix","interfaces":["org.bukkit.conversations.ConversationPrefix"],"superclass":"java.lang.Object","comment_text":"PluginNameConversationPrefix is a {@link ConversationPrefix} implementation\n that displays the plugin name in front of conversation output.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginNameConversationPrefix","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"PluginNameConversationPrefix","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"separator","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"prefixColor","comment_text":"","type":"org.bukkit.ChatColor","type_dimension":""}],"throws":[]}],"fields":[{"name":"separator","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"prefixColor","comment_text":"","type":"org.bukkit.ChatColor","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"methods":[{"name":"getPrefix","comment_text":"Prepends each conversation message with the plugin name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.PlayerNamePrompt","interfaces":[],"superclass":"org.bukkit.conversations.ValidatingPrompt","comment_text":"PlayerNamePrompt is the base class for any prompt that requires the player\n to enter another player's name.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerNamePrompt","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isInputValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"Override this method to perform some action with the user's player name\n response.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The user's player name response.","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.NumericPrompt","interfaces":[],"superclass":"org.bukkit.conversations.ValidatingPrompt","comment_text":"NumericPrompt is the base class for any prompt that requires a {@link\n Number} response from the user.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NumericPrompt","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"isInputValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isNumberValid","comment_text":"Override this method to do further validation on the numeric player\n input after the input has been determined to actually be a number.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The number the player provided.","type":"java.lang.Number","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"Override this method to perform some action with the user's integer\n response.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The user's response as a {@link Number}.","type":"java.lang.Number","type_dimension":""}],"throws":[]},{"name":"getFailedValidationText","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"invalidInput","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getInputNotNumericText","comment_text":"Optionally override this method to display an additional message if the\n user enters an invalid number.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"invalidInput","comment_text":"The invalid input provided by the user.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFailedValidationText","comment_text":"Optionally override this method to display an additional message if the\n user enters an invalid numeric input.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"invalidInput","comment_text":"The invalid input provided by the user.","type":"java.lang.Number","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.NullConversationPrefix","interfaces":["org.bukkit.conversations.ConversationPrefix"],"superclass":"java.lang.Object","comment_text":"NullConversationPrefix is a {@link ConversationPrefix} implementation that\n displays nothing in front of conversation output.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NullConversationPrefix","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"getPrefix","comment_text":"Prepends each conversation message with an empty string.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.MessagePrompt","interfaces":["org.bukkit.conversations.Prompt"],"superclass":"java.lang.Object","comment_text":"MessagePrompt is the base class for any prompt that only displays a message\n to the user and requires no input.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MessagePrompt","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"blocksForInput","comment_text":"Message prompts never wait for user input before continuing.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]},{"name":"acceptInput","comment_text":"Accepts and ignores any user input, returning the next prompt in the\n prompt graph instead.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"Ignored.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getNextPrompt","comment_text":"Override this method to return the next prompt in the prompt graph.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ManuallyAbandonedConversationCanceller","interfaces":["org.bukkit.conversations.ConversationCanceller"],"superclass":"java.lang.Object","comment_text":"The ManuallyAbandonedConversationCanceller is only used as part of a {@link\n ConversationAbandonedEvent} to indicate that the conversation was manually\n abandoned by programmatically calling the abandon() method on it.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ManuallyAbandonedConversationCanceller","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"setConversation","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"cancelBasedOnInput","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.conversations.ConversationCanceller","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.InactivityConversationCanceller","interfaces":["org.bukkit.conversations.ConversationCanceller"],"superclass":"java.lang.Object","comment_text":"An InactivityConversationCanceller will cancel a {@link Conversation} after\n a period of inactivity by the user.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InactivityConversationCanceller","comment_text":"Creates an InactivityConversationCanceller.","parameters":[{"name":"plugin","comment_text":"The owning plugin.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"timeoutSeconds","comment_text":"The number of seconds of inactivity to wait.","type":"int","type_dimension":""}],"throws":[]}],"fields":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"timeoutSeconds","comment_text":"","type":"int","type_dimension":""},{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"methods":[{"name":"setConversation","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"cancelBasedOnInput","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.conversations.ConversationCanceller","return_type_dimension":"","parameters":[],"throws":[]},{"name":"cancelling","comment_text":"Subclasses of InactivityConversationCanceller can override this method\n to take additional actions when the inactivity timer abandons the\n conversation.","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"The conversation being abandoned.","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.FixedSetPrompt","interfaces":[],"superclass":"org.bukkit.conversations.ValidatingPrompt","comment_text":"FixedSetPrompt is the base class for any prompt that requires a fixed set\n response from the user.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FixedSetPrompt","comment_text":"Creates a FixedSetPrompt from a set of strings.\n <p>\n foo = new FixedSetPrompt(\"bar\", \"cheese\", \"panda\");","parameters":[{"name":"fixedSet","comment_text":"A fixed set of strings, one of which the user must\n     type.","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"fields":[{"name":"fixedSet","comment_text":"","type":"java.util.List","type_dimension":""}],"methods":[{"name":"isInputValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"formatFixedSet","comment_text":"Utility function to create a formatted string containing all the\n options declared in the constructor.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ExactMatchConversationCanceller","interfaces":["org.bukkit.conversations.ConversationCanceller"],"superclass":"java.lang.Object","comment_text":"An ExactMatchConversationCanceller cancels a conversation if the user\n enters an exact input string","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ExactMatchConversationCanceller","comment_text":"Builds an ExactMatchConversationCanceller.","parameters":[{"name":"escapeSequence","comment_text":"The string that, if entered by the user, will\n     cancel the conversation.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setConversation","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"cancelBasedOnInput","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.conversations.ConversationCanceller","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationPrefix","interfaces":[],"superclass":"","comment_text":"A ConversationPrefix implementation prepends all output from the\n conversation to the player. The ConversationPrefix can be used to display\n the plugin name or conversation status as the conversation evolves.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPrefix","comment_text":"Gets the prefix to use before each message to the player.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationFactory","interfaces":[],"superclass":"java.lang.Object","comment_text":"A ConversationFactory is responsible for creating a {@link Conversation}\n from a predefined template. A ConversationFactory is typically created when\n a plugin is instantiated and builds a Conversation each time a user\n initiates a conversation with the plugin. Each Conversation maintains its\n own state and calls back as needed into the plugin.\n <p>\n The ConversationFactory implements a fluid API, allowing parameters to be\n set as an extension to the constructor.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ConversationFactory","comment_text":"Constructs a ConversationFactory.","parameters":[{"name":"plugin","comment_text":"The plugin that owns the factory.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"isModal","comment_text":"","type":"boolean","type_dimension":""},{"name":"localEchoEnabled","comment_text":"","type":"boolean","type_dimension":""},{"name":"prefix","comment_text":"","type":"org.bukkit.conversations.ConversationPrefix","type_dimension":""},{"name":"firstPrompt","comment_text":"","type":"org.bukkit.conversations.Prompt","type_dimension":""},{"name":"initialSessionData","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"playerOnlyMessage","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"cancellers","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"abandonedListeners","comment_text":"","type":"java.util.List","type_dimension":""}],"methods":[{"name":"withModality","comment_text":"Sets the modality of all {@link Conversation}s created by this factory.\n If a conversation is modal, all messages directed to the player are\n suppressed for the duration of the conversation.\n <p>\n The default is True.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"modal","comment_text":"The modality of all conversations to be created.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"withLocalEcho","comment_text":"Sets the local echo status for all {@link Conversation}s created by\n this factory. If local echo is enabled, any text submitted to a\n conversation gets echoed back into the submitter's chat window.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"localEchoEnabled","comment_text":"The status of local echo.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"withPrefix","comment_text":"Sets the {@link ConversationPrefix} that prepends all output from all\n generated conversations.\n <p>\n The default is a {@link NullConversationPrefix};","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"prefix","comment_text":"The ConversationPrefix to use.","type":"org.bukkit.conversations.ConversationPrefix","type_dimension":""}],"throws":[]},{"name":"withTimeout","comment_text":"Sets the number of inactive seconds to wait before automatically\n abandoning all generated conversations.\n <p>\n The default is 600 seconds (5 minutes).","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"timeoutSeconds","comment_text":"The number of seconds to wait.","type":"int","type_dimension":""}],"throws":[]},{"name":"withFirstPrompt","comment_text":"Sets the first prompt to use in all generated conversations.\n <p>\n The default is Prompt.END_OF_CONVERSATION.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"firstPrompt","comment_text":"The first prompt.","type":"org.bukkit.conversations.Prompt","type_dimension":""}],"throws":[]},{"name":"withInitialSessionData","comment_text":"Sets any initial data with which to populate the conversation context\n sessionData map.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"initialSessionData","comment_text":"The conversation context's initial\n     sessionData.","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"withEscapeSequence","comment_text":"Sets the player input that, when received, will immediately terminate\n the conversation.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"escapeSequence","comment_text":"Input to terminate the conversation.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"withConversationCanceller","comment_text":"Adds a {@link ConversationCanceller} to constructed conversations.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"canceller","comment_text":"The {@link ConversationCanceller} to add.","type":"org.bukkit.conversations.ConversationCanceller","type_dimension":""}],"throws":[]},{"name":"thatExcludesNonPlayersWithMessage","comment_text":"Prevents this factory from creating a conversation for non-player\n {@link Conversable} objects.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"playerOnlyMessage","comment_text":"The message to return to a non-play in lieu of\n     starting a conversation.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"addConversationAbandonedListener","comment_text":"Adds a {@link ConversationAbandonedListener} to all conversations\n constructed by this factory.","return_type":"org.bukkit.conversations.ConversationFactory","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"The listener to add.","type":"org.bukkit.conversations.ConversationAbandonedListener","type_dimension":""}],"throws":[]},{"name":"buildConversation","comment_text":"Constructs a {@link Conversation} in accordance with the defaults set\n for this factory.","return_type":"org.bukkit.conversations.Conversation","return_type_dimension":"","parameters":[{"name":"forWhom","comment_text":"The entity for whom the new conversation is mediating.","type":"org.bukkit.conversations.Conversable","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationContext","interfaces":[],"superclass":"java.lang.Object","comment_text":"A ConversationContext provides continuity between nodes in the prompt graph\n by giving the developer access to the subject of the conversation and a\n generic map for storing values that are shared between all {@link Prompt}\n invocations.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ConversationContext","comment_text":"","parameters":[{"name":"plugin","comment_text":"The owning plugin.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"forWhom","comment_text":"The subject of the conversation.","type":"org.bukkit.conversations.Conversable","type_dimension":""},{"name":"initialSessionData","comment_text":"Any initial values to put in the sessionData\n     map.","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlugin","comment_text":"Gets the plugin that owns this conversation.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getForWhom","comment_text":"Gets the subject of the conversation.","return_type":"org.bukkit.conversations.Conversable","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSessionData","comment_text":"Gets session data shared between all {@link Prompt} invocations. Use\n this as a way to pass data through each Prompt as the conversation\n develops.","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"key","comment_text":"The session data key.","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"setSessionData","comment_text":"Sets session data shared between all {@link Prompt} invocations. Use\n this as a way to pass data through each prompt as the conversation\n develops.","return_type":"void","return_type_dimension":"","parameters":[{"name":"key","comment_text":"The session data key.","type":"java.lang.Object","type_dimension":""},{"name":"value","comment_text":"The session data value.","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationCanceller","interfaces":["java.lang.Cloneable"],"superclass":"","comment_text":"A ConversationCanceller is a class that cancels an active {@link\n Conversation}. A Conversation can have more than one ConversationCanceller.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setConversation","comment_text":"Sets the conversation this ConversationCanceller can optionally cancel.","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"A conversation.","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"cancelBasedOnInput","comment_text":"Cancels a conversation based on user input.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The input text from the user.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"Allows the {@link ConversationFactory} to duplicate this\n ConversationCanceller when creating a new {@link Conversation}.\n <p>\n Implementing this method should reset any internal object state.","return_type":"org.bukkit.conversations.ConversationCanceller","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationAbandonedListener","interfaces":["java.util.EventListener"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"conversationAbandoned","comment_text":"Called whenever a {@link Conversation} is abandoned.","return_type":"void","return_type_dimension":"","parameters":[{"name":"abandonedEvent","comment_text":"Contains details about the abandoned\n     conversation.","type":"org.bukkit.conversations.ConversationAbandonedEvent","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.ConversationAbandonedEvent","interfaces":[],"superclass":"java.util.EventObject","comment_text":"ConversationAbandonedEvent contains information about an abandoned\n conversation.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ConversationAbandonedEvent","comment_text":"","parameters":[{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"ConversationAbandonedEvent","comment_text":"","parameters":[{"name":"conversation","comment_text":"","type":"org.bukkit.conversations.Conversation","type_dimension":""},{"name":"canceller","comment_text":"","type":"org.bukkit.conversations.ConversationCanceller","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCanceller","comment_text":"Gets the object that caused the conversation to be abandoned.","return_type":"org.bukkit.conversations.ConversationCanceller","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getContext","comment_text":"Gets the abandoned conversation's conversation context.","return_type":"org.bukkit.conversations.ConversationContext","return_type_dimension":"","parameters":[],"throws":[]},{"name":"gracefulExit","comment_text":"Indicates how the conversation was abandoned - naturally as part of the\n prompt chain or prematurely via a {@link ConversationCanceller}.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.Conversation","interfaces":[],"superclass":"java.lang.Object","comment_text":"The Conversation class is responsible for tracking the current state of a\n conversation, displaying prompts to the user, and dispatching the user's\n response to the appropriate place. Conversation objects are not typically\n instantiated directly. Instead a {@link ConversationFactory} is used to\n construct identical conversations on demand.\n <p>\n Conversation flow consists of a directed graph of {@link Prompt} objects.\n Each time a prompt gets input from the user, it must return the next prompt\n in the graph. Since each Prompt chooses the next Prompt, complex\n conversation trees can be implemented where the nature of the player's\n response directs the flow of the conversation.\n <p>\n Each conversation has a {@link ConversationPrefix} that prepends all output\n from the conversation to the player. The ConversationPrefix can be used to\n display the plugin name or conversation status as the conversation evolves.\n <p>\n Each conversation has a timeout measured in the number of inactive seconds\n to wait before abandoning the conversation. If the inactivity timeout is\n reached, the conversation is abandoned and the user's incoming and outgoing\n chat is returned to normal.\n <p>\n You should not construct a conversation manually. Instead, use the {@link\n ConversationFactory} for access to all available options.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Conversation","comment_text":"Initializes a new Conversation.","parameters":[{"name":"plugin","comment_text":"The plugin that owns this conversation.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"forWhom","comment_text":"The entity for whom this conversation is mediating.","type":"org.bukkit.conversations.Conversable","type_dimension":""},{"name":"firstPrompt","comment_text":"The first prompt in the conversation graph.","type":"org.bukkit.conversations.Prompt","type_dimension":""}],"throws":[]},{"name":"Conversation","comment_text":"Initializes a new Conversation.","parameters":[{"name":"plugin","comment_text":"The plugin that owns this conversation.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"forWhom","comment_text":"The entity for whom this conversation is mediating.","type":"org.bukkit.conversations.Conversable","type_dimension":""},{"name":"firstPrompt","comment_text":"The first prompt in the conversation graph.","type":"org.bukkit.conversations.Prompt","type_dimension":""},{"name":"initialSessionData","comment_text":"Any initial values to put in the conversation\n     context sessionData map.","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[{"name":"currentPrompt","comment_text":"","type":"org.bukkit.conversations.Prompt","type_dimension":""},{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"modal","comment_text":"","type":"boolean","type_dimension":""},{"name":"localEchoEnabled","comment_text":"","type":"boolean","type_dimension":""},{"name":"prefix","comment_text":"","type":"org.bukkit.conversations.ConversationPrefix","type_dimension":""},{"name":"cancellers","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"abandonedListeners","comment_text":"","type":"java.util.List","type_dimension":""}],"methods":[{"name":"getForWhom","comment_text":"Gets the entity for whom this conversation is mediating.","return_type":"org.bukkit.conversations.Conversable","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isModal","comment_text":"Gets the modality of this conversation. If a conversation is modal, all\n messages directed to the player are suppressed for the duration of the\n conversation.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLocalEchoEnabled","comment_text":"Gets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter's chat window.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLocalEchoEnabled","comment_text":"Sets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter's chat window.","return_type":"void","return_type_dimension":"","parameters":[{"name":"localEchoEnabled","comment_text":"The status of local echo.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPrefix","comment_text":"Gets the {@link ConversationPrefix} that prepends all output from this\n conversation.","return_type":"org.bukkit.conversations.ConversationPrefix","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCancellers","comment_text":"Gets the list of {@link ConversationCanceller}s","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getContext","comment_text":"Returns the Conversation's {@link ConversationContext}.","return_type":"org.bukkit.conversations.ConversationContext","return_type_dimension":"","parameters":[],"throws":[]},{"name":"begin","comment_text":"Displays the first prompt of this conversation and begins redirecting\n the user's chat responses.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getState","comment_text":"Returns Returns the current state of the conversation.","return_type":"org.bukkit.conversations.Conversation.ConversationState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"acceptInput","comment_text":"Passes player input into the current prompt. The next prompt (as\n determined by the current prompt) is then displayed to the user.","return_type":"void","return_type_dimension":"","parameters":[{"name":"input","comment_text":"The user's chat text.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"addConversationAbandonedListener","comment_text":"Adds a {@link ConversationAbandonedListener}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"The listener to add.","type":"org.bukkit.conversations.ConversationAbandonedListener","type_dimension":""}],"throws":[]},{"name":"removeConversationAbandonedListener","comment_text":"Removes a {@link ConversationAbandonedListener}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"The listener to remove.","type":"org.bukkit.conversations.ConversationAbandonedListener","type_dimension":""}],"throws":[]},{"name":"abandon","comment_text":"Abandons and resets the current conversation. Restores the user's\n normal chat behavior.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"abandon","comment_text":"Abandons and resets the current conversation. Restores the user's\n normal chat behavior.","return_type":"void","return_type_dimension":"","parameters":[{"name":"details","comment_text":"Details about why the conversation was abandoned","type":"org.bukkit.conversations.ConversationAbandonedEvent","type_dimension":""}],"throws":[]},{"name":"outputNextPrompt","comment_text":"Displays the next user prompt and abandons the conversation if the next\n prompt is null.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.Conversation.ConversationState","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.conversations.Conversation.ConversationState","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.conversations.Conversation.ConversationState","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["UNSTARTED","STARTED","ABANDONED"]},{"name":"org.bukkit.conversations.Conversable","interfaces":[],"superclass":"","comment_text":"The Conversable interface is used to indicate objects that can have\n conversations.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isConversing","comment_text":"Tests to see of a Conversable object is actively engaged in a\n conversation.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"acceptConversationInput","comment_text":"Accepts input into the active conversation. If no conversation is in\n progress, this method does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"input","comment_text":"The input message into the conversation","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"beginConversation","comment_text":"Enters into a dialog with a Conversation object.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"The conversation to begin","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"abandonConversation","comment_text":"Abandons an active conversation.","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"The conversation to abandon","type":"org.bukkit.conversations.Conversation","type_dimension":""}],"throws":[]},{"name":"abandonConversation","comment_text":"Abandons an active conversation.","return_type":"void","return_type_dimension":"","parameters":[{"name":"conversation","comment_text":"The conversation to abandon","type":"org.bukkit.conversations.Conversation","type_dimension":""},{"name":"details","comment_text":"Details about why the conversation was abandoned","type":"org.bukkit.conversations.ConversationAbandonedEvent","type_dimension":""}],"throws":[]},{"name":"sendRawMessage","comment_text":"Sends this sender a message raw","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"Message to be displayed","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.conversations.BooleanPrompt","interfaces":[],"superclass":"org.bukkit.conversations.ValidatingPrompt","comment_text":"BooleanPrompt is the base class for any prompt that requires a boolean\n response from the user.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BooleanPrompt","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"isInputValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"acceptValidatedInput","comment_text":"Override this method to perform some action with the user's boolean\n response.","return_type":"org.bukkit.conversations.Prompt","return_type_dimension":"","parameters":[{"name":"context","comment_text":"Context information about the conversation.","type":"org.bukkit.conversations.ConversationContext","type_dimension":""},{"name":"input","comment_text":"The user's boolean response.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.enchantments.EnchantmentWrapper","interfaces":[],"superclass":"org.bukkit.enchantments.Enchantment","comment_text":"A simple wrapper for ease of selecting {@link Enchantment}s","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EnchantmentWrapper","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEnchantment","comment_text":"Gets the enchantment bound to this wrapper","return_type":"org.bukkit.enchantments.Enchantment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxLevel","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getStartLevel","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemTarget","comment_text":"","return_type":"org.bukkit.enchantments.EnchantmentTarget","return_type_dimension":"","parameters":[],"throws":[]},{"name":"canEnchantItem","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isTreasure","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCursed","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"conflictsWith","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"other","comment_text":"","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.enchantments.EnchantmentTarget","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the applicable target for a {@link Enchantment}","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.enchantments.EnchantmentTarget","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.enchantments.EnchantmentTarget","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"includes","comment_text":"Check whether this target includes the specified item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to check","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"includes","comment_text":"Check whether this target includes the specified item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to check","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":["ALL","ARMOR","ARMOR_FEET","ARMOR_LEGS","ARMOR_TORSO","ARMOR_HEAD","WEAPON","TOOL","BOW","FISHING_ROD","BREAKABLE","WEARABLE","TRIDENT"]},{"name":"org.bukkit.enchantments.EnchantmentOffer","interfaces":[],"superclass":"java.lang.Object","comment_text":"A class for the available enchantment offers in the enchantment table.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EnchantmentOffer","comment_text":"","parameters":[{"name":"enchantment","comment_text":"","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"enchantmentLevel","comment_text":"","type":"int","type_dimension":""},{"name":"cost","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEnchantment","comment_text":"Get the type of the enchantment.","return_type":"org.bukkit.enchantments.Enchantment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEnchantment","comment_text":"Sets the type of the enchantment.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enchantment","comment_text":"type of the enchantment","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getEnchantmentLevel","comment_text":"Gets the level of the enchantment.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEnchantmentLevel","comment_text":"Sets the level of the enchantment.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enchantmentLevel","comment_text":"level of the enchantment","type":"int","type_dimension":""}],"throws":[]},{"name":"getCost","comment_text":"Gets the cost in experience levels the player has to pay to enchant his\n item with this enchantment.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCost","comment_text":"Sets the cost in experience levels the player has to pay to enchant his\n item with this enchantment","return_type":"void","return_type_dimension":"","parameters":[{"name":"cost","comment_text":"cost for this enchantment","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.enchantments.Enchantment","interfaces":["org.bukkit.Keyed"],"superclass":"java.lang.Object","comment_text":"The various type of enchantments that may be added to armour or weapons","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Enchantment","comment_text":"","parameters":[{"name":"key","comment_text":"","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]}],"fields":[{"name":"PROTECTION_ENVIRONMENTAL","comment_text":"Provides protection against environmental damage","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"PROTECTION_FIRE","comment_text":"Provides protection against fire damage","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"PROTECTION_FALL","comment_text":"Provides protection against fall damage","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"PROTECTION_EXPLOSIONS","comment_text":"Provides protection against explosive damage","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"PROTECTION_PROJECTILE","comment_text":"Provides protection against projectile damage","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"OXYGEN","comment_text":"Decreases the rate of air loss whilst underwater","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"WATER_WORKER","comment_text":"Increases the speed at which a player may mine underwater","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"THORNS","comment_text":"Damages the attacker","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DEPTH_STRIDER","comment_text":"Increases walking speed while in water","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"FROST_WALKER","comment_text":"Freezes any still water adjacent to ice / frost which player is walking on","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"BINDING_CURSE","comment_text":"Item cannot be removed","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DAMAGE_ALL","comment_text":"Increases damage against all targets","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DAMAGE_UNDEAD","comment_text":"Increases damage against undead targets","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DAMAGE_ARTHROPODS","comment_text":"Increases damage against arthropod targets","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"KNOCKBACK","comment_text":"All damage to other targets will knock them back when hit","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"FIRE_ASPECT","comment_text":"When attacking a target, has a chance to set them on fire","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"LOOT_BONUS_MOBS","comment_text":"Provides a chance of gaining extra loot when killing monsters","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"SWEEPING_EDGE","comment_text":"Increases damage against targets when using a sweep attack","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DIG_SPEED","comment_text":"Increases the rate at which you mine/dig","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"SILK_TOUCH","comment_text":"Allows blocks to drop themselves instead of fragments (for example,\n stone instead of cobblestone)","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"DURABILITY","comment_text":"Decreases the rate at which a tool looses durability","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"LOOT_BONUS_BLOCKS","comment_text":"Provides a chance of gaining extra loot when destroying blocks","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"ARROW_DAMAGE","comment_text":"Provides extra damage when shooting arrows from bows","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"ARROW_KNOCKBACK","comment_text":"Provides a knockback when an entity is hit by an arrow from a bow","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"ARROW_FIRE","comment_text":"Sets entities on fire when hit by arrows shot from a bow","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"ARROW_INFINITE","comment_text":"Provides infinite arrows when shooting a bow","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"LUCK","comment_text":"Decreases odds of catching worthless junk","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"LURE","comment_text":"Increases rate of fish biting your hook","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"LOYALTY","comment_text":"Causes a thrown trident to return to the player who threw it","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"IMPALING","comment_text":"Deals more damage to mobs that live in the ocean","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"RIPTIDE","comment_text":"When it is rainy, launches the player in the direction their trident is thrown","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"CHANNELING","comment_text":"Strikes lightning when a mob is hit with a trident if conditions are\n stormy","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"MENDING","comment_text":"Allows mending the item using experience orbs","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"VANISHING_CURSE","comment_text":"Item disappears instead of dropping","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"methods":[{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Gets the unique name of this enchantment","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxLevel","comment_text":"Gets the maximum level that this Enchantment may become.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getStartLevel","comment_text":"Gets the level that this Enchantment should start at","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemTarget","comment_text":"Gets the type of {@link ItemStack} that may fit this Enchantment.","return_type":"org.bukkit.enchantments.EnchantmentTarget","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isTreasure","comment_text":"Checks if this enchantment is a treasure enchantment.\n <br>\n Treasure enchantments can only be received via looting, trading, or\n fishing.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCursed","comment_text":"Checks if this enchantment is a cursed enchantment\n <br>\n Cursed enchantments are found the same way treasure enchantments are","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"conflictsWith","comment_text":"Check if this enchantment conflicts with another enchantment.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The enchantment to check against","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"canEnchantItem","comment_text":"Checks if this Enchantment may be applied to the given {@link\n ItemStack}.\n <p>\n This does not check if it conflicts with any enchantments already\n applied to the item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"Item to test","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"registerEnchantment","comment_text":"Registers an enchantment with the given ID and object.\n <p>\n Generally not to be used from within a plugin.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enchantment","comment_text":"Enchantment to register","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"isAcceptingRegistrations","comment_text":"Checks if this is accepting Enchantment registrations.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"stopAcceptingRegistrations","comment_text":"Stops accepting any enchantment registrations","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByKey","comment_text":"Gets the Enchantment at the specified key","return_type":"org.bukkit.enchantments.Enchantment","return_type_dimension":"","parameters":[{"name":"key","comment_text":"key to fetch","type":"org.bukkit.NamespacedKey","type_dimension":""}],"throws":[]},{"name":"getByName","comment_text":"Gets the Enchantment at the specified name","return_type":"org.bukkit.enchantments.Enchantment","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name to fetch","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"values","comment_text":"Gets an array of all the registered {@link Enchantment}s","return_type":"org.bukkit.enchantments.Enchantment","return_type_dimension":"[]","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ZombieVillager","interfaces":["org.bukkit.entity.Zombie"],"superclass":"","comment_text":"Represents a {@link Zombie} which was once a {@link Villager}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setVillagerProfession","comment_text":"Sets the villager profession of this zombie.","return_type":"void","return_type_dimension":"","parameters":[{"name":"profession","comment_text":"","type":"org.bukkit.entity.Villager.Profession","type_dimension":""}],"throws":[]},{"name":"getVillagerProfession","comment_text":"Returns the villager profession of this zombie.","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ZombieHorse","interfaces":["org.bukkit.entity.AbstractHorse"],"superclass":"","comment_text":"Represents a ZombieHorse - variant of {@link AbstractHorse}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Zombie","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Zombie.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isBaby","comment_text":"Gets whether the zombie is a baby","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBaby","comment_text":"Sets whether the zombie is a baby","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"Whether the zombie is a baby","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isVillager","comment_text":"Gets whether the zombie is a villager","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVillager","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setVillagerProfession","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"profession","comment_text":"","type":"org.bukkit.entity.Villager.Profession","type_dimension":""}],"throws":[]},{"name":"getVillagerProfession","comment_text":"","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Wolf","interfaces":["org.bukkit.entity.Animals","org.bukkit.entity.Tameable","org.bukkit.entity.Sittable"],"superclass":"","comment_text":"Represents a Wolf","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isAngry","comment_text":"Checks if this wolf is angry","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAngry","comment_text":"Sets the anger of this wolf.\n <p>\n An angry wolf can not be fed or tamed, and will actively look for\n targets to attack.","return_type":"void","return_type_dimension":"","parameters":[{"name":"angry","comment_text":"true if angry","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getCollarColor","comment_text":"Get the collar color of this wolf","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCollarColor","comment_text":"Set the collar color of this wolf","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the color to apply","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.WitherSkull","interfaces":["org.bukkit.entity.Fireball"],"superclass":"","comment_text":"Represents a wither skull {@link Fireball}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setCharged","comment_text":"Sets the charged status of the wither skull.","return_type":"void","return_type_dimension":"","parameters":[{"name":"charged","comment_text":"whether it should be charged","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCharged","comment_text":"Gets whether or not the wither skull is charged.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.WitherSkeleton","interfaces":["org.bukkit.entity.Skeleton"],"superclass":"","comment_text":"Represents a WitherSkeleton - variant of {@link Skeleton}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Wither","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Wither boss","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Witch","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Witch","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Weather","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents a Weather related entity, such as a storm","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.WaterMob","interfaces":["org.bukkit.entity.Creature"],"superclass":"","comment_text":"Represents a Water Mob","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Vindicator","interfaces":["org.bukkit.entity.Illager"],"superclass":"","comment_text":"Represents a Vindicator.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Villager","interfaces":["org.bukkit.entity.Ageable","org.bukkit.entity.NPC","org.bukkit.inventory.InventoryHolder","org.bukkit.inventory.Merchant"],"superclass":"","comment_text":"Represents a villager NPC","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getProfession","comment_text":"Gets the current profession of this villager.","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setProfession","comment_text":"Sets the new profession of this villager.","return_type":"void","return_type_dimension":"","parameters":[{"name":"profession","comment_text":"New profession.","type":"org.bukkit.entity.Villager.Profession","type_dimension":""}],"throws":[]},{"name":"getCareer","comment_text":"Get the current {@link Career} for this Villager.","return_type":"org.bukkit.entity.Villager.Career","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCareer","comment_text":"Set the new {@link Career} for this Villager.\n This method will reset the villager's trades to the new career.","return_type":"void","return_type_dimension":"","parameters":[{"name":"career","comment_text":"the new career, or null to clear the career to a random one","type":"org.bukkit.entity.Villager.Career","type_dimension":""}],"throws":[]},{"name":"setCareer","comment_text":"Set the new {@link Career} for this Villager.","return_type":"void","return_type_dimension":"","parameters":[{"name":"career","comment_text":"the new career, or null to clear the career to a random one","type":"org.bukkit.entity.Villager.Career","type_dimension":""},{"name":"resetTrades","comment_text":"true to reset this Villager's trades to the new\n career's (if any)","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"Gets this villager's inventory.\n <br>\n Note that this inventory is not the Merchant inventory, rather, it is the\n items that a villager might have collected (from harvesting crops, etc.)\n\n {@inheritDoc}","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRiches","comment_text":"Gets this villager's riches, the number of emeralds this villager has\n been given.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRiches","comment_text":"Sets this villager's riches.","return_type":"void","return_type_dimension":"","parameters":[{"name":"riches","comment_text":"the new riches","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Villager.Profession","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the various different Villager professions there may be.\n Villagers have different trading options depending on their profession,","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isZombie","comment_text":"Returns if this profession can only be used by zombies.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCareers","comment_text":"Get an immutable list of {@link Career} belonging to this Profession.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["NORMAL","FARMER","LIBRARIAN","PRIEST","BLACKSMITH","BUTCHER","NITWIT","HUSK"]},{"name":"org.bukkit.entity.Villager.Career","interfaces":[],"superclass":"java.lang.Enum","comment_text":"The Career of this Villager.\n Each {@link Profession} has a set of careers it is applicable to. Each\n career dictates the trading options that are generated.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Villager.Career","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Villager.Career","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getProfession","comment_text":"Get the {@link Profession} this {@link Career} belongs to.","return_type":"org.bukkit.entity.Villager.Profession","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCareers","comment_text":"Get an immutable list of {@link Career}s that can be used with a\n given {@link Profession}","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"profession","comment_text":"the profession to get careers for","type":"org.bukkit.entity.Villager.Profession","type_dimension":""}],"throws":[]}],"enumConstants":["FARMER","FISHERMAN","SHEPHERD","FLETCHER","LIBRARIAN","CARTOGRAPHER","CLERIC","ARMORER","WEAPON_SMITH","TOOL_SMITH","BUTCHER","LEATHERWORKER","NITWIT"]},{"name":"org.bukkit.entity.Vex","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Vex.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Vehicle","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents a vehicle entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getVelocity","comment_text":"Gets the vehicle's velocity.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVelocity","comment_text":"Sets the vehicle's velocity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"vel","comment_text":"velocity vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Turtle","interfaces":["org.bukkit.entity.Animals"],"superclass":"","comment_text":"Represents a turtle.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.TropicalFish","interfaces":["org.bukkit.entity.Fish"],"superclass":"","comment_text":"Tropical fish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPatternColor","comment_text":"Gets the color of the fish's pattern.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPatternColor","comment_text":"Sets the color of the fish's pattern","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"pattern color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getBodyColor","comment_text":"Gets the color of the fish's body.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBodyColor","comment_text":"Sets the color of the fish's body","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"body color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getPattern","comment_text":"Gets the fish's pattern.","return_type":"org.bukkit.entity.TropicalFish.Pattern","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPattern","comment_text":"Sets the fish's pattern","return_type":"void","return_type_dimension":"","parameters":[{"name":"pattern","comment_text":"new pattern","type":"org.bukkit.entity.TropicalFish.Pattern","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.TropicalFish.Pattern","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Enumeration of all different fish patterns. Refer to the\n <a href=\"https://minecraft.gamepedia.com/Fish_(mob)\">Minecraft Wiki</a>\n for pictures.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.TropicalFish.Pattern","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.TropicalFish.Pattern","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["KOB","SUNSTREAK","SNOOPER","DASHER","BRINELY","SPOTTY","FLOPPER","STRIPEY","GLITTER","BLOCKFISH","BETTY","CLAYFISH"]},{"name":"org.bukkit.entity.Trident","interfaces":["org.bukkit.entity.Arrow"],"superclass":"","comment_text":"Represents a thrown trident.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.TNTPrimed","interfaces":["org.bukkit.entity.Explosive"],"superclass":"","comment_text":"Represents a Primed TNT.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setFuseTicks","comment_text":"Set the number of ticks until the TNT blows up after being primed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"fuseTicks","comment_text":"The fuse ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"getFuseTicks","comment_text":"Retrieve the number of ticks until the explosion of this TNTPrimed\n entity","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSource","comment_text":"Gets the source of this primed TNT. The source is the entity\n responsible for the creation of this primed TNT. (I.E. player ignites\n TNT with flint and steel.) Take note that this can be null if there is\n no suitable source. (created by the {@link\n org.bukkit.World#spawn(Location, Class)} method, for example.)\n <p>\n The source will become null if the chunk this primed TNT is in is\n unloaded then reloaded. The source entity may be invalid if for example\n it has since died or been unloaded. Callers should check\n {@link Entity#isValid()}.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.TippedArrow","interfaces":["org.bukkit.entity.Arrow"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setBasePotionData","comment_text":"Sets the underlying potion data","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"PotionData to set the base potion state to","type":"org.bukkit.potion.PotionData","type_dimension":""}],"throws":[]},{"name":"getBasePotionData","comment_text":"Returns the potion data about the base potion","return_type":"org.bukkit.potion.PotionData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the color of this arrow.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this arrow. Will be applied as a tint to its particles.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"arrow color","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"hasCustomEffects","comment_text":"Checks for the presence of custom potion effects.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCustomEffects","comment_text":"Gets an immutable list containing all custom potion effects applied to\n this arrow.\n <p>\n Plugins should check that hasCustomEffects() returns true before calling\n this method.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addCustomEffect","comment_text":"Adds a custom potion effect to this arrow.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"the potion effect to add","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"overwrite","comment_text":"true if any existing effect of the same type should be\n overwritten","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removeCustomEffect","comment_text":"Removes a custom potion effect from this arrow.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to remove","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"hasCustomEffect","comment_text":"Checks for a specific custom potion effect type on this arrow.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to check for","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"clearCustomEffects","comment_text":"Removes all custom potion effects from this arrow.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ThrownPotion","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a thrown potion bottle","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getEffects","comment_text":"Returns the effects that are applied by this potion.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Returns a copy of the ItemStack for this thrown potion.\n <p>\n Altering this copy will not alter the thrown potion directly. If you want\n to alter the thrown potion, you must use the {@link\n #setItem(ItemStack) setItemStack} method.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Set the ItemStack for this thrown potion.\n <p>\n The ItemStack must be of type {@link org.bukkit.Material#SPLASH_POTION}\n or {@link org.bukkit.Material#LINGERING_POTION}, otherwise an exception\n is thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"New ItemStack","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ThrownExpBottle","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a thrown Experience bottle.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Tameable","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isTamed","comment_text":"Check if this is tamed\n <p>\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTamed","comment_text":"Sets if this has been tamed. Not necessary if the method setOwner has\n been used, as it tames automatically.\n <p>\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.","return_type":"void","return_type_dimension":"","parameters":[{"name":"tame","comment_text":"true if tame","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getOwner","comment_text":"Gets the current owning AnimalTamer","return_type":"org.bukkit.entity.AnimalTamer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwner","comment_text":"Set this to be owned by given AnimalTamer.\n <p>\n If the owner is not null, this will be tamed and will have any current\n path it is following removed. If the owner is set to null, this will be\n untamed, and the current owner removed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"tamer","comment_text":"the AnimalTamer who should own this","type":"org.bukkit.entity.AnimalTamer","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Stray","interfaces":["org.bukkit.entity.Skeleton"],"superclass":"","comment_text":"Represents a Stray - variant of {@link Skeleton}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Squid","interfaces":["org.bukkit.entity.WaterMob"],"superclass":"","comment_text":"Represents a Squid.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.SplashPotion","interfaces":["org.bukkit.entity.ThrownPotion"],"superclass":"","comment_text":"Represents a thrown splash potion bottle","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Spider","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Spider.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Spellcaster","interfaces":["org.bukkit.entity.Illager"],"superclass":"","comment_text":"Represents a spell casting \"Illager\".","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSpell","comment_text":"Gets the {@link Spell} the entity is currently using.","return_type":"org.bukkit.entity.Spellcaster.Spell","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpell","comment_text":"Sets the {@link Spell} the entity is currently using.","return_type":"void","return_type_dimension":"","parameters":[{"name":"spell","comment_text":"the spell the entity should be using","type":"org.bukkit.entity.Spellcaster.Spell","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Spellcaster.Spell","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the current spell the entity is using.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Spellcaster.Spell","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Spellcaster.Spell","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NONE","SUMMON_VEX","FANGS","WOLOLO","DISAPPEAR","BLINDNESS"]},{"name":"org.bukkit.entity.SpectralArrow","interfaces":["org.bukkit.entity.Arrow"],"superclass":"","comment_text":"Represents a spectral arrow.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getGlowingTicks","comment_text":"Returns the amount of time that this arrow will apply\n the glowing effect for.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGlowingTicks","comment_text":"Sets the amount of time to apply the glowing effect for.","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"the glowing effect ticks","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Snowman","interfaces":["org.bukkit.entity.Golem"],"superclass":"","comment_text":"Represents a snowman entity","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isDerp","comment_text":"Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDerp","comment_text":"Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin. NOTE: This value is not persisted to disk and will therefore\n reset when the chunk is reloaded.","return_type":"void","return_type_dimension":"","parameters":[{"name":"derpMode","comment_text":"True to remove the pumpkin, false to add a pumpkin","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Snowball","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a snowball.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.SmallFireball","interfaces":["org.bukkit.entity.Fireball"],"superclass":"","comment_text":"Represents a small {@link Fireball}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Slime","interfaces":["org.bukkit.entity.Mob"],"superclass":"","comment_text":"Represents a Slime.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSize","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSize","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"sz","comment_text":"The new size of the slime.","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.SkeletonHorse","interfaces":["org.bukkit.entity.AbstractHorse"],"superclass":"","comment_text":"Represents a SkeletonHorse - variant of {@link AbstractHorse}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Skeleton","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Skeleton.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSkeletonType","comment_text":"Gets the current type of this skeleton.","return_type":"org.bukkit.entity.Skeleton.SkeletonType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSkeletonType","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.entity.Skeleton.SkeletonType","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Skeleton.SkeletonType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Skeleton.SkeletonType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Skeleton.SkeletonType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NORMAL","WITHER","STRAY"]},{"name":"org.bukkit.entity.Sittable","interfaces":[],"superclass":"","comment_text":"An animal that can sit still.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isSitting","comment_text":"Checks if this animal is sitting","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSitting","comment_text":"Sets if this animal is sitting. Will remove any path that the animal\n was following beforehand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sitting","comment_text":"true if sitting","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Silverfish","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Silverfish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.ShulkerBullet","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTarget","comment_text":"Retrieve the target of this bullet.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTarget","comment_text":"Sets the target of this bullet","return_type":"void","return_type_dimension":"","parameters":[{"name":"target","comment_text":"the entity to target","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Shulker","interfaces":["org.bukkit.entity.Golem","org.bukkit.material.Colorable"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Sheep","interfaces":["org.bukkit.entity.Animals","org.bukkit.material.Colorable"],"superclass":"","comment_text":"Represents a Sheep.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isSheared","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSheared","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"Whether to shear the sheep","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Salmon","interfaces":["org.bukkit.entity.Fish"],"superclass":"","comment_text":"Represents a salmon fish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Rabbit","interfaces":["org.bukkit.entity.Animals"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getRabbitType","comment_text":"","return_type":"org.bukkit.entity.Rabbit.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRabbitType","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"Sets the type of rabbit for this entity.","type":"org.bukkit.entity.Rabbit.Type","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Rabbit.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the various types a Rabbit might be.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Rabbit.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Rabbit.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BROWN","WHITE","BLACK","BLACK_AND_WHITE","GOLD","SALT_AND_PEPPER","THE_KILLER_BUNNY"]},{"name":"org.bukkit.entity.PufferFish","interfaces":["org.bukkit.entity.Fish"],"superclass":"","comment_text":"Represents a puffer fish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPuffState","comment_text":"Returns the current puff state of this fish (i.e. how inflated it is).","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPuffState","comment_text":"Sets the current puff state of this fish (i.e. how inflated it is).","return_type":"void","return_type_dimension":"","parameters":[{"name":"state","comment_text":"new puff state","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Projectile","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents a shootable entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getShooter","comment_text":"Retrieve the shooter of this projectile.","return_type":"org.bukkit.projectiles.ProjectileSource","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShooter","comment_text":"Set the shooter of this projectile.","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"the {@link ProjectileSource} that shot this projectile","type":"org.bukkit.projectiles.ProjectileSource","type_dimension":""}],"throws":[]},{"name":"doesBounce","comment_text":"Determine if this projectile should bounce or not when it hits.\n <p>\n If a small fireball does not bounce it will set the target on fire.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBounce","comment_text":"Set whether or not this projectile should bounce or not when it hits\n something.","return_type":"void","return_type_dimension":"","parameters":[{"name":"doesBounce","comment_text":"whether or not it should bounce.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.PolarBear","interfaces":["org.bukkit.entity.Animals"],"superclass":"","comment_text":"Represents a polar bear.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Player","interfaces":["org.bukkit.entity.HumanEntity","org.bukkit.conversations.Conversable","org.bukkit.command.CommandSender","org.bukkit.OfflinePlayer","org.bukkit.plugin.messaging.PluginMessageRecipient"],"superclass":"","comment_text":"Represents a player, connected or not","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getDisplayName","comment_text":"Gets the \"friendly\" name to display of this player. This may include\n color.\n <p>\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDisplayName","comment_text":"Sets the \"friendly\" name to display of this player. This may include\n color.\n <p>\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"The new display name.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayerListName","comment_text":"Gets the name that is shown on the player list.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPlayerListName","comment_text":"Sets the name that is shown on the in-game player list.\n <p>\n The name cannot be longer than 16 characters, but {@link ChatColor} is\n supported.\n <p>\n If the value is null, the name will be identical to {@link #getName()}.\n <p>\n This name is case sensitive and unique, two names with different casing\n will appear as two different people. If a player joins afterwards with\n a name that conflicts with a player's custom list name, the joining\n player's player list name will have a random number appended to it (1-2\n characters long in the default implementation). If the joining player's\n name is 15 or 16 characters long, part of the name will be truncated at\n the end to allow the addition of the two digits.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"new player list name","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlayerListHeader","comment_text":"Gets the currently displayed player list header for this player.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayerListFooter","comment_text":"Gets the currently displayed player list footer for this player.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPlayerListHeader","comment_text":"Sets the currently displayed player list header for this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"header","comment_text":"player list header, null for empty","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setPlayerListFooter","comment_text":"Sets the currently displayed player list footer for this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"footer","comment_text":"player list footer, null for empty","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setPlayerListHeaderFooter","comment_text":"Sets the currently displayed player list header and footer for this\n player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"header","comment_text":"player list header, null for empty","type":"java.lang.String","type_dimension":""},{"name":"footer","comment_text":"player list footer, null for empty","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setCompassTarget","comment_text":"Set the target of the player's compass.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"Location to point to","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getCompassTarget","comment_text":"Get the previously set compass target.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAddress","comment_text":"Gets the socket address of this player","return_type":"java.net.InetSocketAddress","return_type_dimension":"","parameters":[],"throws":[]},{"name":"sendRawMessage","comment_text":"Sends this sender a message raw","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"Message to be displayed","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"kickPlayer","comment_text":"Kicks player with custom kick message.","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"kick message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"chat","comment_text":"Says a message (or runs a command).","return_type":"void","return_type_dimension":"","parameters":[{"name":"msg","comment_text":"message to print","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"performCommand","comment_text":"Makes the player perform the given command","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"command","comment_text":"Command to perform","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isSneaking","comment_text":"Returns if the player is in sneak mode","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSneaking","comment_text":"Sets the sneak mode the player","return_type":"void","return_type_dimension":"","parameters":[{"name":"sneak","comment_text":"true if player should appear sneaking","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSprinting","comment_text":"Gets whether the player is sprinting or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSprinting","comment_text":"Sets whether the player is sprinting or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sprinting","comment_text":"true if the player should be sprinting","type":"boolean","type_dimension":""}],"throws":[]},{"name":"saveData","comment_text":"Saves the players current location, health, inventory, motion, and\n other information into the username.dat file, in the world/player\n folder","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"loadData","comment_text":"Loads the players current location, health, inventory, motion, and\n other information from the username.dat file, in the world/player\n folder.\n <p>\n Note: This will overwrite the players current inventory, health,\n motion, etc, with the state from the saved dat file.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSleepingIgnored","comment_text":"Sets whether the player is ignored as not sleeping. If everyone is\n either sleeping or has this flag set, then time will advance to the\n next day. If everyone has this flag set but no one is actually in bed,\n then nothing will happen.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isSleeping","comment_text":"Whether to ignore.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSleepingIgnored","comment_text":"Returns whether the player is sleeping ignored.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"playNote","comment_text":"Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location of a note block.","type":"org.bukkit.Location","type_dimension":""},{"name":"instrument","comment_text":"The instrument ID.","type":"byte","type_dimension":""},{"name":"note","comment_text":"The note ID.","type":"byte","type_dimension":""}],"throws":[]},{"name":"playNote","comment_text":"Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location of a note block","type":"org.bukkit.Location","type_dimension":""},{"name":"instrument","comment_text":"The instrument","type":"org.bukkit.Instrument","type_dimension":""},{"name":"note","comment_text":"The note","type":"org.bukkit.Note","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a sound for a player at the location.\n <p>\n This function will fail silently if Location or Sound are null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"The sound to play","type":"org.bukkit.Sound","type_dimension":""},{"name":"volume","comment_text":"The volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a sound for a player at the location.\n <p>\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the player if their client does not have the\n respective sound for the value passed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"the internal sound name to play","type":"java.lang.String","type_dimension":""},{"name":"volume","comment_text":"the volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"the pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a sound for a player at the location.\n <p>\n This function will fail silently if Location or Sound are null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"The sound to play","type":"org.bukkit.Sound","type_dimension":""},{"name":"category","comment_text":"The category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""},{"name":"volume","comment_text":"The volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"playSound","comment_text":"Play a sound for a player at the location.\n <p>\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the player if their client does not have the respective\n sound for the value passed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to play the sound","type":"org.bukkit.Location","type_dimension":""},{"name":"sound","comment_text":"the internal sound name to play","type":"java.lang.String","type_dimension":""},{"name":"category","comment_text":"The category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""},{"name":"volume","comment_text":"the volume of the sound","type":"float","type_dimension":""},{"name":"pitch","comment_text":"the pitch of the sound","type":"float","type_dimension":""}],"throws":[]},{"name":"stopSound","comment_text":"Stop the specified sound from playing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sound","comment_text":"the sound to stop","type":"org.bukkit.Sound","type_dimension":""}],"throws":[]},{"name":"stopSound","comment_text":"Stop the specified sound from playing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sound","comment_text":"the sound to stop","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"stopSound","comment_text":"Stop the specified sound from playing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sound","comment_text":"the sound to stop","type":"org.bukkit.Sound","type_dimension":""},{"name":"category","comment_text":"the category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""}],"throws":[]},{"name":"stopSound","comment_text":"Stop the specified sound from playing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"sound","comment_text":"the sound to stop","type":"java.lang.String","type_dimension":""},{"name":"category","comment_text":"the category of the sound","type":"org.bukkit.SoundCategory","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Plays an effect to just this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location to play the effect at","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"int","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Plays an effect to just this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location to play the effect at","type":"org.bukkit.Location","type_dimension":""},{"name":"effect","comment_text":"the {@link Effect}","type":"org.bukkit.Effect","type_dimension":""},{"name":"data","comment_text":"a data bit needed for some effects","type":"T","type_dimension":""}],"throws":[]},{"name":"sendBlockChange","comment_text":"Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location of the changed block","type":"org.bukkit.Location","type_dimension":""},{"name":"material","comment_text":"The new block","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"The block data","type":"byte","type_dimension":""}],"throws":[]},{"name":"sendBlockChange","comment_text":"Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location of the changed block","type":"org.bukkit.Location","type_dimension":""},{"name":"block","comment_text":"The new block","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"sendChunkChange","comment_text":"Send a chunk change. This fakes a chunk change packet for a user at a\n certain location. The updated cuboid must be entirely within a single\n chunk. This will not actually change the world in any way.\n <p>\n At least one of the dimensions of the cuboid must be even. The size of\n the data buffer must be 2.5*sx*sy*sz and formatted in accordance with\n the Packet51 format.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"The location of the cuboid","type":"org.bukkit.Location","type_dimension":""},{"name":"sx","comment_text":"The x size of the cuboid","type":"int","type_dimension":""},{"name":"sy","comment_text":"The y size of the cuboid","type":"int","type_dimension":""},{"name":"sz","comment_text":"The z size of the cuboid","type":"int","type_dimension":""},{"name":"data","comment_text":"The data to be sent","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"sendSignChange","comment_text":"Send a sign change. This fakes a sign change packet for a user at\n a certain location. This will not actually change the world in any way.\n This method will use a sign at the location's block or a faked sign\n sent via\n {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n <p>\n If the client does not have a sign at the given location it will\n display an error message to the user.","return_type":"void","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location of the sign","type":"org.bukkit.Location","type_dimension":""},{"name":"lines","comment_text":"the new text on the sign or null to clear it","type":"java.lang.String","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if location is null"}]},{"name":"sendMap","comment_text":"Render a map and send it to the player in its entirety. This may be\n used when streaming the map in the normal manner is not desirable.","return_type":"void","return_type_dimension":"","parameters":[{"name":"map","comment_text":"The map to be sent","type":"org.bukkit.map.MapView","type_dimension":""}],"throws":[]},{"name":"updateInventory","comment_text":"Forces an update of the player's entire inventory.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"awardAchievement","comment_text":"Awards the given achievement and any parent achievements that the\n player does not have.","return_type":"void","return_type_dimension":"","parameters":[{"name":"achievement","comment_text":"Achievement to award","type":"org.bukkit.Achievement","type_dimension":""}],"throws":[]},{"name":"removeAchievement","comment_text":"Removes the given achievement and any children achievements that the\n player has.","return_type":"void","return_type_dimension":"","parameters":[{"name":"achievement","comment_text":"Achievement to remove","type":"org.bukkit.Achievement","type_dimension":""}],"throws":[]},{"name":"hasAchievement","comment_text":"Gets whether this player has the given achievement.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"achievement","comment_text":"the achievement to check","type":"org.bukkit.Achievement","type_dimension":""}],"throws":[]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player.\n <p>\n This is equivalent to the following code:\n <code>incrementStatistic(Statistic, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player.\n <p>\n This is equivalent to the following code:\n <code>decrementStatistic(Statistic, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""},{"name":"amount","comment_text":"Amount to increment this statistic by","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""},{"name":"amount","comment_text":"Amount to decrement this statistic by","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"setStatistic","comment_text":"Sets the given statistic for this player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to set","type":"org.bukkit.Statistic","type_dimension":""},{"name":"newValue","comment_text":"The value to set this statistic to","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"getStatistic","comment_text":"Gets the value of the given statistic for this player.","return_type":"int","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to check","type":"org.bukkit.Statistic","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player for the given material.\n <p>\n This is equivalent to the following code:\n <code>incrementStatistic(Statistic, Material, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material to offset the statistic with","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player for the given material.\n <p>\n This is equivalent to the following code:\n <code>decrementStatistic(Statistic, Material, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material to offset the statistic with","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"getStatistic","comment_text":"Gets the value of the given statistic for this player.","return_type":"int","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to check","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material offset of the statistic","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player for the given material.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material to offset the statistic with","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"Amount to increment this statistic by","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player for the given material.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material to offset the statistic with","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"Amount to decrement this statistic by","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"setStatistic","comment_text":"Sets the given statistic for this player for the given material.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to set","type":"org.bukkit.Statistic","type_dimension":""},{"name":"material","comment_text":"Material to offset the statistic with","type":"org.bukkit.Material","type_dimension":""},{"name":"newValue","comment_text":"The value to set this statistic to","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player for the given entity.\n <p>\n This is equivalent to the following code:\n <code>incrementStatistic(Statistic, EntityType, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType to offset the statistic with","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player for the given entity.\n <p>\n This is equivalent to the following code:\n <code>decrementStatistic(Statistic, EntityType, 1)</code>","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType to offset the statistic with","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"getStatistic","comment_text":"Gets the value of the given statistic for this player.","return_type":"int","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to check","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType offset of the statistic","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"incrementStatistic","comment_text":"Increments the given statistic for this player for the given entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to increment","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType to offset the statistic with","type":"org.bukkit.entity.EntityType","type_dimension":""},{"name":"amount","comment_text":"Amount to increment this statistic by","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if statistic is null"}]},{"name":"decrementStatistic","comment_text":"Decrements the given statistic for this player for the given entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to decrement","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType to offset the statistic with","type":"org.bukkit.entity.EntityType","type_dimension":""},{"name":"amount","comment_text":"Amount to decrement this statistic by","type":"int","type_dimension":""}],"throws":[]},{"name":"setStatistic","comment_text":"Sets the given statistic for this player for the given entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"statistic","comment_text":"Statistic to set","type":"org.bukkit.Statistic","type_dimension":""},{"name":"entityType","comment_text":"EntityType to offset the statistic with","type":"org.bukkit.entity.EntityType","type_dimension":""},{"name":"newValue","comment_text":"The value to set this statistic to","type":"int","type_dimension":""}],"throws":[]},{"name":"setPlayerTime","comment_text":"Sets the current time on the player's client. When relative is true the\n player's time will be kept synchronized to its world time with the\n specified offset.\n <p>\n When using non relative time the player's time will stay fixed at the\n specified time parameter. It's up to the caller to continue updating\n the player's time. To restore player time to normal use\n resetPlayerTime().","return_type":"void","return_type_dimension":"","parameters":[{"name":"time","comment_text":"The current player's perceived time or the player's time\n     offset from the server time.","type":"long","type_dimension":""},{"name":"relative","comment_text":"When true the player time is kept relative to its world\n     time.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPlayerTime","comment_text":"Returns the player's current timestamp.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayerTimeOffset","comment_text":"Returns the player's current time offset relative to server time, or\n the current player's fixed time if the player's time is absolute.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPlayerTimeRelative","comment_text":"Returns true if the player's time is relative to the server time,\n otherwise the player's time is absolute and will not change its current\n time unless done so with setPlayerTime().","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"resetPlayerTime","comment_text":"Restores the normal condition where the player's time is synchronized\n with the server time.\n <p>\n Equivalent to calling setPlayerTime(0, true).","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPlayerWeather","comment_text":"Sets the type of weather the player will see.  When used, the weather\n status of the player is locked until {@link #resetPlayerWeather()} is\n used.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The WeatherType enum type the player should experience","type":"org.bukkit.WeatherType","type_dimension":""}],"throws":[]},{"name":"getPlayerWeather","comment_text":"Returns the type of weather the player is currently experiencing.","return_type":"org.bukkit.WeatherType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"resetPlayerWeather","comment_text":"Restores the normal condition where the player's weather is controlled\n by server conditions.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"giveExp","comment_text":"Gives the player the amount of experience specified.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"Exp amount to give","type":"int","type_dimension":""}],"throws":[]},{"name":"giveExpLevels","comment_text":"Gives the player the amount of experience levels specified. Levels can\n be taken by specifying a negative amount.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"amount of experience levels to give or take","type":"int","type_dimension":""}],"throws":[]},{"name":"getExp","comment_text":"Gets the players current experience points towards the next level.\n <p>\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExp","comment_text":"Sets the players current experience points towards the next level\n <p>\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"New experience points","type":"float","type_dimension":""}],"throws":[]},{"name":"getLevel","comment_text":"Gets the players current experience level","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLevel","comment_text":"Sets the players current experience level","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"New experience level","type":"int","type_dimension":""}],"throws":[]},{"name":"getTotalExperience","comment_text":"Gets the players total experience points.\n <br>\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player's \"score\" upon dying.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTotalExperience","comment_text":"Sets the players current experience points.\n <br>\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player's \"score\" upon dying.","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"New total experience points","type":"int","type_dimension":""}],"throws":[]},{"name":"getExhaustion","comment_text":"Gets the players current exhaustion level.\n <p>\n Exhaustion controls how fast the food level drops. While you have a\n certain amount of exhaustion, your saturation will drop to zero, and\n then your food will drop to zero.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExhaustion","comment_text":"Sets the players current exhaustion level","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Exhaustion level","type":"float","type_dimension":""}],"throws":[]},{"name":"getSaturation","comment_text":"Gets the players current saturation level.\n <p>\n Saturation is a buffer for food level. Your food level will not drop if\n you are saturated {@literal >} 0.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSaturation","comment_text":"Sets the players current saturation level","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Saturation level","type":"float","type_dimension":""}],"throws":[]},{"name":"getFoodLevel","comment_text":"Gets the players current food level","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFoodLevel","comment_text":"Sets the players current food level","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"New food level","type":"int","type_dimension":""}],"throws":[]},{"name":"getBedSpawnLocation","comment_text":"Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBedSpawnLocation","comment_text":"Sets the Location where the player will spawn at their bed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"where to set the respawn location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"setBedSpawnLocation","comment_text":"Sets the Location where the player will spawn at their bed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"where to set the respawn location","type":"org.bukkit.Location","type_dimension":""},{"name":"force","comment_text":"whether to forcefully set the respawn location even if a\n     valid bed is not present","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAllowFlight","comment_text":"Determines if the Player is allowed to fly via jump key double-tap like\n in creative mode.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAllowFlight","comment_text":"Sets if the Player is allowed to fly via jump key double-tap like in\n creative mode.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flight","comment_text":"If flight should be allowed.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"hidePlayer","comment_text":"Hides a player from this player","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"Player to hide","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"hidePlayer","comment_text":"Hides a player from this player","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wants to hide the player","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"player","comment_text":"Player to hide","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"showPlayer","comment_text":"Allows this player to see a player that was previously hidden","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"Player to show","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"showPlayer","comment_text":"Allows this player to see a player that was previously hidden. If\n another another plugin had hidden the player too, then the player will\n remain hidden until the other plugin calls this method too.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wants to show the player","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"player","comment_text":"Player to show","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"canSee","comment_text":"Checks to see if a player has been hidden from this player","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"player","comment_text":"Player to check","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"isFlying","comment_text":"Checks to see if this player is currently flying or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFlying","comment_text":"Makes this player start or stop flying.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"True to fly.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setFlySpeed","comment_text":"Sets the speed at which a client will fly. Negative values indicate\n reverse directions.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The new speed, from -1 to 1.","type":"float","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If new speed is less than -1 or\n     greater than 1"}]},{"name":"setWalkSpeed","comment_text":"Sets the speed at which a client will walk. Negative values indicate\n reverse directions.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The new speed, from -1 to 1.","type":"float","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If new speed is less than -1 or\n     greater than 1"}]},{"name":"getFlySpeed","comment_text":"Gets the current allowed speed that a client can fly.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWalkSpeed","comment_text":"Gets the current allowed speed that a client can walk.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTexturePack","comment_text":"Request that the player's client download and switch texture packs.\n <p>\n The player's client will download the new texture pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n texture pack in the past, it will perform a file size check against\n the response content to determine if the texture pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n <p>\n Notes:\n <ul>\n <li>Players can disable server textures on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n <li>There is no concept of resetting texture packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n <li>The request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"url","comment_text":"The URL from which the client will download the texture\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setResourcePack","comment_text":"Request that the player's client download and switch resource packs.\n <p>\n The player's client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n resource pack in the past, it will perform a file size check against\n the response content to determine if the resource pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n <p>\n Notes:\n <ul>\n <li>Players can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n <li>There is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n <li>The request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"url","comment_text":"The URL from which the client will download the resource\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setResourcePack","comment_text":"Request that the player's client download and switch resource packs.\n <p>\n The player's client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached a\n resource pack with the same hash in the past it will not download but\n directly apply the cached pack. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n <p>\n Notes:\n <ul>\n <li>Players can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n <li>There is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"url","comment_text":"The URL from which the client will download the resource\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.","type":"java.lang.String","type_dimension":""},{"name":"hash","comment_text":"The sha1 hash sum of the resource pack file which is used\n     to apply a cached version of the pack directly without downloading\n     if it is available. Hast to be 20 bytes long!","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"getScoreboard","comment_text":"Gets the Scoreboard displayed to this player","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setScoreboard","comment_text":"Sets the player's visible Scoreboard.","return_type":"void","return_type_dimension":"","parameters":[{"name":"scoreboard","comment_text":"New Scoreboard for the player","type":"org.bukkit.scoreboard.Scoreboard","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if scoreboard is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this is a player that is not logged\n     yet or has logged out"}]},{"name":"isHealthScaled","comment_text":"Gets if the client is displayed a 'scaled' health, that is, health on a\n scale from 0-{@link #getHealthScale()}.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHealthScaled","comment_text":"Sets if the client is displayed a 'scaled' health, that is, health on a\n scale from 0-{@link #getHealthScale()}.\n <p>\n Displayed health follows a simple formula <code>displayedHealth =\n getHealth() / getMaxHealth() * getHealthScale()</code>.","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"if the client health display is scaled","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setHealthScale","comment_text":"Sets the number to scale health to for the client; this will also\n {@link #setHealthScaled(boolean) setHealthScaled(true)}.\n <p>\n Displayed health follows a simple formula <code>displayedHealth =\n getHealth() / getMaxHealth() * getHealthScale()</code>.","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"the number to scale health to","type":"double","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if scale is &lt;0"}]},{"name":"getHealthScale","comment_text":"Gets the number that health is scaled to for the client.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpectatorTarget","comment_text":"Gets the entity which is followed by the camera when in\n {@link GameMode#SPECTATOR}.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpectatorTarget","comment_text":"Sets the entity which is followed by the camera when in\n {@link GameMode#SPECTATOR}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"the entity to follow or null to reset","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"sendTitle","comment_text":"Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. The titles will be displayed with the client's default timings.","return_type":"void","return_type_dimension":"","parameters":[{"name":"title","comment_text":"Title text","type":"java.lang.String","type_dimension":""},{"name":"subtitle","comment_text":"Subtitle text","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"sendTitle","comment_text":"Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. All timings values may take a value of -1 to indicate that they\n will use the last value sent (or the defaults if no title has been\n displayed).","return_type":"void","return_type_dimension":"","parameters":[{"name":"title","comment_text":"Title text","type":"java.lang.String","type_dimension":""},{"name":"subtitle","comment_text":"Subtitle text","type":"java.lang.String","type_dimension":""},{"name":"fadeIn","comment_text":"time in ticks for titles to fade in. Defaults to 10.","type":"int","type_dimension":""},{"name":"stay","comment_text":"time in ticks for titles to stay. Defaults to 70.","type":"int","type_dimension":""},{"name":"fadeOut","comment_text":"time in ticks for titles to fade out. Defaults to 20.","type":"int","type_dimension":""}],"throws":[]},{"name":"resetTitle","comment_text":"Resets the title displayed to the player. This will clear the displayed\n title / subtitle and reset timings to their default values.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"location","comment_text":"the location to spawn at","type":"org.bukkit.Location","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"spawnParticle","comment_text":"Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the particle to spawn","type":"org.bukkit.Particle","type_dimension":""},{"name":"x","comment_text":"the position on the x axis to spawn at","type":"double","type_dimension":""},{"name":"y","comment_text":"the position on the y axis to spawn at","type":"double","type_dimension":""},{"name":"z","comment_text":"the position on the z axis to spawn at","type":"double","type_dimension":""},{"name":"count","comment_text":"the number of particles","type":"int","type_dimension":""},{"name":"offsetX","comment_text":"the maximum random offset on the X axis","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"the maximum random offset on the Y axis","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"the maximum random offset on the Z axis","type":"double","type_dimension":""},{"name":"extra","comment_text":"the extra data for this particle, depends on the\n              particle used (normally speed)","type":"double","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"getAdvancementProgress","comment_text":"Return the player's progression on the specified advancement.","return_type":"org.bukkit.advancement.AdvancementProgress","return_type_dimension":"","parameters":[{"name":"advancement","comment_text":"advancement","type":"org.bukkit.advancement.Advancement","type_dimension":""}],"throws":[]},{"name":"getLocale","comment_text":"Gets the player's current locale.\n\n The value of the locale String is not defined properly.\n <br>\n The vanilla Minecraft client will use lowercase language / country pairs\n separated by an underscore, but custom resource packs may use any format\n they wish.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"updateCommands","comment_text":"Update the list of commands sent to the client.\n <br>\n Generally useful to ensure the client has a complete list of commands\n after permission changes are done.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.PigZombie","interfaces":["org.bukkit.entity.Zombie"],"superclass":"","comment_text":"Represents a Pig Zombie.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAnger","comment_text":"Get the pig zombie's current anger level.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAnger","comment_text":"Set the pig zombie's current anger level.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"The anger level. Higher levels of anger take longer to\n     wear off.","type":"int","type_dimension":""}],"throws":[]},{"name":"setAngry","comment_text":"Shorthand; sets to either 0 or the default level.","return_type":"void","return_type_dimension":"","parameters":[{"name":"angry","comment_text":"Whether the zombie should be angry.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isAngry","comment_text":"Shorthand; gets whether the zombie is angry.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Pig","interfaces":["org.bukkit.entity.Animals","org.bukkit.entity.Vehicle"],"superclass":"","comment_text":"Represents a Pig.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasSaddle","comment_text":"Check if the pig has a saddle.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSaddle","comment_text":"Sets if the pig has a saddle or not","return_type":"void","return_type_dimension":"","parameters":[{"name":"saddled","comment_text":"set if the pig has a saddle or not.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Phantom","interfaces":["org.bukkit.entity.Flying"],"superclass":"","comment_text":"Represents a phantom.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSize","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSize","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"sz","comment_text":"The new size of the phantom.","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Parrot","interfaces":["org.bukkit.entity.Animals","org.bukkit.entity.Tameable","org.bukkit.entity.Sittable"],"superclass":"","comment_text":"Represents a Parrot.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getVariant","comment_text":"Get the variant of this parrot.","return_type":"org.bukkit.entity.Parrot.Variant","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVariant","comment_text":"Set the variant of this parrot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"variant","comment_text":"parrot variant","type":"org.bukkit.entity.Parrot.Variant","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Parrot.Variant","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the variant of a parrot - ie its color.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Parrot.Variant","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Parrot.Variant","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["RED","BLUE","GREEN","CYAN","GRAY"]},{"name":"org.bukkit.entity.Painting","interfaces":["org.bukkit.entity.Hanging"],"superclass":"","comment_text":"Represents a Painting.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getArt","comment_text":"Get the art on this painting","return_type":"org.bukkit.Art","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setArt","comment_text":"Set the art on this painting","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"art","comment_text":"The new art","type":"org.bukkit.Art","type_dimension":""}],"throws":[]},{"name":"setArt","comment_text":"Set the art on this painting","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"art","comment_text":"The new art","type":"org.bukkit.Art","type_dimension":""},{"name":"force","comment_text":"If true, force the new art regardless of whether it fits\n     at the current location. Note that forcing it where it can't fit\n     normally causes it to drop as an item unless you override this by\n     catching the {@link HangingBreakEvent}.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Ocelot","interfaces":["org.bukkit.entity.Animals","org.bukkit.entity.Tameable","org.bukkit.entity.Sittable"],"superclass":"","comment_text":"A wild tameable cat","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCatType","comment_text":"Gets the current type of this cat.","return_type":"org.bukkit.entity.Ocelot.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCatType","comment_text":"Sets the current type of this cat.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"New type of this cat.","type":"org.bukkit.entity.Ocelot.Type","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Ocelot.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the various different cat types there are.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Ocelot.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Ocelot.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getId","comment_text":"Gets the ID of this cat type.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Gets a cat type by its ID.","return_type":"org.bukkit.entity.Ocelot.Type","return_type_dimension":"","parameters":[{"name":"id","comment_text":"ID of the cat type to get.","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":["WILD_OCELOT","BLACK_CAT","RED_CAT","SIAMESE_CAT"]},{"name":"org.bukkit.entity.NPC","interfaces":["org.bukkit.entity.Creature"],"superclass":"","comment_text":"Represents a non-player character","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.MushroomCow","interfaces":["org.bukkit.entity.Cow"],"superclass":"","comment_text":"Represents a mushroom {@link Cow}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Mule","interfaces":["org.bukkit.entity.ChestedHorse"],"superclass":"","comment_text":"Represents a Mule - variant of {@link ChestedHorse}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Monster","interfaces":["org.bukkit.entity.Creature"],"superclass":"","comment_text":"Represents a Monster.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Mob","interfaces":["org.bukkit.entity.LivingEntity","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a Mob. Mobs are living entities with simple AI.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setTarget","comment_text":"Instructs this Mob to set the specified LivingEntity as its target.\n <p>\n Hostile creatures may attack their target, and friendly creatures may\n follow their target.","return_type":"void","return_type_dimension":"","parameters":[{"name":"target","comment_text":"New LivingEntity to target, or null to clear the target","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]},{"name":"getTarget","comment_text":"Gets the current target of this Mob","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Minecart","interfaces":["org.bukkit.entity.Vehicle"],"superclass":"","comment_text":"Represents a minecart entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setDamage","comment_text":"Sets a minecart's damage.","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"over 40 to \"kill\" a minecart","type":"double","type_dimension":""}],"throws":[]},{"name":"getDamage","comment_text":"Gets a minecart's damage.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxSpeed","comment_text":"Gets the maximum speed of a minecart. The speed is unrelated to the\n velocity.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxSpeed","comment_text":"Sets the maximum speed of a minecart. Must be nonnegative. Default is\n 0.4D.","return_type":"void","return_type_dimension":"","parameters":[{"name":"speed","comment_text":"The max speed","type":"double","type_dimension":""}],"throws":[]},{"name":"isSlowWhenEmpty","comment_text":"Returns whether this minecart will slow down faster without a passenger\n occupying it","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSlowWhenEmpty","comment_text":"Sets whether this minecart will slow down faster without a passenger\n occupying it","return_type":"void","return_type_dimension":"","parameters":[{"name":"slow","comment_text":"Whether it will decelerate faster","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getFlyingVelocityMod","comment_text":"Gets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart's velocity is multiplied by this factor each\n tick.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFlyingVelocityMod","comment_text":"Sets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart's velocity is multiplied by this factor each\n tick.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flying","comment_text":"velocity modifier vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getDerailedVelocityMod","comment_text":"Gets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails.\n <p>\n A derailed minecart's velocity is multiplied by this factor each tick.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDerailedVelocityMod","comment_text":"Sets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails. A derailed minecart's velocity is multiplied\n by this factor each tick.","return_type":"void","return_type_dimension":"","parameters":[{"name":"derailed","comment_text":"visible speed","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"setDisplayBlock","comment_text":"Sets the display block for this minecart.\n Passing a null value will set the minecart to have no display block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material to set as display block.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"getDisplayBlock","comment_text":"Gets the display block for this minecart.\n This function will return the type AIR if none is set.","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDisplayBlockData","comment_text":"Sets the display block for this minecart.\n Passing a null value will set the minecart to have no display block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"blockData","comment_text":"the material to set as display block.","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"getDisplayBlockData","comment_text":"Gets the display block for this minecart.\n This function will return the type AIR if none is set.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDisplayBlockOffset","comment_text":"Sets the offset of the display block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"offset","comment_text":"the block offset to set for this minecart.","type":"int","type_dimension":""}],"throws":[]},{"name":"getDisplayBlockOffset","comment_text":"Gets the offset of the display block.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.MagmaCube","interfaces":["org.bukkit.entity.Slime"],"superclass":"","comment_text":"Represents a MagmaCube.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.LlamaSpit","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents Llama spit.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Llama","interfaces":["org.bukkit.entity.ChestedHorse"],"superclass":"","comment_text":"Represents a Llama.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the llama's color.","return_type":"org.bukkit.entity.Llama.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the llama's color.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"a {@link Color} for this llama","type":"org.bukkit.entity.Llama.Color","type_dimension":""}],"throws":[]},{"name":"getStrength","comment_text":"Gets the llama's strength. A higher strength llama will have more\n inventory slots and be more threatening to entities.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStrength","comment_text":"Sets the llama's strength. A higher strength llama will have more\n inventory slots and be more threatening to entities. Inventory slots are\n equal to strength * 3.","return_type":"void","return_type_dimension":"","parameters":[{"name":"strength","comment_text":"llama strength [1,5]","type":"int","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.LlamaInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Llama.Color","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the base color that the llama has.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Llama.Color","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Llama.Color","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["CREAMY","WHITE","BROWN","GRAY"]},{"name":"org.bukkit.entity.LivingEntity","interfaces":["org.bukkit.attribute.Attributable","org.bukkit.entity.Entity","org.bukkit.entity.Damageable","org.bukkit.projectiles.ProjectileSource"],"superclass":"","comment_text":"Represents a living entity, such as a monster or player","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getEyeHeight","comment_text":"Gets the height of the living entity's eyes above its Location.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEyeHeight","comment_text":"Gets the height of the living entity's eyes above its Location.","return_type":"double","return_type_dimension":"","parameters":[{"name":"ignorePose","comment_text":"if set to true, the effects of pose changes, eg\n     sneaking and gliding will be ignored","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEyeLocation","comment_text":"Get a Location detailing the current eye position of the living entity.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLineOfSight","comment_text":"Gets all blocks along the living entity's line of sight.\n <p>\n This list contains all blocks from the living entity's eye position to\n target inclusive.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"transparent","comment_text":"HashSet containing all transparent block Materials (set to\n     null for only air)","type":"java.util.Set","type_dimension":""},{"name":"maxDistance","comment_text":"this is the maximum distance to scan (may be limited\n     by server by at least 100 blocks, no less)","type":"int","type_dimension":""}],"throws":[]},{"name":"getTargetBlock","comment_text":"Gets the block that the living entity has targeted.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[{"name":"transparent","comment_text":"HashSet containing all transparent block Materials (set to\n     null for only air)","type":"java.util.Set","type_dimension":""},{"name":"maxDistance","comment_text":"this is the maximum distance to scan (may be limited\n     by server by at least 100 blocks, no less)","type":"int","type_dimension":""}],"throws":[]},{"name":"getLastTwoTargetBlocks","comment_text":"Gets the last two blocks along the living entity's line of sight.\n <p>\n The target block will be the last block in the list.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"transparent","comment_text":"HashSet containing all transparent block Materials (set to\n     null for only air)","type":"java.util.Set","type_dimension":""},{"name":"maxDistance","comment_text":"this is the maximum distance to scan. This may be\n     further limited by the server, but never to less than 100 blocks","type":"int","type_dimension":""}],"throws":[]},{"name":"getRemainingAir","comment_text":"Returns the amount of air that the living entity has remaining, in\n ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRemainingAir","comment_text":"Sets the amount of air that the living entity has remaining, in ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"amount of air remaining","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumAir","comment_text":"Returns the maximum amount of air the living entity can have, in ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaximumAir","comment_text":"Sets the maximum amount of air the living entity can have, in ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"maximum amount of air","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaximumNoDamageTicks","comment_text":"Returns the living entity's current maximum no damage ticks.\n <p>\n This is the maximum duration in which the living entity will not take\n damage.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaximumNoDamageTicks","comment_text":"Sets the living entity's current maximum no damage ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"maximum amount of no damage ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"getLastDamage","comment_text":"Returns the living entity's last damage taken in the current no damage\n ticks time.\n <p>\n Only damage higher than this amount will further damage the living\n entity.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLastDamage","comment_text":"Sets the damage dealt within the current no damage ticks time period.","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"amount of damage","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoDamageTicks","comment_text":"Returns the living entity's current no damage ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNoDamageTicks","comment_text":"Sets the living entity's current no damage ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"amount of no damage ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"getKiller","comment_text":"Gets the player identified as the killer of the living entity.\n <p>\n May be null.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addPotionEffect","comment_text":"Adds the given {@link PotionEffect} to the living entity.\n <p>\n Only one potion effect can be present for a given {@link\n PotionEffectType}.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"PotionEffect to be added","type":"org.bukkit.potion.PotionEffect","type_dimension":""}],"throws":[]},{"name":"addPotionEffect","comment_text":"Adds the given {@link PotionEffect} to the living entity.\n <p>\n Only one potion effect can be present for a given {@link\n PotionEffectType}.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"PotionEffect to be added","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"force","comment_text":"whether conflicting effects should be removed","type":"boolean","type_dimension":""}],"throws":[]},{"name":"addPotionEffects","comment_text":"Attempts to add all of the given {@link PotionEffect} to the living\n entity.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effects","comment_text":"the effects to add","type":"java.util.Collection","type_dimension":""}],"throws":[]},{"name":"hasPotionEffect","comment_text":"Returns whether the living entity already has an existing effect of\n the given {@link PotionEffectType} applied to it.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion type to check","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"getPotionEffect","comment_text":"Returns the active {@link PotionEffect} of the specified type.\n <p>\n If the effect is not present on the entity then null will be returned.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion type to check","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"removePotionEffect","comment_text":"Removes any effects present of the given {@link PotionEffectType}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion type to remove","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"getActivePotionEffects","comment_text":"Returns all currently active {@link PotionEffect}s on the living\n entity.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasLineOfSight","comment_text":"Checks whether the living entity has block line of sight to another.\n <p>\n This uses the same algorithm that hostile mobs use to find the closest\n player.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"other","comment_text":"the entity to determine line of sight to","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getRemoveWhenFarAway","comment_text":"Returns if the living entity despawns when away from players or not.\n <p>\n By default, animals are not removed while other mobs are.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRemoveWhenFarAway","comment_text":"Sets whether or not the living entity despawns when away from players\n or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"remove","comment_text":"the removal status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEquipment","comment_text":"Gets the inventory with the equipment worn by the living entity.","return_type":"org.bukkit.inventory.EntityEquipment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCanPickupItems","comment_text":"Sets whether or not the living entity can pick up items.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pickup","comment_text":"whether or not the living entity can pick up items","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getCanPickupItems","comment_text":"Gets if the living entity can pick up items.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLeashed","comment_text":"Returns whether the entity is currently leashed.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLeashHolder","comment_text":"Gets the entity that is currently leading this entity.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if not currently leashed"}]},{"name":"setLeashHolder","comment_text":"Sets the leash on this entity to be held by the supplied entity.\n <p>\n This method has no effect on EnderDragons, Withers, Players, or Bats.\n Non-living entities excluding leashes will not persist as leash\n holders.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"holder","comment_text":"the entity to leash this entity to","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"isGliding","comment_text":"Checks to see if an entity is gliding, such as using an Elytra.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGliding","comment_text":"Makes entity start or stop gliding. This will work even if an Elytra\n is not equipped, but will be reverted by the server immediately after\n unless an event-cancelling mechanism is put in place.","return_type":"void","return_type_dimension":"","parameters":[{"name":"gliding","comment_text":"True if the entity is gliding.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSwimming","comment_text":"Checks to see if an entity is swimming.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSwimming","comment_text":"Makes entity start or stop swimming.\n\n This may have unexpected results if the entity is not in water.","return_type":"void","return_type_dimension":"","parameters":[{"name":"swimming","comment_text":"True if the entity is swimming.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isRiptiding","comment_text":"Checks to see if an entity is currently using the Riptide enchantment.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAI","comment_text":"Sets whether an entity will have AI.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ai","comment_text":"whether the mob will have AI or not.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"hasAI","comment_text":"Checks whether an entity has AI.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCollidable","comment_text":"Set if this entity will be subject to collisions other entities.\n <p>\n Note that collisions are bidirectional, so this method would need to be\n set to false on both the collidee and the collidant to ensure no\n collisions take place.","return_type":"void","return_type_dimension":"","parameters":[{"name":"collidable","comment_text":"collision status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCollidable","comment_text":"Gets if this entity is subject to collisions with other entities.\n <p>\n Please note that this method returns only the custom collidable state,\n not whether the entity is non-collidable for other reasons such as being\n dead.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.LingeringPotion","interfaces":["org.bukkit.entity.ThrownPotion"],"superclass":"","comment_text":"Represents a thrown lingering potion bottle","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.LightningStrike","interfaces":["org.bukkit.entity.Weather"],"superclass":"","comment_text":"Represents an instance of a lightning strike. May or may not do damage.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isEffect","comment_text":"Returns whether the strike is an effect that does no damage.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.LeashHitch","interfaces":["org.bukkit.entity.Hanging"],"superclass":"","comment_text":"Represents a Leash Hitch on a fence","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.LargeFireball","interfaces":["org.bukkit.entity.Fireball"],"superclass":"","comment_text":"Represents a large {@link Fireball}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.ItemFrame","interfaces":["org.bukkit.entity.Hanging"],"superclass":"","comment_text":"Represents an Item Frame","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItem","comment_text":"Get the item in this frame","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Set the item in this frame","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getRotation","comment_text":"Get the rotation of the frame's item","return_type":"org.bukkit.Rotation","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRotation","comment_text":"Set the rotation of the frame's item","return_type":"void","return_type_dimension":"","parameters":[{"name":"rotation","comment_text":"the new rotation","type":"org.bukkit.Rotation","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if rotation is null"}]}],"enumConstants":[]},{"name":"org.bukkit.entity.Item","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents an Item.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItemStack","comment_text":"Gets the item stack associated with this item drop.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemStack","comment_text":"Sets the item stack associated with this item drop.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"An item stack.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getPickupDelay","comment_text":"Gets the delay before this Item is available to be picked up by players","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPickupDelay","comment_text":"Sets the delay before this Item is available to be picked up by players","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"New delay","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.IronGolem","interfaces":["org.bukkit.entity.Golem"],"superclass":"","comment_text":"An iron Golem that protects Villages.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPlayerCreated","comment_text":"Gets whether this iron golem was built by a player.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPlayerCreated","comment_text":"Sets whether this iron golem was built by a player or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"playerCreated","comment_text":"true if you want to set the iron golem as being\n     player created, false if you want it to be a natural village golem.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Illusioner","interfaces":["org.bukkit.entity.Spellcaster"],"superclass":"","comment_text":"Represents an Illusioner \"Illager\".","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Illager","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a type of \"Illager\".","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Husk","interfaces":["org.bukkit.entity.Zombie"],"superclass":"","comment_text":"Represents a Husk - variant of {@link Zombie}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.HumanEntity","interfaces":["org.bukkit.entity.LivingEntity","org.bukkit.entity.AnimalTamer","org.bukkit.permissions.Permissible","org.bukkit.inventory.InventoryHolder"],"superclass":"","comment_text":"Represents a human entity, such as an NPC or a player","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getName","comment_text":"Returns the name of this player","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInventory","comment_text":"Get the player's inventory.","return_type":"org.bukkit.inventory.PlayerInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEnderChest","comment_text":"Get the player's EnderChest inventory","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMainHand","comment_text":"Gets the player's selected main hand","return_type":"org.bukkit.inventory.MainHand","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWindowProperty","comment_text":"If the player currently has an inventory window open, this method will\n set a property of that window, such as the state of a progress bar.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"prop","comment_text":"The property.","type":"org.bukkit.inventory.InventoryView.Property","type_dimension":""},{"name":"value","comment_text":"The value to set the property to.","type":"int","type_dimension":""}],"throws":[]},{"name":"getOpenInventory","comment_text":"Gets the inventory view the player is currently viewing. If they do not\n have an inventory window open, it returns their internal crafting view.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[],"throws":[]},{"name":"openInventory","comment_text":"Opens an inventory window with the specified inventory on the top and\n the player's inventory on the bottom.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[{"name":"inventory","comment_text":"The inventory to open","type":"org.bukkit.inventory.Inventory","type_dimension":""}],"throws":[]},{"name":"openWorkbench","comment_text":"Opens an empty workbench inventory window with the player's inventory\n on the bottom.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to attach it to. If null, the player's\n     location is used.","type":"org.bukkit.Location","type_dimension":""},{"name":"force","comment_text":"If false, and there is no workbench block at the location,\n     no inventory will be opened and null will be returned.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"openEnchanting","comment_text":"Opens an empty enchanting inventory window with the player's inventory\n on the bottom.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[{"name":"location","comment_text":"The location to attach it to. If null, the player's\n     location is used.","type":"org.bukkit.Location","type_dimension":""},{"name":"force","comment_text":"If false, and there is no enchanting table at the\n     location, no inventory will be opened and null will be returned.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"openInventory","comment_text":"Opens an inventory window to the specified inventory view.","return_type":"void","return_type_dimension":"","parameters":[{"name":"inventory","comment_text":"The view to open","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"throws":[]},{"name":"openMerchant","comment_text":"Starts a trade between the player and the villager.\n\n Note that only one player may trade with a villager at once. You must use\n the force parameter for this.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[{"name":"trader","comment_text":"The merchant to trade with. Cannot be null.","type":"org.bukkit.entity.Villager","type_dimension":""},{"name":"force","comment_text":"whether to force the trade even if another player is trading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"openMerchant","comment_text":"Starts a trade between the player and the merchant.\n\n Note that only one player may trade with a merchant at once. You must use\n the force parameter for this.","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[{"name":"merchant","comment_text":"The merchant to trade with. Cannot be null.","type":"org.bukkit.inventory.Merchant","type_dimension":""},{"name":"force","comment_text":"whether to force the trade even if another player is trading","type":"boolean","type_dimension":""}],"throws":[]},{"name":"closeInventory","comment_text":"Force-closes the currently open inventory view for this player, if any.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemInHand","comment_text":"Returns the ItemStack currently in your hand, can be empty.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInHand","comment_text":"Sets the item to the given ItemStack, this will replace whatever the\n user was holding.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack which will end up in the hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemOnCursor","comment_text":"Returns the ItemStack currently on your cursor, can be empty. Will\n always be empty if the player currently has no open window.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemOnCursor","comment_text":"Sets the item to the given ItemStack, this will replace whatever the\n user was moving. Will always be empty if the player currently has no\n open window.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack which will end up in the hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"hasCooldown","comment_text":"Check whether a cooldown is active on the specified material.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material to check","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"getCooldown","comment_text":"Get the cooldown time in ticks remaining for the specified material.","return_type":"int","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material to check","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setCooldown","comment_text":"Set a cooldown on the specified material for a certain amount of ticks.\n ticks. 0 ticks will result in the removal of the cooldown.\n <p>\n Cooldowns are used by the server for items such as ender pearls and\n shields to prevent them from being used repeatedly.\n <p>\n Note that cooldowns will not by themselves stop an item from being used\n for attacking.","return_type":"void","return_type_dimension":"","parameters":[{"name":"material","comment_text":"the material to set the cooldown for","type":"org.bukkit.Material","type_dimension":""},{"name":"ticks","comment_text":"the amount of ticks to set or 0 to remove","type":"int","type_dimension":""}],"throws":[]},{"name":"isSleeping","comment_text":"Returns whether this player is slumbering.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSleepTicks","comment_text":"Get the sleep ticks of the player. This value may be capped.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGameMode","comment_text":"Gets this human's current {@link GameMode}","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGameMode","comment_text":"Sets this human's current {@link GameMode}","return_type":"void","return_type_dimension":"","parameters":[{"name":"mode","comment_text":"New game mode","type":"org.bukkit.GameMode","type_dimension":""}],"throws":[]},{"name":"isBlocking","comment_text":"Check if the player is currently blocking (ie with a shield).","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isHandRaised","comment_text":"Check if the player currently has their hand raised (ie about to begin\n blocking).","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getExpToLevel","comment_text":"Get the total amount of experience required for the player to level","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShoulderEntityLeft","comment_text":"Gets the entity currently perched on the left shoulder or null if no\n entity.\n <br>\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShoulderEntityLeft","comment_text":"Sets the entity currently perched on the left shoulder, or null to\n remove. This method will remove the entity from the world.\n <br>\n Note that only a copy of the entity will be set to display on the\n shoulder.\n <br>\n Also note that the client will currently only render {@link Parrot}\n entities.","return_type":"void","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"left shoulder entity","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getShoulderEntityRight","comment_text":"Gets the entity currently perched on the right shoulder or null if no\n entity.\n <br>\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShoulderEntityRight","comment_text":"Sets the entity currently perched on the right shoulder, or null to\n remove. This method will remove the entity from the world.\n <br>\n Note that only a copy of the entity will be set to display on the\n shoulder.\n <br>\n Also note that the client will currently only render {@link Parrot}\n entities.","return_type":"void","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"right shoulder entity","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Horse","interfaces":["org.bukkit.entity.AbstractHorse"],"superclass":"","comment_text":"Represents a Horse.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the horse's color.\n <p>\n Colors only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.","return_type":"org.bukkit.entity.Horse.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the horse's color.\n <p>\n Attempting to set a color for any donkey, mule, skeleton horse or\n undead horse will not result in a change.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"a {@link Color} for this horse","type":"org.bukkit.entity.Horse.Color","type_dimension":""}],"throws":[]},{"name":"getStyle","comment_text":"Gets the horse's style.\n Styles determine what kind of markings or patterns a horse has.\n <p>\n Styles only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.","return_type":"org.bukkit.entity.Horse.Style","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStyle","comment_text":"Sets the style of this horse.\n Styles determine what kind of markings or patterns a horse has.\n <p>\n Attempting to set a style for any donkey, mule, skeleton horse or\n undead horse will not result in a change.","return_type":"void","return_type_dimension":"","parameters":[{"name":"style","comment_text":"a {@link Style} for this horse","type":"org.bukkit.entity.Horse.Style","type_dimension":""}],"throws":[]},{"name":"isCarryingChest","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCarryingChest","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"chest","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.HorseInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Horse.Variant","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Horse.Variant","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Horse.Variant","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["HORSE","DONKEY","MULE","UNDEAD_HORSE","SKELETON_HORSE","LLAMA"]},{"name":"org.bukkit.entity.Horse.Color","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the base color that the horse has.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Horse.Color","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Horse.Color","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["WHITE","CREAMY","CHESTNUT","BROWN","BLACK","GRAY","DARK_BROWN"]},{"name":"org.bukkit.entity.Horse.Style","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the style, or markings, that the horse has.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Horse.Style","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Horse.Style","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NONE","WHITE","WHITEFIELD","WHITE_DOTS","BLACK_DOTS"]},{"name":"org.bukkit.entity.Hanging","interfaces":["org.bukkit.entity.Entity","org.bukkit.material.Attachable"],"superclass":"","comment_text":"Represents a Hanging entity","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"Sets the direction of the hanging entity, potentially overriding rules\n of placement. Note that if the result is not valid the object would\n normally drop as an item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The new direction.","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"force","comment_text":"Whether to force it.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Guardian","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isElder","comment_text":"Check if the Guardian is an elder Guardian","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setElder","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"shouldBeElder","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Golem","interfaces":["org.bukkit.entity.Creature"],"superclass":"","comment_text":"A mechanical creature that may harm enemies.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Giant","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Giant.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Ghast","interfaces":["org.bukkit.entity.Flying"],"superclass":"","comment_text":"Represents a Ghast.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Flying","interfaces":["org.bukkit.entity.Mob"],"superclass":"","comment_text":"Represents a Flying Entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.FishHook","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a fishing hook.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBiteChance","comment_text":"Gets the chance of a fish biting.\n <p>\n 0.0 = No Chance.<br>\n 1.0 = Instant catch.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBiteChance","comment_text":"Sets the chance of a fish biting.\n <p>\n 0.0 = No Chance.<br>\n 1.0 = Instant catch.","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"the bite chance","type":"double","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the bite chance is not between 0\n     and 1"}]}],"enumConstants":[]},{"name":"org.bukkit.entity.Fish","interfaces":["org.bukkit.entity.WaterMob"],"superclass":"","comment_text":"Represents a fish entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Firework","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getFireworkMeta","comment_text":"Get a copy of the fireworks meta","return_type":"org.bukkit.inventory.meta.FireworkMeta","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFireworkMeta","comment_text":"Apply the provided meta to the fireworks","return_type":"void","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"The FireworkMeta to apply","type":"org.bukkit.inventory.meta.FireworkMeta","type_dimension":""}],"throws":[]},{"name":"detonate","comment_text":"Cause this firework to explode at earliest opportunity, as if it has no\n remaining fuse.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Fireball","interfaces":["org.bukkit.entity.Projectile","org.bukkit.entity.Explosive"],"superclass":"","comment_text":"Represents a Fireball.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setDirection","comment_text":"Fireballs fly straight and do not take setVelocity(...) well.","return_type":"void","return_type_dimension":"","parameters":[{"name":"direction","comment_text":"the direction this fireball is flying toward","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getDirection","comment_text":"Retrieve the direction this fireball is heading toward","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.FallingBlock","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents a falling block","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMaterial","comment_text":"Get the Material of the falling block","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockData","comment_text":"Get the data for the falling block","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDropItem","comment_text":"Get if the falling block will break into an item if it cannot be placed","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDropItem","comment_text":"Set if the falling block will break into an item if it cannot be placed","return_type":"void","return_type_dimension":"","parameters":[{"name":"drop","comment_text":"true to break into an item when obstructed","type":"boolean","type_dimension":""}],"throws":[]},{"name":"canHurtEntities","comment_text":"Get the HurtEntities state of this block.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHurtEntities","comment_text":"Set the HurtEntities state of this block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"hurtEntities","comment_text":"whether entities will be damaged by this block.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Explosive","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"A representation of an explosive entity","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setYield","comment_text":"Set the radius affected by this explosive's explosion","return_type":"void","return_type_dimension":"","parameters":[{"name":"yield","comment_text":"The explosive yield","type":"float","type_dimension":""}],"throws":[]},{"name":"getYield","comment_text":"Return the radius or yield of this explosive's explosion","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setIsIncendiary","comment_text":"Set whether or not this explosive's explosion causes fire","return_type":"void","return_type_dimension":"","parameters":[{"name":"isIncendiary","comment_text":"Whether it should cause fire","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isIncendiary","comment_text":"Return whether or not this explosive creates a fire when exploding","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ExperienceOrb","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents an Experience Orb.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getExperience","comment_text":"Gets how much experience is contained within this orb","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExperience","comment_text":"Sets how much experience is contained within this orb","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Amount of experience","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EvokerFangs","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents Evoker Fangs.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getOwner","comment_text":"Gets the {@link LivingEntity} which summoned the fangs.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwner","comment_text":"Sets the {@link LivingEntity} which summoned the fangs.","return_type":"void","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the {@link LivingEntity} which summoned the fangs","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Evoker","interfaces":["org.bukkit.entity.Spellcaster"],"superclass":"","comment_text":"Represents an Evoker \"Illager\".","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCurrentSpell","comment_text":"Gets the {@link Spell} the Evoker is currently using.","return_type":"org.bukkit.entity.Evoker.Spell","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCurrentSpell","comment_text":"Sets the {@link Spell} the Evoker is currently using.","return_type":"void","return_type_dimension":"","parameters":[{"name":"spell","comment_text":"the spell the evoker should be using","type":"org.bukkit.entity.Evoker.Spell","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Evoker.Spell","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the current spell the Evoker is using.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Evoker.Spell","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Evoker.Spell","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NONE","SUMMON","FANGS","WOLOLO","DISAPPEAR","BLINDNESS"]},{"name":"org.bukkit.entity.EntityType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntityClass","comment_text":"","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTypeId","comment_text":"","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"fromName","comment_text":"","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the entity type's name","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"fromId","comment_text":"","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the raw type id","type":"int","type_dimension":""}],"throws":[]},{"name":"isSpawnable","comment_text":"Some entities cannot be spawned using {@link\n World#spawnEntity(Location, EntityType)} or {@link\n World#spawn(Location, Class)}, usually because they require additional\n information in order to spawn.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isAlive","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["DROPPED_ITEM","EXPERIENCE_ORB","AREA_EFFECT_CLOUD","ELDER_GUARDIAN","WITHER_SKELETON","STRAY","EGG","LEASH_HITCH","PAINTING","ARROW","SNOWBALL","FIREBALL","SMALL_FIREBALL","ENDER_PEARL","ENDER_SIGNAL","SPLASH_POTION","THROWN_EXP_BOTTLE","ITEM_FRAME","WITHER_SKULL","PRIMED_TNT","FALLING_BLOCK","FIREWORK","HUSK","SPECTRAL_ARROW","SHULKER_BULLET","DRAGON_FIREBALL","ZOMBIE_VILLAGER","SKELETON_HORSE","ZOMBIE_HORSE","ARMOR_STAND","DONKEY","MULE","EVOKER_FANGS","EVOKER","VEX","VINDICATOR","ILLUSIONER","MINECART_COMMAND","BOAT","MINECART","MINECART_CHEST","MINECART_FURNACE","MINECART_TNT","MINECART_HOPPER","MINECART_MOB_SPAWNER","CREEPER","SKELETON","SPIDER","GIANT","ZOMBIE","SLIME","GHAST","PIG_ZOMBIE","ENDERMAN","CAVE_SPIDER","SILVERFISH","BLAZE","MAGMA_CUBE","ENDER_DRAGON","WITHER","BAT","WITCH","ENDERMITE","GUARDIAN","SHULKER","PIG","SHEEP","COW","CHICKEN","SQUID","WOLF","MUSHROOM_COW","SNOWMAN","OCELOT","IRON_GOLEM","HORSE","RABBIT","POLAR_BEAR","LLAMA","LLAMA_SPIT","PARROT","VILLAGER","ENDER_CRYSTAL","TURTLE","PHANTOM","TRIDENT","COD","SALMON","PUFFERFISH","TROPICAL_FISH","DROWNED","DOLPHIN","LINGERING_POTION","FISHING_HOOK","LIGHTNING","WEATHER","PLAYER","COMPLEX_PART","TIPPED_ARROW","UNKNOWN"]},{"name":"org.bukkit.entity.Entity","interfaces":["org.bukkit.metadata.Metadatable","org.bukkit.command.CommandSender","org.bukkit.Nameable"],"superclass":"","comment_text":"Represents a base entity in the world","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getLocation","comment_text":"Gets the entity's current position","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Stores the entity's current position in the provided Location object.\n <p>\n If the provided Location is null this method does nothing and returns\n null.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"loc","comment_text":"the location to copy into","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"setVelocity","comment_text":"Sets this entity's velocity","return_type":"void","return_type_dimension":"","parameters":[{"name":"velocity","comment_text":"New velocity to travel with","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getVelocity","comment_text":"Gets this entity's current velocity","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHeight","comment_text":"Gets the entity's height","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWidth","comment_text":"Gets the entity's width","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isOnGround","comment_text":"Returns true if the entity is supported by a block. This value is a\n state updated by the server and is not recalculated unless the entity\n moves.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWorld","comment_text":"Gets the current world this entity resides in","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"teleport","comment_text":"Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"New location to teleport this entity to","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"teleport","comment_text":"Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"location","comment_text":"New location to teleport this entity to","type":"org.bukkit.Location","type_dimension":""},{"name":"cause","comment_text":"The cause of this teleportation","type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","type_dimension":""}],"throws":[]},{"name":"teleport","comment_text":"Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"destination","comment_text":"Entity to teleport this entity to","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"teleport","comment_text":"Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"destination","comment_text":"Entity to teleport this entity to","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"The cause of this teleportation","type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","type_dimension":""}],"throws":[]},{"name":"getNearbyEntities","comment_text":"Returns a list of entities within a bounding box centered around this\n entity","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"x","comment_text":"1/2 the size of the box along x axis","type":"double","type_dimension":""},{"name":"y","comment_text":"1/2 the size of the box along y axis","type":"double","type_dimension":""},{"name":"z","comment_text":"1/2 the size of the box along z axis","type":"double","type_dimension":""}],"throws":[]},{"name":"getEntityId","comment_text":"Returns a unique id for this entity","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFireTicks","comment_text":"Returns the entity's current fire ticks (ticks before the entity stops\n being on fire).","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxFireTicks","comment_text":"Returns the entity's maximum fire ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFireTicks","comment_text":"Sets the entity's current fire ticks (ticks before the entity stops\n being on fire).","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"Current ticks remaining","type":"int","type_dimension":""}],"throws":[]},{"name":"remove","comment_text":"Mark the entity's removal.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isDead","comment_text":"Returns true if this entity has been marked for removal.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isValid","comment_text":"Returns false if the entity has died or been despawned for some other\n reason.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServer","comment_text":"Gets the {@link Server} that contains this Entity","return_type":"org.bukkit.Server","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPersistent","comment_text":"Returns true if the entity gets persisted.\n <p>\n By default all entities are persistent. An entity will also not get\n persisted, if it is riding an entity that is not persistent.\n <p>\n The persistent flag has no effect on players. If a player is directly or\n indirectly riding a non-persistent entity, the vehicle at the root and\n all its passengers won't get persisted.\n <p>\n <b>This should not be confused with\n {@link LivingEntity#setRemoveWhenFarAway(boolean)} which controls\n despawning of living entities. </b>","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPersistent","comment_text":"Sets whether or not the entity gets persisted.","return_type":"void","return_type_dimension":"","parameters":[{"name":"persistent","comment_text":"the persistence status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPassenger","comment_text":"Gets the primary passenger of a vehicle. For vehicles that could have\n multiple passengers, this will only return the primary passenger.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPassenger","comment_text":"Set the passenger of a vehicle.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"passenger","comment_text":"The new passenger.","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getPassengers","comment_text":"Gets a list of passengers of this vehicle.\n <p>\n The returned list will not be directly linked to the entity's current\n passengers, and no guarantees are made as to its mutability.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addPassenger","comment_text":"Add a passenger to the vehicle.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"passenger","comment_text":"The passenger to add","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"removePassenger","comment_text":"Remove a passenger from the vehicle.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"passenger","comment_text":"The passenger to remove","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"isEmpty","comment_text":"Check if a vehicle has passengers.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"eject","comment_text":"Eject any passenger.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFallDistance","comment_text":"Returns the distance this entity has fallen","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFallDistance","comment_text":"Sets the fall distance for this entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"distance","comment_text":"The new distance.","type":"float","type_dimension":""}],"throws":[]},{"name":"setLastDamageCause","comment_text":"Record the last {@link EntityDamageEvent} inflicted on this entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"a {@link EntityDamageEvent}","type":"org.bukkit.event.entity.EntityDamageEvent","type_dimension":""}],"throws":[]},{"name":"getLastDamageCause","comment_text":"Retrieve the last {@link EntityDamageEvent} inflicted on this entity.\n This event may have been cancelled.","return_type":"org.bukkit.event.entity.EntityDamageEvent","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUniqueId","comment_text":"Returns a unique and persistent id for this entity","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTicksLived","comment_text":"Gets the amount of ticks this entity has lived for.\n <p>\n This is the equivalent to \"age\" in entities.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTicksLived","comment_text":"Sets the amount of ticks this entity has lived for.\n <p>\n This is the equivalent to \"age\" in entities. May not be less than one\n tick.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"Age of entity","type":"int","type_dimension":""}],"throws":[]},{"name":"playEffect","comment_text":"Performs the specified {@link EntityEffect} for this entity.\n <p>\n This will be viewable to all players near the entity.\n <p>\n If the effect is not applicable to this class of entity, it will not play.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"Effect to play.","type":"org.bukkit.EntityEffect","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"Get the type of the entity.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInsideVehicle","comment_text":"Returns whether this entity is inside a vehicle.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"leaveVehicle","comment_text":"Leave the current vehicle. If the entity is currently in a vehicle (and\n is removed from it), true will be returned, otherwise false will be\n returned.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getVehicle","comment_text":"Get the vehicle that this player is inside. If there is no vehicle,\n null will be returned.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCustomNameVisible","comment_text":"Sets whether or not to display the mob's custom name client side. The\n name will be displayed above the mob similarly to a player.\n <p>\n This value has no effect on players, they will always display their\n name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"custom name or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCustomNameVisible","comment_text":"Gets whether or not the mob's custom name is displayed client side.\n <p>\n This value has no effect on players, they will always display their\n name.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGlowing","comment_text":"Sets whether the entity has a team colored (default: white) glow.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"if the entity is glowing","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isGlowing","comment_text":"Gets whether the entity is glowing or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInvulnerable","comment_text":"Sets whether the entity is invulnerable or not.\n <p>\n When an entity is invulnerable it can only be damaged by players in\n creative mode.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"if the entity is invulnerable","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isInvulnerable","comment_text":"Gets whether the entity is invulnerable or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSilent","comment_text":"Gets whether the entity is silent or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSilent","comment_text":"Sets whether the entity is silent or not.\n <p>\n When an entity is silent it will not produce any sound.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"if the entity is silent","type":"boolean","type_dimension":""}],"throws":[]},{"name":"hasGravity","comment_text":"Returns whether gravity applies to this entity.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGravity","comment_text":"Sets whether gravity applies to this entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"gravity","comment_text":"whether gravity should apply","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPortalCooldown","comment_text":"Gets the period of time (in ticks) before this entity can use a portal.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPortalCooldown","comment_text":"Sets the period of time (in ticks) before this entity can use a portal.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cooldown","comment_text":"portal cooldown ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"getScoreboardTags","comment_text":"Returns a set of tags for this entity.\n <br>\n Entities can have no more than 1024 tags.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addScoreboardTag","comment_text":"Add a tag to this entity.\n <br>\n Entities can have no more than 1024 tags.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"tag","comment_text":"the tag to add","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"removeScoreboardTag","comment_text":"Removes a given tag from this entity.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"tag","comment_text":"the tag to remove","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPistonMoveReaction","comment_text":"Returns the reaction of the entity when moved by a piston.","return_type":"org.bukkit.block.PistonMoveReaction","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFacing","comment_text":"Get the closest cardinal {@link BlockFace} direction an entity is\n currently facing.\n <br>\n This will not return any non-cardinal directions such as\n {@link BlockFace#UP} or {@link BlockFace#DOWN}.\n <br>\n {@link Hanging} entities will override this call and thus their behavior\n may be different.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EnderSignal","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents an EnderSignal, which is created upon throwing an ender eye.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTargetLocation","comment_text":"Get the location this EnderSignal is moving towards.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTargetLocation","comment_text":"Set the {@link Location} this EnderSignal is moving towards.\n <br>\n When setting a new target location, the {@link #getDropItem()} resets to\n a random value and the despawn timer gets set back to 0.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the new target location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getDropItem","comment_text":"Gets if the EnderSignal should drop an item on death.<br>\n If {@code true}, it will drop an item. If {@code false}, it will shatter.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDropItem","comment_text":"Sets if the EnderSignal should drop an item on death; or if it should\n shatter.","return_type":"void","return_type_dimension":"","parameters":[{"name":"drop","comment_text":"true if the EnderSignal should drop an item on death, or\n false if it should shatter.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getDespawnTimer","comment_text":"Gets the amount of time this entity has been alive (in ticks).\n <br>\n When this number is greater than 80, it will despawn on the next tick.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDespawnTimer","comment_text":"Set how long this entity has been alive (in ticks).\n <br>\n When this number is greater than 80, it will despawn on the next tick.","return_type":"void","return_type_dimension":"","parameters":[{"name":"timer","comment_text":"how long (in ticks) this EnderSignal has been alive.","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EnderPearl","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a thrown Ender Pearl entity","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Endermite","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Enderman","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents an Enderman.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCarriedMaterial","comment_text":"Gets the id and data of the block that the Enderman is carrying.","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCarriedMaterial","comment_text":"Sets the id and data of the block that the Enderman is carrying.","return_type":"void","return_type_dimension":"","parameters":[{"name":"material","comment_text":"data to set the carried block to","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"getCarriedBlock","comment_text":"Gets the data of the block that the Enderman is carrying.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCarriedBlock","comment_text":"Sets the data of the block that the Enderman is carrying.","return_type":"void","return_type_dimension":"","parameters":[{"name":"blockData","comment_text":"data to set the carried block to, or null to remove","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EnderDragonPart","interfaces":["org.bukkit.entity.ComplexEntityPart","org.bukkit.entity.Damageable"],"superclass":"","comment_text":"Represents an ender dragon part","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getParent","comment_text":"","return_type":"org.bukkit.entity.EnderDragon","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EnderDragon","interfaces":["org.bukkit.entity.ComplexLivingEntity"],"superclass":"","comment_text":"Represents an Ender Dragon","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPhase","comment_text":"Gets the current phase that the dragon is performing.","return_type":"org.bukkit.entity.EnderDragon.Phase","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPhase","comment_text":"Sets the next phase for the dragon to perform.","return_type":"void","return_type_dimension":"","parameters":[{"name":"phase","comment_text":"the next phase","type":"org.bukkit.entity.EnderDragon.Phase","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.EnderDragon.Phase","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents a phase or action that an Ender Dragon can perform.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.EnderDragon.Phase","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.EnderDragon.Phase","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["CIRCLING","STRAFING","FLY_TO_PORTAL","LAND_ON_PORTAL","LEAVE_PORTAL","BREATH_ATTACK","SEARCH_FOR_BREATH_ATTACK_TARGET","ROAR_BEFORE_ATTACK","CHARGE_PLAYER","DYING","HOVER"]},{"name":"org.bukkit.entity.EnderCrystal","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"A crystal that heals nearby EnderDragons","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isShowingBottom","comment_text":"Return whether or not this end crystal is showing the\n bedrock slate underneath it.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShowingBottom","comment_text":"Sets whether or not this end crystal is showing the\n bedrock slate underneath it.","return_type":"void","return_type_dimension":"","parameters":[{"name":"showing","comment_text":"whether the bedrock slate should be shown","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getBeamTarget","comment_text":"Gets the location that this end crystal is pointing its beam to.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBeamTarget","comment_text":"Sets the location that this end crystal is pointing to. Passing a null\n value will remove the current beam.","return_type":"void","return_type_dimension":"","parameters":[{"name":"location","comment_text":"the location to point the beam to","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ElderGuardian","interfaces":["org.bukkit.entity.Guardian"],"superclass":"","comment_text":"Represents an ElderGuardian - variant of {@link Guardian}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Egg","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents a thrown egg.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Drowned","interfaces":["org.bukkit.entity.Zombie"],"superclass":"","comment_text":"Drowned zombie.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.DragonFireball","interfaces":["org.bukkit.entity.Fireball"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Donkey","interfaces":["org.bukkit.entity.ChestedHorse"],"superclass":"","comment_text":"Represents a Donkey - variant of {@link ChestedHorse}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Dolphin","interfaces":["org.bukkit.entity.WaterMob"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Damageable","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents an {@link Entity} that has health and can take damage.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"damage","comment_text":"Deals the given amount of damage to this entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"Amount of damage to deal","type":"double","type_dimension":""}],"throws":[]},{"name":"damage","comment_text":"Deals the given amount of damage to this entity, from a specified\n entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"Amount of damage to deal","type":"double","type_dimension":""},{"name":"source","comment_text":"Entity which to attribute this damage from","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getHealth","comment_text":"Gets the entity's health from 0 to {@link #getMaxHealth()}, where 0 is dead.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHealth","comment_text":"Sets the entity's health from 0 to {@link #getMaxHealth()}, where 0 is\n dead.","return_type":"void","return_type_dimension":"","parameters":[{"name":"health","comment_text":"New health represented from 0 to max","type":"double","type_dimension":""}],"throws":[]},{"name":"getMaxHealth","comment_text":"Gets the maximum health this entity has.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxHealth","comment_text":"Sets the maximum health this entity can have.\n <p>\n If the health of the entity is above the value provided it will be set\n to that value.\n <p>\n Note: An entity with a health bar ({@link Player}, {@link EnderDragon},\n {@link Wither}, etc...} will have their bar scaled accordingly.","return_type":"void","return_type_dimension":"","parameters":[{"name":"health","comment_text":"amount of health to set the maximum to","type":"double","type_dimension":""}],"throws":[]},{"name":"resetMaxHealth","comment_text":"Resets the max health to the original amount.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Creeper","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Creeper","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPowered","comment_text":"Checks if this Creeper is powered (Electrocuted)","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Sets the Powered status of this Creeper","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"New Powered status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setMaxFuseTicks","comment_text":"Set the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ticks","comment_text":"the new maximum fuse ticks","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxFuseTicks","comment_text":"Get the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExplosionRadius","comment_text":"Set the explosion radius in which this Creeper's explosion will affect.","return_type":"void","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"the new explosion radius","type":"int","type_dimension":""}],"throws":[]},{"name":"getExplosionRadius","comment_text":"Get the explosion radius in which this Creeper's explosion will affect.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Creature","interfaces":["org.bukkit.entity.Mob"],"superclass":"","comment_text":"Represents a Creature. Creatures are non-intelligent monsters or animals\n which have very simple abilities.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Cow","interfaces":["org.bukkit.entity.Animals"],"superclass":"","comment_text":"Represents a Cow.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.ComplexLivingEntity","interfaces":["org.bukkit.entity.LivingEntity"],"superclass":"","comment_text":"Represents a complex living entity - one that is made up of various smaller\n parts","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getParts","comment_text":"Gets a list of parts that belong to this complex entity","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.ComplexEntityPart","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents a single part of a {@link ComplexLivingEntity}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getParent","comment_text":"Gets the parent {@link ComplexLivingEntity} of this part.","return_type":"org.bukkit.entity.ComplexLivingEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Cod","interfaces":["org.bukkit.entity.Fish"],"superclass":"","comment_text":"Represents a cod fish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Chicken","interfaces":["org.bukkit.entity.Animals"],"superclass":"","comment_text":"Represents a Chicken.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.ChestedHorse","interfaces":["org.bukkit.entity.AbstractHorse"],"superclass":"","comment_text":"Represents Horse-like creatures which can carry an inventory.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isCarryingChest","comment_text":"Gets whether the horse has a chest equipped.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCarryingChest","comment_text":"Sets whether the horse has a chest equipped. Removing a chest will also\n clear the chest's inventory.","return_type":"void","return_type_dimension":"","parameters":[{"name":"chest","comment_text":"true if the horse should have a chest","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.CaveSpider","interfaces":["org.bukkit.entity.Spider"],"superclass":"","comment_text":"Represents a Spider.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Boat","interfaces":["org.bukkit.entity.Vehicle"],"superclass":"","comment_text":"Represents a boat entity.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getWoodType","comment_text":"Gets the wood type of the boat.","return_type":"org.bukkit.TreeSpecies","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWoodType","comment_text":"Sets the wood type of the boat.","return_type":"void","return_type_dimension":"","parameters":[{"name":"species","comment_text":"the new wood type","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"getMaxSpeed","comment_text":"Gets the maximum speed of a boat. The speed is unrelated to the\n velocity.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxSpeed","comment_text":"Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.","return_type":"void","return_type_dimension":"","parameters":[{"name":"speed","comment_text":"The max speed.","type":"double","type_dimension":""}],"throws":[]},{"name":"getOccupiedDeceleration","comment_text":"Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied\n boats. The default is 0.2.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOccupiedDeceleration","comment_text":"Sets the deceleration rate (newSpeed = curSpeed * rate) of occupied\n boats. Setting this to a higher value allows for quicker acceleration.\n The default is 0.2.","return_type":"void","return_type_dimension":"","parameters":[{"name":"rate","comment_text":"deceleration rate","type":"double","type_dimension":""}],"throws":[]},{"name":"getUnoccupiedDeceleration","comment_text":"Gets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\n boats. The default is -1. Values below 0 indicate that no additional\n deceleration is imposed.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUnoccupiedDeceleration","comment_text":"Sets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\n boats. Setting this to a higher value allows for quicker deceleration\n of boats when a player disembarks. The default is -1. Values below 0\n indicate that no additional deceleration is imposed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"rate","comment_text":"deceleration rate","type":"double","type_dimension":""}],"throws":[]},{"name":"getWorkOnLand","comment_text":"Get whether boats can work on land.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWorkOnLand","comment_text":"Set whether boats can work on land.","return_type":"void","return_type_dimension":"","parameters":[{"name":"workOnLand","comment_text":"whether boats can work on land","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Blaze","interfaces":["org.bukkit.entity.Monster"],"superclass":"","comment_text":"Represents a Blaze monster","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Bat","interfaces":["org.bukkit.entity.Ambient"],"superclass":"","comment_text":"Represents a Bat","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isAwake","comment_text":"Checks the current waking state of this bat.\n <p>\n This does not imply any persistence of state past the method call.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAwake","comment_text":"This method modifies the current waking state of this bat.\n <p>\n This does not prevent a bat from spontaneously awaking itself, or from\n reattaching itself to a block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"state","comment_text":"the new state","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Arrow","interfaces":["org.bukkit.entity.Projectile"],"superclass":"","comment_text":"Represents an arrow.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getKnockbackStrength","comment_text":"Gets the knockback strength for an arrow, which is the\n {@link org.bukkit.enchantments.Enchantment#KNOCKBACK KnockBack} level\n of the bow that shot it.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKnockbackStrength","comment_text":"Sets the knockback strength for an arrow.","return_type":"void","return_type_dimension":"","parameters":[{"name":"knockbackStrength","comment_text":"the knockback strength value","type":"int","type_dimension":""}],"throws":[]},{"name":"isCritical","comment_text":"Gets whether this arrow is critical.\n <p>\n Critical arrows have increased damage and cause particle effects.\n <p>\n Critical arrows generally occur when a player fully draws a bow before\n firing.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCritical","comment_text":"Sets whether or not this arrow should be critical.","return_type":"void","return_type_dimension":"","parameters":[{"name":"critical","comment_text":"whether or not it should be critical","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isInBlock","comment_text":"Gets whether this arrow is in a block or not.\n <p>\n Arrows in a block are motionless and may be picked up by players.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAttachedBlock","comment_text":"Gets the block to which this arrow is attached.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPickupStatus","comment_text":"Gets the current pickup status of this arrow.","return_type":"org.bukkit.entity.Arrow.PickupStatus","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPickupStatus","comment_text":"Sets the current pickup status of this arrow.","return_type":"void","return_type_dimension":"","parameters":[{"name":"status","comment_text":"new pickup status of this arrow.","type":"org.bukkit.entity.Arrow.PickupStatus","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Arrow.PickupStatus","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the pickup status of this arrow.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.entity.Arrow.PickupStatus","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.entity.Arrow.PickupStatus","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["DISALLOWED","ALLOWED","CREATIVE_ONLY"]},{"name":"org.bukkit.entity.ArmorStand","interfaces":["org.bukkit.entity.LivingEntity"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItemInHand","comment_text":"Returns the item the armor stand is\n currently holding","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInHand","comment_text":"Sets the item the armor stand is currently\n holding","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item to hold","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getBoots","comment_text":"Returns the item currently being worn\n by the armor stand on its feet","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBoots","comment_text":"Sets the item currently being worn\n by the armor stand on its feet","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item to wear","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getLeggings","comment_text":"Returns the item currently being worn\n by the armor stand on its legs","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLeggings","comment_text":"Sets the item currently being worn\n by the armor stand on its legs","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item to wear","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getChestplate","comment_text":"Returns the item currently being worn\n by the armor stand on its chest","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setChestplate","comment_text":"Sets the item currently being worn\n by the armor stand on its chest","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item to wear","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHelmet","comment_text":"Returns the item currently being worn\n by the armor stand on its head","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHelmet","comment_text":"Sets the item currently being worn\n by the armor stand on its head","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item to wear","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getBodyPose","comment_text":"Returns the armor stand's body's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBodyPose","comment_text":"Sets the armor stand's body's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"getLeftArmPose","comment_text":"Returns the armor stand's left arm's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLeftArmPose","comment_text":"Sets the armor stand's left arm's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"getRightArmPose","comment_text":"Returns the armor stand's right arm's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRightArmPose","comment_text":"Sets the armor stand's right arm's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"getLeftLegPose","comment_text":"Returns the armor stand's left leg's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLeftLegPose","comment_text":"Sets the armor stand's left leg's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"getRightLegPose","comment_text":"Returns the armor stand's right leg's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRightLegPose","comment_text":"Sets the armor stand's right leg's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"getHeadPose","comment_text":"Returns the armor stand's head's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHeadPose","comment_text":"Sets the armor stand's head's\n current pose as a {@link org.bukkit.util.EulerAngle}","return_type":"void","return_type_dimension":"","parameters":[{"name":"pose","comment_text":"the current pose","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"throws":[]},{"name":"hasBasePlate","comment_text":"Returns whether the armor stand has\n a base plate","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBasePlate","comment_text":"Sets whether the armor stand has a\n base plate","return_type":"void","return_type_dimension":"","parameters":[{"name":"basePlate","comment_text":"whether is has a base plate","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isVisible","comment_text":"Returns whether the armor stand should be\n visible or not","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVisible","comment_text":"Sets whether the armor stand should be\n visible or not","return_type":"void","return_type_dimension":"","parameters":[{"name":"visible","comment_text":"whether the stand is visible or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"hasArms","comment_text":"Returns whether this armor stand has arms","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setArms","comment_text":"Sets whether this armor stand has arms","return_type":"void","return_type_dimension":"","parameters":[{"name":"arms","comment_text":"whether this has arms or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSmall","comment_text":"Returns whether this armor stand is scaled\n down","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSmall","comment_text":"Sets whether this armor stand is scaled\n down","return_type":"void","return_type_dimension":"","parameters":[{"name":"small","comment_text":"whether this is scaled down","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isMarker","comment_text":"Returns whether this armor stand is a marker,\n meaning it has a very small collision box","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMarker","comment_text":"Sets whether this armor stand is a marker,\n meaning it has a very small collision box","return_type":"void","return_type_dimension":"","parameters":[{"name":"marker","comment_text":"whether this is a marker","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.AreaEffectCloud","interfaces":["org.bukkit.entity.Entity"],"superclass":"","comment_text":"Represents an area effect cloud which will imbue a potion effect onto\n entities which enter it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getDuration","comment_text":"Gets the duration which this cloud will exist for (in ticks).","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDuration","comment_text":"Sets the duration which this cloud will exist for (in ticks).","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"cloud duration","type":"int","type_dimension":""}],"throws":[]},{"name":"getWaitTime","comment_text":"Gets the time which an entity has to be exposed to the cloud before the\n effect is applied.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWaitTime","comment_text":"Sets the time which an entity has to be exposed to the cloud before the\n effect is applied.","return_type":"void","return_type_dimension":"","parameters":[{"name":"waitTime","comment_text":"wait time","type":"int","type_dimension":""}],"throws":[]},{"name":"getReapplicationDelay","comment_text":"Gets the time that an entity will be immune from subsequent exposure.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setReapplicationDelay","comment_text":"Sets the time that an entity will be immune from subsequent exposure.","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"reapplication delay","type":"int","type_dimension":""}],"throws":[]},{"name":"getDurationOnUse","comment_text":"Gets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDurationOnUse","comment_text":"Sets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"duration on use delta","type":"int","type_dimension":""}],"throws":[]},{"name":"getRadius","comment_text":"Gets the initial radius of the cloud.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRadius","comment_text":"Sets the initial radius of the cloud.","return_type":"void","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"radius","type":"float","type_dimension":""}],"throws":[]},{"name":"getRadiusOnUse","comment_text":"Gets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRadiusOnUse","comment_text":"Sets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.","return_type":"void","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"radius on use delta","type":"float","type_dimension":""}],"throws":[]},{"name":"getRadiusPerTick","comment_text":"Gets the amount that the radius of this cloud will decrease by each tick.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRadiusPerTick","comment_text":"Gets the amount that the radius of this cloud will decrease by each tick.","return_type":"void","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"per tick delta","type":"float","type_dimension":""}],"throws":[]},{"name":"getParticle","comment_text":"Gets the particle which this cloud will be composed of","return_type":"org.bukkit.Particle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setParticle","comment_text":"Sets the particle which this cloud will be composed of","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the new particle type","type":"org.bukkit.Particle","type_dimension":""}],"throws":[]},{"name":"setParticle","comment_text":"Sets the particle which this cloud will be composed of","return_type":"void","return_type_dimension":"","parameters":[{"name":"particle","comment_text":"the new particle type","type":"org.bukkit.Particle","type_dimension":""},{"name":"data","comment_text":"the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}","type":"T","type_dimension":""}],"throws":[]},{"name":"setBasePotionData","comment_text":"Sets the underlying potion data","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"PotionData to set the base potion state to","type":"org.bukkit.potion.PotionData","type_dimension":""}],"throws":[]},{"name":"getBasePotionData","comment_text":"Returns the potion data about the base potion","return_type":"org.bukkit.potion.PotionData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasCustomEffects","comment_text":"Checks for the presence of custom potion effects.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCustomEffects","comment_text":"Gets an immutable list containing all custom potion effects applied to\n this cloud.\n <p>\n Plugins should check that hasCustomEffects() returns true before calling\n this method.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addCustomEffect","comment_text":"Adds a custom potion effect to this cloud.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"the potion effect to add","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"overwrite","comment_text":"true if any existing effect of the same type should be\n overwritten","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removeCustomEffect","comment_text":"Removes a custom potion effect from this cloud.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to remove","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"hasCustomEffect","comment_text":"Checks for a specific custom potion effect type on this cloud.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to check for","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"clearCustomEffects","comment_text":"Removes all custom potion effects from this cloud.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the color of this cloud. Will be applied as a tint to its particles.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this cloud. Will be applied as a tint to its particles.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"cloud color","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"getSource","comment_text":"Retrieve the original source of this cloud.","return_type":"org.bukkit.projectiles.ProjectileSource","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSource","comment_text":"Set the original source of this cloud.","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"the {@link ProjectileSource} that threw the LingeringPotion","type":"org.bukkit.projectiles.ProjectileSource","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.AnimalTamer","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getName","comment_text":"This is the name of the specified AnimalTamer.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUniqueId","comment_text":"This is the UUID of the specified AnimalTamer.","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Animals","interfaces":["org.bukkit.entity.Ageable"],"superclass":"","comment_text":"Represents an Animal.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBreedCause","comment_text":"Get the UUID of the entity that caused this entity to enter the\n {@link #canBreed()} state.","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBreedCause","comment_text":"Set the UUID of the entity that caused this entity to enter the\n {@link #canBreed()} state.","return_type":"void","return_type_dimension":"","parameters":[{"name":"uuid","comment_text":"new uuid, or null","type":"java.util.UUID","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.Ambient","interfaces":["org.bukkit.entity.Mob"],"superclass":"","comment_text":"Represents an ambient mob","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.Ageable","interfaces":["org.bukkit.entity.Creature"],"superclass":"","comment_text":"Represents an entity that can age and breed.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAge","comment_text":"Gets the age of this animal.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAge","comment_text":"Sets the age of this animal.","return_type":"void","return_type_dimension":"","parameters":[{"name":"age","comment_text":"New age","type":"int","type_dimension":""}],"throws":[]},{"name":"setAgeLock","comment_text":"Lock the age of the animal, setting this will prevent the animal from\n maturing or getting ready for mating.","return_type":"void","return_type_dimension":"","parameters":[{"name":"lock","comment_text":"new lock","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAgeLock","comment_text":"Gets the current agelock.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBaby","comment_text":"Sets the age of the animal to a baby","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAdult","comment_text":"Sets the age of the animal to an adult","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isAdult","comment_text":"Returns true if the animal is an adult.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"canBreed","comment_text":"Return the ability to breed of the animal.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBreed","comment_text":"Set breedability of the animal, if the animal is a baby and set to\n breed it will instantly grow up.","return_type":"void","return_type_dimension":"","parameters":[{"name":"breed","comment_text":"breedability of the animal","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.AbstractHorse","interfaces":["org.bukkit.entity.Animals","org.bukkit.entity.Vehicle","org.bukkit.inventory.InventoryHolder","org.bukkit.entity.Tameable"],"superclass":"","comment_text":"Represents a Horse-like creature.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getVariant","comment_text":"Gets the horse's variant.\n <p>\n A horse's variant defines its physical appearance and capabilities.\n Whether a horse is a regular horse, donkey, mule, or other kind of horse\n is determined using the variant.","return_type":"org.bukkit.entity.Horse.Variant","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVariant","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"variant","comment_text":"","type":"org.bukkit.entity.Horse.Variant","type_dimension":""}],"throws":[]},{"name":"getDomestication","comment_text":"Gets the domestication level of this horse.\n <p>\n A higher domestication level indicates that the horse is closer to\n becoming tame. As the domestication level gets closer to the max\n domestication level, the chance of the horse becoming tame increases.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDomestication","comment_text":"Sets the domestication level of this horse.\n <p>\n Setting the domestication level to a high value will increase the\n horse's chances of becoming tame.\n <p>\n Domestication level must be greater than zero and no greater than\n the max domestication level of the horse, determined with\n {@link #getMaxDomestication()}","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"domestication level","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxDomestication","comment_text":"Gets the maximum domestication level of this horse.\n <p>\n The higher this level is, the longer it will likely take\n for the horse to be tamed.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxDomestication","comment_text":"Sets the maximum domestication level of this horse.\n <p>\n Setting a higher max domestication will increase the amount of\n domesticating (feeding, riding, etc.) necessary in order to tame it,\n while setting a lower max value will have the opposite effect.\n <p>\n Maximum domestication must be greater than zero.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"the max domestication level","type":"int","type_dimension":""}],"throws":[]},{"name":"getJumpStrength","comment_text":"Gets the jump strength of this horse.\n <p>\n Jump strength defines how high the horse can jump. A higher jump strength\n increases how high a jump will go.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setJumpStrength","comment_text":"Sets the jump strength of this horse.\n <p>\n A higher jump strength increases how high a jump will go.\n Setting a jump strength to 0 will result in no jump.\n You cannot set a jump strength to a value below 0 or\n above 2.","return_type":"void","return_type_dimension":"","parameters":[{"name":"strength","comment_text":"jump strength for this horse","type":"double","type_dimension":""}],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.AbstractHorseInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.StorageMinecart","interfaces":["org.bukkit.entity.Minecart","org.bukkit.inventory.InventoryHolder","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a minecart with a chest. These types of {@link Minecart\n minecarts} have their own inventory that can be accessed using methods\n from the {@link InventoryHolder} interface.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.SpawnerMinecart","interfaces":["org.bukkit.entity.Minecart"],"superclass":"","comment_text":"Represents a Minecart with an {@link org.bukkit.block.CreatureSpawner\n entity spawner} inside it.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.RideableMinecart","interfaces":["org.bukkit.entity.Minecart"],"superclass":"","comment_text":"Represents a minecart that can have certain {@link\n org.bukkit.entity.Entity entities} as passengers. Normal passengers\n include all {@link org.bukkit.entity.LivingEntity living entities} with\n the exception of {@link org.bukkit.entity.IronGolem iron golems}.\n Non-player entities that meet normal passenger criteria automatically\n mount these minecarts when close enough.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.PoweredMinecart","interfaces":["org.bukkit.entity.Minecart"],"superclass":"","comment_text":"Represents a powered minecart. A powered minecart moves on its own when a\n player deposits {@link org.bukkit.Material#COAL fuel}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.HopperMinecart","interfaces":["org.bukkit.entity.Minecart","org.bukkit.inventory.InventoryHolder","org.bukkit.loot.Lootable"],"superclass":"","comment_text":"Represents a Minecart with a Hopper inside it","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isEnabled","comment_text":"Checks whether or not this Minecart will pick up \n items into its inventory.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEnabled","comment_text":"Sets whether this Minecart will pick up items.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enabled","comment_text":"new enabled state","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.ExplosiveMinecart","interfaces":["org.bukkit.entity.Minecart"],"superclass":"","comment_text":"Represents a Minecart with TNT inside it that can explode when triggered.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.entity.minecart.CommandMinecart","interfaces":["org.bukkit.entity.Minecart","org.bukkit.command.CommandSender"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getCommand","comment_text":"Gets the command that this CommandMinecart will run when activated.\n This will never return null.  If the CommandMinecart does not have a\n command, an empty String will be returned instead.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCommand","comment_text":"Sets the command that this CommandMinecart will run when activated.\n Setting the command to null is the same as setting it to an empty\n String.","return_type":"void","return_type_dimension":"","parameters":[{"name":"command","comment_text":"Command that this CommandMinecart will run when\n     activated.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setName","comment_text":"Sets the name of this CommandMinecart.  The name is used with commands\n that this CommandMinecart executes.  Setting the name to null is the\n same as setting it to \"@\".","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"New name for this CommandMinecart.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.SpongeAbsorbEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a sponge absorbs water from the world.\n <br>\n The world will be in its previous state, and {@link #getBlocks()} will\n represent the changes to be made to the world, if the event is not cancelled.\n <br>\n As this is a physics based event it may be called multiple times for \"the\n same\" changes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SpongeAbsorbEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"waterblocks","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBlocks","comment_text":"Get a list of all blocks to be removed by the sponge.\n <br>\n This list is mutable and contains the blocks in their removed state, i.e.\n having a type of {@link Material#AIR}.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.SignChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a sign is changed by a player.\n <p>\n If a Sign Change event is cancelled, the sign will not be changed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SignChangeEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"thePlayer","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"theLines","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Gets the player changing the sign involved in this event.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLines","comment_text":"Gets all of the lines of text from the sign involved in this event.","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getLine","comment_text":"Gets a single line of text from the sign involved in this event.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"index","comment_text":"index of the line to get","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":"thrown when the provided index is {@literal > 3\n     or < 0}"}]},{"name":"setLine","comment_text":"Sets a single line for the sign involved in this event","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"index of the line to set","type":"int","type_dimension":""},{"name":"line","comment_text":"text to set","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":"thrown when the provided index is {@literal > 3\n     or < 0}"}]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.NotePlayEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a note block is being played through player interaction or a\n redstone current.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NotePlayEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"instrument","comment_text":"","type":"org.bukkit.Instrument","type_dimension":""},{"name":"note","comment_text":"","type":"org.bukkit.Note","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getInstrument","comment_text":"Gets the {@link Instrument} to be used.","return_type":"org.bukkit.Instrument","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNote","comment_text":"Gets the {@link Note} to be played.","return_type":"org.bukkit.Note","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInstrument","comment_text":"Overrides the {@link Instrument} to be used.","return_type":"void","return_type_dimension":"","parameters":[{"name":"instrument","comment_text":"the Instrument. Has no effect if null.","type":"org.bukkit.Instrument","type_dimension":""}],"throws":[]},{"name":"setNote","comment_text":"Overrides the {@link Note} to be played.","return_type":"void","return_type_dimension":"","parameters":[{"name":"note","comment_text":"the Note. Has no effect if null.","type":"org.bukkit.Note","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.MoistureChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when the moisture level of a soil block changes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MoistureChangeEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"newState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getNewState","comment_text":"Gets the new state of the affected block.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.LeavesDecayEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when leaves are decaying naturally.\n <p>\n If a Leaves Decay event is cancelled, the leaves will not decay.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"LeavesDecayEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.EntityBlockFormEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockFormEvent","comment_text":"Called when a block is formed by entities.\n <p>\n Examples:\n <ul>\n <li>Snow formed by a {@link org.bukkit.entity.Snowman}.\n <li>Frosted Ice formed by the Frost Walker enchantment.\n </ul>","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityBlockFormEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockstate","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"Get the entity that formed the block.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.CauldronLevelChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CauldronLevelChangeEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"reason","comment_text":"","type":"org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason","type_dimension":""},{"name":"oldLevel","comment_text":"","type":"int","type_dimension":""},{"name":"newLevel","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"Get entity which did this. May be null.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getReason","comment_text":"","return_type":"org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOldLevel","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewLevel","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewLevel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"newLevel","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BUCKET_FILL","BUCKET_EMPTY","BOTTLE_FILL","BOTTLE_EMPTY","BANNER_WASH","ARMOR_WASH","EXTINGUISH","EVAPORATE","UNKNOWN"]},{"name":"org.bukkit.event.block.BlockSpreadEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockFormEvent","comment_text":"Called when a block spreads based on world conditions.\n <p>\n Use {@link BlockFormEvent} to catch blocks that \"randomly\" form instead of\n actually spread.\n <p>\n Examples:\n <ul>\n <li>Mushrooms spreading.\n <li>Fire spreading.\n </ul>\n <p>\n If a Block Spread event is cancelled, the block will not spread.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.event.block.BlockFormEvent"],"constructors":[{"name":"BlockSpreadEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"newState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSource","comment_text":"Gets the source block involved in this event.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockRedstoneEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a redstone current changes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockRedstoneEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"oldCurrent","comment_text":"","type":"int","type_dimension":""},{"name":"newCurrent","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getOldCurrent","comment_text":"Gets the old current of this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewCurrent","comment_text":"Gets the new current of this block","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewCurrent","comment_text":"Sets the new current of this block","return_type":"void","return_type_dimension":"","parameters":[{"name":"newCurrent","comment_text":"The new current to set","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockPlaceEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block is placed by a player.\n <p>\n If a Block Place event is cancelled, the block will not be placed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPlaceEvent","comment_text":"","parameters":[{"name":"placedBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"replacedBlockState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""},{"name":"placedAgainst","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"thePlayer","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"canBuild","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"BlockPlaceEvent","comment_text":"","parameters":[{"name":"placedBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"replacedBlockState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""},{"name":"placedAgainst","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"thePlayer","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"canBuild","comment_text":"","type":"boolean","type_dimension":""},{"name":"hand","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"throws":[]}],"fields":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""},{"name":"canBuild","comment_text":"","type":"boolean","type_dimension":""},{"name":"placedAgainst","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"replacedBlockState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"hand","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPlayer","comment_text":"Gets the player who placed the block involved in this event.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockPlaced","comment_text":"Clarity method for getting the placed block. Not really needed except\n for reasons of clarity.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockReplacedState","comment_text":"Gets the BlockState for the block which was replaced. Material type air\n mostly.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockAgainst","comment_text":"Gets the block that this block was placed against","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemInHand","comment_text":"Gets the item in the player's hand when they placed the block.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHand","comment_text":"Gets the hand which placed the block","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"","parameters":[],"throws":[]},{"name":"canBuild","comment_text":"Gets the value whether the player would be allowed to build here.\n Defaults to spawn if the server was going to stop them (such as, the\n player is in Spawn). Note that this is an entirely different check\n than BLOCK_CANBUILD, as this refers to a player, not universe-physics\n rule like cactus on dirt.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBuild","comment_text":"Sets the canBuild state of this event. Set to true if you want the\n player to be able to build.","return_type":"void","return_type_dimension":"","parameters":[{"name":"canBuild","comment_text":"true if you want the player to be able to build","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockPistonRetractEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockPistonEvent","comment_text":"Called when a piston retracts","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPistonRetractEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRetractLocation","comment_text":"Gets the location where the possible moving block might be if the\n retracting piston is sticky.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlocks","comment_text":"Get an immutable list of the blocks which will be moved by the\n extending.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockPistonExtendEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockPistonEvent","comment_text":"Called when a piston extends","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPistonExtendEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"length","comment_text":"","type":"int","type_dimension":""},{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"BlockPistonExtendEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLength","comment_text":"Get the amount of blocks which will be moved while extending.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlocks","comment_text":"Get an immutable list of the blocks which will be moved by the\n extending.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockPistonEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a piston block is triggered","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPistonEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSticky","comment_text":"Returns true if the Piston in the event is sticky.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDirection","comment_text":"Return the direction in which the piston will operate.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockPhysicsEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Thrown when a block physics check is called.\n <br>\n This event is a high frequency event, it may be called thousands of times per\n a second on a busy server. Plugins are advised to listen to the event with\n caution and only perform lightweight checks when using it.\n <br>\n In addition to this, cancelling the event is liable to leave the world in an\n inconsistent state. For example if you use the event to leave a block\n floating in mid air when that block has a requirement to be attached to\n something, there is no guarantee that the floating block will persist across\n server restarts or map upgrades.\n <br>\n Plugins should also note that where possible this event may only called for\n the \"root\" block of physics updates in order to limit event spam. Physics\n updates that cause other blocks to change their state may not result in an\n event for each of those blocks (usually adjacent). If you are concerned about\n monitoring these changes then you should check adjacent blocks yourself.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPhysicsEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"changed","comment_text":"","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getChangedType","comment_text":"Gets the type of block that changed, causing this event","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockMultiPlaceEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockPlaceEvent","comment_text":"Fired when a single block placement action of a player triggers the\n creation of multiple blocks(e.g. placing a bed block). The block returned\n by {@link #getBlockPlaced()} and its related methods is the block where\n the placed block would exist if the placement only affected a single\n block.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockMultiPlaceEvent","comment_text":"","parameters":[{"name":"states","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"clicked","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"thePlayer","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"canBuild","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getReplacedBlockStates","comment_text":"Gets a list of blockstates for all blocks which were replaced by the\n placement of the new blocks. Most of these blocks will just have a\n Material type of AIR.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockIgniteEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block is ignited. If you want to catch when a Player places\n fire, you need to use {@link BlockPlaceEvent}.\n <p>\n If a Block Ignite event is cancelled, the block will not be ignited.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockIgniteEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","type_dimension":""},{"name":"ignitingEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"BlockIgniteEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","type_dimension":""},{"name":"ignitingBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]},{"name":"BlockIgniteEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","type_dimension":""},{"name":"ignitingEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"ignitingBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getCause","comment_text":"Gets the cause of block ignite.","return_type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Gets the player who ignited this block","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIgnitingEntity","comment_text":"Gets the entity who ignited this block","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIgnitingBlock","comment_text":"Gets the block which ignited this block","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the cause of the ignite","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.block.BlockIgniteEvent.IgniteCause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["LAVA","FLINT_AND_STEEL","SPREAD","LIGHTNING","FIREBALL","ENDER_CRYSTAL","EXPLOSION"]},{"name":"org.bukkit.event.block.BlockGrowEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block grows naturally in the world.\n <p>\n Examples:\n <ul>\n <li>Wheat\n <li>Sugar Cane\n <li>Cactus\n <li>Watermelon\n <li>Pumpkin\n </ul>\n <p>\n If a Block Grow event is cancelled, the block will not grow.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockGrowEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"newState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getNewState","comment_text":"Gets the state of the block where it will form or spread to.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockFromToEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Represents events with a source block and a destination block, currently\n only applies to liquid (lava and water) and teleporting dragon eggs.\n <p>\n If a Block From To event is cancelled, the block will not move (the liquid\n will not flow).","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockFromToEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"BlockFromToEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"toBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[{"name":"to","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"getFace","comment_text":"Gets the BlockFace that the block is moving to.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getToBlock","comment_text":"Convenience method for getting the faced Block.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockFormEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockGrowEvent","comment_text":"Called when a block is formed or spreads based on world conditions.\n <p>\n Use {@link BlockSpreadEvent} to catch blocks that actually spread and don't\n just \"randomly\" form.\n <p>\n Examples:\n <ul>\n <li>Snow forming due to a snow storm.\n <li>Ice forming in a snowy Biome like Taiga or Tundra.\n <li> Obsidian / Cobblestone forming due to contact with water.\n <li> Concrete forming due to mixing of concrete powder and water.\n </ul>\n <p>\n If a Block Form event is cancelled, the block will not be formed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.event.block.BlockSpreadEvent"],"constructors":[{"name":"BlockFormEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"newState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockFertilizeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called with the block changes resulting from a player fertilizing a given\n block with bonemeal. Will be called after the applicable\n {@link StructureGrowEvent}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockFertilizeEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Gets the player that triggered the fertilization.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlocks","comment_text":"Gets a list of all blocks changed by the fertilization.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockFadeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block fades, melts or disappears based on world conditions\n <p>\n Examples:\n <ul>\n <li>Snow melting due to being near a light source.\n <li>Ice melting due to being near a light source.\n <li>Fire burning out after time, without destroying fuel block.\n <li>Coral fading to dead coral due to lack of water</li>\n </ul>\n <p>\n If a Block Fade event is cancelled, the block will not fade, melt or\n disappear.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockFadeEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"newState","comment_text":"","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getNewState","comment_text":"Gets the state of the block that will be fading, melting or\n disappearing.","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockExplodeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block explodes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockExplodeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"yield","comment_text":"","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"blockList","comment_text":"Returns the list of blocks that would have been removed or were removed\n from the explosion event.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getYield","comment_text":"Returns the percentage of blocks to drop from this explosion","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setYield","comment_text":"Sets the percentage of blocks to drop from this explosion","return_type":"void","return_type_dimension":"","parameters":[{"name":"yield","comment_text":"The new yield percentage","type":"float","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockExpEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"An event that's called when a block yields experience.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockExpEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"exp","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getExpToDrop","comment_text":"Get the experience dropped by the block after the event has processed","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExpToDrop","comment_text":"Set the amount of experience dropped by the block after the event has\n processed","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"1 or higher to drop experience, else nothing will drop","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a block related event.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"methods":[{"name":"getBlock","comment_text":"Gets the block involved in this event.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockDispenseEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when an item is dispensed from a block.\n <p>\n If a Block Dispense event is cancelled, the block will not dispense the\n item.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockDispenseEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"dispensed","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"velocity","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItem","comment_text":"Gets the item that is being dispensed. Modifying the returned item will\n have no effect, you must use {@link\n #setItem(org.bukkit.inventory.ItemStack)} instead.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Sets the item being dispensed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item being dispensed","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getVelocity","comment_text":"Gets the velocity.\n <p>\n Note: Modifying the returned Vector will not change the velocity, you\n must use {@link #setVelocity(org.bukkit.util.Vector)} instead.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVelocity","comment_text":"Sets the velocity of the item being dispensed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"vel","comment_text":"the velocity of the item being dispensed","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockDispenseArmorEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockDispenseEvent","comment_text":"Called when an equippable item is dispensed from a block and equipped on a\n nearby entity.\n <p>\n If a Block Dispense Armor event is cancelled, the equipment will not be\n equipped on the target entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockDispenseArmorEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"dispensed","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"target","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTargetEntity","comment_text":"Get the living entity on which the armor was dispensed.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockDamageEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block is damaged by a player.\n <p>\n If a Block Damage event is cancelled, the block will not be damaged.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockDamageEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"instaBreak","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Gets the player damaging the block involved in this event.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInstaBreak","comment_text":"Gets if the block is set to instantly break when damaged by the player.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInstaBreak","comment_text":"Sets if the block should instantly break when damaged by the player.","return_type":"void","return_type_dimension":"","parameters":[{"name":"bool","comment_text":"true if you want the block to instantly break when damaged\n     by the player","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getItemInHand","comment_text":"Gets the ItemStack for the item currently in the player's hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockCanBuildEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when we try to place a block, to see if we can build it here or not.\n <p>\n Note:\n <ul>\n <li>The Block returned by getBlock() is the block we are trying to place\n     on, not the block we are trying to place.\n <li>If you want to figure out what is being placed, use {@link\n     #getMaterial()} instead.\n </ul>","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockCanBuildEvent","comment_text":"","parameters":[{"name":"block","comment_text":"the block involved in this event","type":"org.bukkit.block.Block","type_dimension":""},{"name":"type","comment_text":"the id of the block to place","type":"org.bukkit.block.data.BlockData","type_dimension":""},{"name":"canBuild","comment_text":"whether we can build","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[{"name":"buildable","comment_text":"","type":"boolean","type_dimension":""},{"name":"blockData","comment_text":"","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"methods":[{"name":"isBuildable","comment_text":"Gets whether or not the block can be built here.\n <p>\n By default, returns Minecraft's answer on whether the block can be\n built here or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBuildable","comment_text":"Sets whether the block can be built here or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"true if you want to allow the block to be built here\n     despite Minecraft's default behaviour","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getMaterial","comment_text":"Gets the Material that we are trying to place.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockData","comment_text":"Gets the BlockData that we are trying to place.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockBurnEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when a block is destroyed as a result of being burnt by fire.\n <p>\n If a Block Burn event is cancelled, the block will not be destroyed as a\n result of being burnt by fire.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockBurnEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]},{"name":"BlockBurnEvent","comment_text":"","parameters":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"ignitingBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getIgnitingBlock","comment_text":"Gets the block which ignited this block.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.BlockBreakEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockExpEvent","comment_text":"Called when a block is broken by a player.\n <p>\n If you wish to have the block drop experience, you must set the experience\n value above 0. By default, experience will be set in the event if:\n <ol>\n <li>The player is not in creative or adventure mode\n <li>The player can loot the block (ie: does not destroy it completely, by\n     using the correct tool)\n <li>The player does not have silk touch\n <li>The block drops experience in vanilla Minecraft\n </ol>\n <p>\n Note:\n Plugins wanting to simulate a traditional block drop should set the block\n to air and utilize their own methods for determining what the default drop\n for the block being broken is and what to do about it, if anything.\n <p>\n If a Block Break event is cancelled, the block will not break and\n experience will not drop.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockBreakEvent","comment_text":"","parameters":[{"name":"theBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Gets the Player that is breaking the block involved in this event.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDropItems","comment_text":"Sets whether or not the block will drop items as it normally would.","return_type":"void","return_type_dimension":"","parameters":[{"name":"dropItems","comment_text":"Whether or not the block will drop items","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isDropItems","comment_text":"Gets whether or not the block will drop items.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.block.Action","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.block.Action","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.block.Action","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["LEFT_CLICK_BLOCK","RIGHT_CLICK_BLOCK","LEFT_CLICK_AIR","RIGHT_CLICK_AIR","PHYSICAL"]},{"name":"org.bukkit.event.Listener","interfaces":[],"superclass":"","comment_text":"Simple interface for tagging all EventListeners","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.HandlerList","interfaces":[],"superclass":"java.lang.Object","comment_text":"A list of event handlers, stored per-event. Based on lahwran's fevents.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HandlerList","comment_text":"Create a new handler list and initialize using EventPriority.\n <p>\n The HandlerList is then added to meta-list for use in bakeAll()","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"bakeAll","comment_text":"Bake all handler lists. Best used just after all normal event\n registration is complete, ie just after all plugins are loaded if\n you're using fevents in a plugin system.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"unregisterAll","comment_text":"Unregister all listeners from all handler lists.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"unregisterAll","comment_text":"Unregister a specific plugin's listeners from all handler lists.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"plugin to unregister","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"unregisterAll","comment_text":"Unregister a specific listener from all handler lists.","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"listener to unregister","type":"org.bukkit.event.Listener","type_dimension":""}],"throws":[]},{"name":"register","comment_text":"Register a new listener in this handler list","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"listener to register","type":"org.bukkit.plugin.RegisteredListener","type_dimension":""}],"throws":[]},{"name":"registerAll","comment_text":"Register a collection of new listeners in this handler list","return_type":"void","return_type_dimension":"","parameters":[{"name":"listeners","comment_text":"listeners to register","type":"java.util.Collection","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Remove a listener from a specific order slot","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"listener to remove","type":"org.bukkit.plugin.RegisteredListener","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Remove a specific plugin's listeners from this handler","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"plugin to remove","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Remove a specific listener from this handler","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"listener to remove","type":"org.bukkit.event.Listener","type_dimension":""}],"throws":[]},{"name":"bake","comment_text":"Bake HashMap and ArrayLists to 2d array - does nothing if not necessary","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRegisteredListeners","comment_text":"Get the baked registered listeners associated with this handler list","return_type":"org.bukkit.plugin.RegisteredListener","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getRegisteredListeners","comment_text":"Get a specific plugin's registered listeners associated with this\n handler list","return_type":"java.util.ArrayList","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the plugin to get the listeners of","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getHandlerLists","comment_text":"Get a list of all handler lists for every event type","return_type":"java.util.ArrayList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.EventPriority","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents an event's priority in execution","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.EventPriority","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.EventPriority","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getSlot","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["LOWEST","LOW","NORMAL","HIGH","HIGHEST","MONITOR"]},{"name":"org.bukkit.event.EventHandler","interfaces":["java.lang.annotation.Annotation"],"superclass":"","comment_text":"An annotation to mark methods as being event handler methods","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.EventException","interfaces":[],"superclass":"java.lang.Exception","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EventException","comment_text":"Constructs a new EventException based on the given Exception","parameters":[{"name":"throwable","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"EventException","comment_text":"Constructs a new EventException","parameters":[],"throws":[]},{"name":"EventException","comment_text":"Constructs a new EventException with the given message","parameters":[{"name":"cause","comment_text":"The exception that caused this","type":"java.lang.Throwable","type_dimension":""},{"name":"message","comment_text":"The message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"EventException","comment_text":"Constructs a new EventException with the given message","parameters":[{"name":"message","comment_text":"The message","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCause","comment_text":"If applicable, returns the Exception that triggered this Exception","return_type":"java.lang.Throwable","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.Event","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents an event.\n\n All events require a static method named getHandlerList() which returns the same {@link HandlerList} as {@link #getHandlers()}.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.plugin.PluginManager","org.bukkit.plugin.PluginManager"],"constructors":[{"name":"Event","comment_text":"The default constructor is defined for cleaner code. This constructor\n assumes the event is synchronous.","parameters":[],"throws":[]},{"name":"Event","comment_text":"This constructor is used to explicitly declare an event as synchronous\n or asynchronous.","parameters":[{"name":"isAsync","comment_text":"true indicates the event will fire asynchronously, false\n     by default from default constructor","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEventName","comment_text":"Convenience method for providing a user-friendly identifier. By\n default, it is the event's class's {@linkplain Class#getSimpleName()\n simple name}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isAsynchronous","comment_text":"Any custom event that should not by synchronized with other events must\n use the specific constructor. These are the caveats of using an\n asynchronous event:\n <ul>\n <li>The event is never fired from inside code triggered by a\n     synchronous event. Attempting to do so results in an {@link\n     java.lang.IllegalStateException}.\n <li>However, asynchronous event handlers may fire synchronous or\n     asynchronous events\n <li>The event may be fired multiple times simultaneously and in any\n     order.\n <li>Any newly registered or unregistered handler is ignored after an\n     event starts execution.\n <li>The handlers for this event may block for any length of time.\n <li>Some implementations may selectively declare a specific event use\n     as asynchronous. This behavior should be clearly defined.\n <li>Asynchronous calls are not calculated in the plugin timing system.\n </ul>","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.Event.Result","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.Event.Result","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.Event.Result","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["DENY","DEFAULT","ALLOW"]},{"name":"org.bukkit.event.Cancellable","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isCancelled","comment_text":"Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"true if you wish to cancel this event","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.enchantment.PrepareItemEnchantEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"Called when an ItemStack is inserted in an enchantment table - can be\n called multiple times","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PrepareItemEnchantEvent","comment_text":"","parameters":[{"name":"enchanter","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"view","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"table","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"offers","comment_text":"","type":"org.bukkit.enchantments.EnchantmentOffer","type_dimension":"[]"},{"name":"bonus","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEnchanter","comment_text":"Gets the player enchanting the item","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEnchantBlock","comment_text":"Gets the block being used to enchant the item","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Gets the item to be enchanted.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getExpLevelCostsOffered","comment_text":"Get a list of offered experience level costs of the enchantment.","return_type":"int","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getOffers","comment_text":"Get a list of available {@link EnchantmentOffer} for the player. You can\n modify the values to change the available offers for the player. An offer\n may be null, if there isn't a enchantment offer at a specific slot. There\n are 3 slots in the enchantment table available to modify.","return_type":"org.bukkit.enchantments.EnchantmentOffer","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getEnchantmentBonus","comment_text":"Get enchantment bonus in effect - corresponds to number of bookshelves","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.enchantment.EnchantItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"Called when an ItemStack is successfully enchanted (currently at\n enchantment table)","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EnchantItemEvent","comment_text":"","parameters":[{"name":"enchanter","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"view","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"table","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"level","comment_text":"","type":"int","type_dimension":""},{"name":"enchants","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"i","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEnchanter","comment_text":"Gets the player enchanting the item","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEnchantBlock","comment_text":"Gets the block being used to enchant the item","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Gets the item to be enchanted (can be modified)","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getExpLevelCost","comment_text":"Get cost in exp levels of the enchantment","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExpLevelCost","comment_text":"Set cost in exp levels of the enchantment","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"- cost in levels","type":"int","type_dimension":""}],"throws":[]},{"name":"getEnchantsToAdd","comment_text":"Get map of enchantment (levels, keyed by type) to be added to item\n (modify map returned to change values). Note: Any enchantments not\n allowed for the item will be ignored","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"whichButton","comment_text":"Which button was pressed to initiate the enchanting.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.VillagerReplenishTradeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a villager's trade's maximum uses is increased, due to a player's\n trade.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.inventory.MerchantRecipe"],"constructors":[{"name":"VillagerReplenishTradeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Villager","type_dimension":""},{"name":"recipe","comment_text":"","type":"org.bukkit.inventory.MerchantRecipe","type_dimension":""},{"name":"bonus","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRecipe","comment_text":"Get the recipe to replenish.","return_type":"org.bukkit.inventory.MerchantRecipe","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRecipe","comment_text":"Set the recipe to replenish.","return_type":"void","return_type_dimension":"","parameters":[{"name":"recipe","comment_text":"the replenished recipe","type":"org.bukkit.inventory.MerchantRecipe","type_dimension":""}],"throws":[]},{"name":"getBonus","comment_text":"Get the bonus uses added. The maximum uses of the recipe will be\n increased by this number.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBonus","comment_text":"Set the bonus uses added.","return_type":"void","return_type_dimension":"","parameters":[{"name":"bonus","comment_text":"the extra uses added","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Villager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.VillagerAcquireTradeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called whenever a villager acquires a new trade.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VillagerAcquireTradeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Villager","type_dimension":""},{"name":"recipe","comment_text":"","type":"org.bukkit.inventory.MerchantRecipe","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRecipe","comment_text":"Get the recipe to be acquired.","return_type":"org.bukkit.inventory.MerchantRecipe","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRecipe","comment_text":"Set the recipe to be acquired.","return_type":"void","return_type_dimension":"","parameters":[{"name":"recipe","comment_text":"the new recipe","type":"org.bukkit.inventory.MerchantRecipe","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Villager","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.SlimeSplitEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a Slime splits into smaller Slimes upon death","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SlimeSplitEvent","comment_text":"","parameters":[{"name":"slime","comment_text":"","type":"org.bukkit.entity.Slime","type_dimension":""},{"name":"count","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Slime","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCount","comment_text":"Gets the amount of smaller slimes to spawn","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCount","comment_text":"Sets how many smaller slimes will spawn on the split","return_type":"void","return_type_dimension":"","parameters":[{"name":"count","comment_text":"the amount of slimes to spawn","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.SheepRegrowWoolEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a sheep regrows its wool","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SheepRegrowWoolEvent","comment_text":"","parameters":[{"name":"sheep","comment_text":"","type":"org.bukkit.entity.Sheep","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Sheep","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.SheepDyeWoolEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a sheep's wool is dyed","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SheepDyeWoolEvent","comment_text":"","parameters":[{"name":"sheep","comment_text":"","type":"org.bukkit.entity.Sheep","type_dimension":""},{"name":"color","comment_text":"","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Sheep","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the DyeColor the sheep is being dyed","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the DyeColor the sheep is being dyed","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the DyeColor the sheep will be dyed","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ProjectileLaunchEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a projectile is launched.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ProjectileLaunchEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Projectile","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ProjectileHitEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a projectile hits an object","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ProjectileHitEvent","comment_text":"","parameters":[{"name":"projectile","comment_text":"","type":"org.bukkit.entity.Projectile","type_dimension":""}],"throws":[]},{"name":"ProjectileHitEvent","comment_text":"","parameters":[{"name":"projectile","comment_text":"","type":"org.bukkit.entity.Projectile","type_dimension":""},{"name":"hitEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"ProjectileHitEvent","comment_text":"","parameters":[{"name":"projectile","comment_text":"","type":"org.bukkit.entity.Projectile","type_dimension":""},{"name":"hitBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]},{"name":"ProjectileHitEvent","comment_text":"","parameters":[{"name":"projectile","comment_text":"","type":"org.bukkit.entity.Projectile","type_dimension":""},{"name":"hitEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"hitBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Projectile","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHitBlock","comment_text":"Gets the block that was hit, if it was a block that was hit.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHitEntity","comment_text":"Gets the entity that was hit, if it was an entity that was hit.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.PotionSplashEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.ProjectileHitEvent","comment_text":"Called when a splash potion hits an area","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PotionSplashEvent","comment_text":"","parameters":[{"name":"potion","comment_text":"","type":"org.bukkit.entity.ThrownPotion","type_dimension":""},{"name":"affectedEntities","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.ThrownPotion","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPotion","comment_text":"Gets the potion which caused this event","return_type":"org.bukkit.entity.ThrownPotion","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAffectedEntities","comment_text":"Retrieves a list of all effected entities","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIntensity","comment_text":"Gets the intensity of the potion's effects for given entity; This\n depends on the distance to the impact center","return_type":"double","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"Which entity to get intensity for","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]},{"name":"setIntensity","comment_text":"Overwrites the intensity for a given entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"For which entity to define a new intensity","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"intensity","comment_text":"relative to maximum effect","type":"double","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.PlayerLeashEntityEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.Event","comment_text":"Called immediately prior to a creature being leashed by a player.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerLeashEntityEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"leashHolder","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"leasher","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLeashHolder","comment_text":"Returns the entity that is holding the leash.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntity","comment_text":"Returns the entity being leashed.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Returns the player involved in this event","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.PlayerDeathEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityDeathEvent","comment_text":"Thrown whenever a {@link Player} dies","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerDeathEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"drops","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"droppedExp","comment_text":"","type":"int","type_dimension":""},{"name":"deathMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"PlayerDeathEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"drops","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"droppedExp","comment_text":"","type":"int","type_dimension":""},{"name":"newExp","comment_text":"","type":"int","type_dimension":""},{"name":"deathMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"PlayerDeathEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"drops","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"droppedExp","comment_text":"","type":"int","type_dimension":""},{"name":"newExp","comment_text":"","type":"int","type_dimension":""},{"name":"newTotalExp","comment_text":"","type":"int","type_dimension":""},{"name":"newLevel","comment_text":"","type":"int","type_dimension":""},{"name":"deathMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDeathMessage","comment_text":"Set the death message that will appear to everyone on the server.","return_type":"void","return_type_dimension":"","parameters":[{"name":"deathMessage","comment_text":"Message to appear to other players on the server.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDeathMessage","comment_text":"Get the death message that will appear to everyone on the server.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewExp","comment_text":"Gets how much EXP the Player should have at respawn.\n <p>\n This does not indicate how much EXP should be dropped, please see\n {@link #getDroppedExp()} for that.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewExp","comment_text":"Sets how much EXP the Player should have at respawn.\n <p>\n This does not indicate how much EXP should be dropped, please see\n {@link #setDroppedExp(int)} for that.","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"New EXP of the respawned player","type":"int","type_dimension":""}],"throws":[]},{"name":"getNewLevel","comment_text":"Gets the Level the Player should have at respawn.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewLevel","comment_text":"Sets the Level the Player should have at respawn.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"New Level of the respawned player","type":"int","type_dimension":""}],"throws":[]},{"name":"getNewTotalExp","comment_text":"Gets the Total EXP the Player should have at respawn.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewTotalExp","comment_text":"Sets the Total EXP the Player should have at respawn.","return_type":"void","return_type_dimension":"","parameters":[{"name":"totalExp","comment_text":"New Total EXP of the respawned player","type":"int","type_dimension":""}],"throws":[]},{"name":"getKeepLevel","comment_text":"Gets if the Player should keep all EXP at respawn.\n <p>\n This flag overrides other EXP settings","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKeepLevel","comment_text":"Sets if the Player should keep all EXP at respawn.\n <p>\n This overrides all other EXP settings\n <p>\n This doesn't prevent prevent the EXP from dropping.\n {@link #setDroppedExp(int)} should be used stop the\n EXP from dropping.","return_type":"void","return_type_dimension":"","parameters":[{"name":"keepLevel","comment_text":"True to keep all current value levels","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setKeepInventory","comment_text":"Sets if the Player keeps inventory on death.","return_type":"void","return_type_dimension":"","parameters":[{"name":"keepInventory","comment_text":"True to keep the inventory","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getKeepInventory","comment_text":"Gets if the Player keeps inventory on death.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.PigZombieAngerEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a Pig Zombie is angered by another entity.\n <p>\n If the event is cancelled, the pig zombie will not be angered.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PigZombieAngerEvent","comment_text":"","parameters":[{"name":"pigZombie","comment_text":"","type":"org.bukkit.entity.PigZombie","type_dimension":""},{"name":"target","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"newAnger","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTarget","comment_text":"Gets the entity (if any) which triggered this anger update.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewAnger","comment_text":"Gets the new anger resulting from this event.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewAnger","comment_text":"Sets the new anger resulting from this event.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newAnger","comment_text":"the new anger","type":"int","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.PigZombie","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.PigZapEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Stores data for pigs being zapped","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PigZapEvent","comment_text":"","parameters":[{"name":"pig","comment_text":"","type":"org.bukkit.entity.Pig","type_dimension":""},{"name":"bolt","comment_text":"","type":"org.bukkit.entity.LightningStrike","type_dimension":""},{"name":"pigzombie","comment_text":"","type":"org.bukkit.entity.PigZombie","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Pig","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightning","comment_text":"Gets the bolt which is striking the pig.","return_type":"org.bukkit.entity.LightningStrike","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPigZombie","comment_text":"Gets the zombie pig that will replace the pig, provided the event is\n not cancelled first.","return_type":"org.bukkit.entity.PigZombie","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.LingeringPotionSplashEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.ProjectileHitEvent","comment_text":"Called when a splash potion hits an area","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"LingeringPotionSplashEvent","comment_text":"","parameters":[{"name":"potion","comment_text":"","type":"org.bukkit.entity.ThrownPotion","type_dimension":""},{"name":"entity","comment_text":"","type":"org.bukkit.entity.AreaEffectCloud","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LingeringPotion","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAreaEffectCloud","comment_text":"Gets the AreaEffectCloud spawned","return_type":"org.bukkit.entity.AreaEffectCloud","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ItemSpawnEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an item is spawned into a world","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ItemSpawnEvent","comment_text":"","parameters":[{"name":"spawnee","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"loc","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Gets the location at which the item is spawning.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ItemMergeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ItemMergeEvent","comment_text":"","parameters":[{"name":"item","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"target","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTarget","comment_text":"Gets the Item entity the main Item is being merged into.","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ItemDespawnEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"This event is called when a {@link org.bukkit.entity.Item} is removed from\n the world because it has existed for 5 minutes.\n <p>\n Cancelling the event results in the item being allowed to exist for 5 more\n minutes. This behavior is not guaranteed and may change in future versions.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ItemDespawnEvent","comment_text":"","parameters":[{"name":"despawnee","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"loc","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Gets the location at which the item is despawning.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.HorseJumpEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a horse jumps.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HorseJumpEvent","comment_text":"","parameters":[{"name":"horse","comment_text":"","type":"org.bukkit.entity.AbstractHorse","type_dimension":""},{"name":"power","comment_text":"","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.AbstractHorse","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPower","comment_text":"Gets the power of the jump.\n <p>\n Power is a value that defines how much of the horse's jump strength\n should be used for the jump. Power is effectively multiplied times\n the horse's jump strength to determine how high the jump is; 0\n represents no jump strength while 1 represents full jump strength.\n Setting power to a value above 1 will use additional jump strength\n that the horse does not usually have.\n <p>\n Power does not affect how high the horse is capable of jumping, only\n how much of its jumping capability will be used in this jump. To set\n the horse's overall jump strength, see {@link\n AbstractHorse#setJumpStrength(double)}.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPower","comment_text":"Sets the power of the jump.\n <p>\n Jump power can be set to a value above 1.0 which will increase the\n strength of this jump above the horse's actual jump strength.\n <p>\n Setting the jump power to 0 will result in the jump animation still\n playing, but the horse not leaving the ground. Only canceling this\n event will result in no jump animation at all.","return_type":"void","return_type_dimension":"","parameters":[{"name":"power","comment_text":"power of the jump","type":"float","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.FoodLevelChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a human entity's food level changes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FoodLevelChangeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.HumanEntity","type_dimension":""},{"name":"level","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFoodLevel","comment_text":"Gets the resultant food level that the entity involved in this event\n should be set to.\n <p>\n Where 20 is a full food bar and 0 is an empty one.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFoodLevel","comment_text":"Sets the resultant food level that the entity involved in this event\n should be set to","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"the resultant food level that the entity involved in this\n     event should be set to","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.FireworkExplodeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a firework explodes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FireworkExplodeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Firework","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Set the cancelled state of this event. If the firework explosion is\n cancelled, the firework will still be removed, but no particles will be\n displayed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"whether to cancel or not.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Firework","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ExplosionPrimeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity has made a decision to explode.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ExplosionPrimeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"radius","comment_text":"","type":"float","type_dimension":""},{"name":"fire","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"ExplosionPrimeEvent","comment_text":"","parameters":[{"name":"explosive","comment_text":"","type":"org.bukkit.entity.Explosive","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getRadius","comment_text":"Gets the radius of the explosion","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRadius","comment_text":"Sets the radius of the explosion","return_type":"void","return_type_dimension":"","parameters":[{"name":"radius","comment_text":"the radius of the explosion","type":"float","type_dimension":""}],"throws":[]},{"name":"getFire","comment_text":"Gets whether this explosion will create fire or not","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFire","comment_text":"Sets whether this explosion will create fire or not","return_type":"void","return_type_dimension":"","parameters":[{"name":"fire","comment_text":"true if you want this explosion to create fire","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.ExpBottleEvent","interfaces":[],"superclass":"org.bukkit.event.entity.ProjectileHitEvent","comment_text":"Called when a ThrownExpBottle hits and releases experience.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ExpBottleEvent","comment_text":"","parameters":[{"name":"bottle","comment_text":"","type":"org.bukkit.entity.ThrownExpBottle","type_dimension":""},{"name":"exp","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.ThrownExpBottle","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShowEffect","comment_text":"This method indicates if the particle effect should be shown.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setShowEffect","comment_text":"This method sets if the particle effect will be shown.\n <p>\n This does not change the experience created.","return_type":"void","return_type_dimension":"","parameters":[{"name":"showEffect","comment_text":"true indicates the effect will be shown, false\n     indicates no effect will be shown","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getExperience","comment_text":"This method retrieves the amount of experience to be created.\n <p>\n The number indicates a total amount to be divided into orbs.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExperience","comment_text":"This method sets the amount of experience to be created.\n <p>\n The number indicates a total amount to be divided into orbs.","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"the total amount of experience to be created","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityUnleashEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called immediately prior to an entity being unleashed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityUnleashEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"reason","comment_text":"","type":"org.bukkit.event.entity.EntityUnleashEvent.UnleashReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getReason","comment_text":"Returns the reason for the unleashing.","return_type":"org.bukkit.event.entity.EntityUnleashEvent.UnleashReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityUnleashEvent.UnleashReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityUnleashEvent.UnleashReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityUnleashEvent.UnleashReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["HOLDER_GONE","PLAYER_UNLEASH","DISTANCE","UNKNOWN"]},{"name":"org.bukkit.event.entity.EntityToggleSwimEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Sent when an entity's swimming status is toggled.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityToggleSwimEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"isSwimming","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSwimming","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityToggleGlideEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Sent when an entity's gliding status is toggled with an Elytra.\n Examples of when this event would be called:\n <ul>\n     <li>Player presses the jump key while in midair and using an Elytra</li>\n     <li>Player lands on ground while they are gliding (with an Elytra)</li>\n </ul>\n This can be visually estimated by the animation in which a player turns horizontal.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityToggleGlideEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"isGliding","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isGliding","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityTeleportEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown when a non-player entity is teleported from one location to another.\n <br>\n This may be as a result of natural causes (Enderman, Shulker), pathfinding\n (Wolf), or commands (/teleport).","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityTeleportEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getFrom","comment_text":"Gets the location that this entity moved from","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFrom","comment_text":"Sets the location that this entity moved from","return_type":"void","return_type_dimension":"","parameters":[{"name":"from","comment_text":"New location this entity moved from","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getTo","comment_text":"Gets the location that this entity moved to","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTo","comment_text":"Sets the location that this entity moved to","return_type":"void","return_type_dimension":"","parameters":[{"name":"to","comment_text":"New Location this entity moved to","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityTargetLivingEntityEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityTargetEvent","comment_text":"Called when an Entity targets a {@link LivingEntity} and can only target\n LivingEntity's.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityTargetLivingEntityEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"target","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"reason","comment_text":"","type":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTarget","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTarget","comment_text":"Set the Entity that you want the mob to target.\n <p>\n It is possible to be null, null will cause the entity to be\n target-less.\n <p>\n Must be a LivingEntity, or null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"target","comment_text":"The entity to target","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityTargetEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a creature targets or untargets another entity","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityTargetEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"target","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"reason","comment_text":"","type":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getReason","comment_text":"Returns the reason for the targeting","return_type":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTarget","comment_text":"Get the entity that this is targeting.\n <p>\n This will be null in the case that the event is called when the mob\n forgets its target.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTarget","comment_text":"Set the entity that you want the mob to target instead.\n <p>\n It is possible to be null, null will cause the entity to be\n target-less.\n <p>\n This is different from cancelling the event. Cancelling the event will\n cause the entity to keep an original target, while setting to be null\n will cause the entity to be reset.","return_type":"void","return_type_dimension":"","parameters":[{"name":"target","comment_text":"The entity to target","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the reason for the targeting","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityTargetEvent.TargetReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["TARGET_DIED","CLOSEST_PLAYER","TARGET_ATTACKED_ENTITY","PIG_ZOMBIE_TARGET","FORGOT_TARGET","TARGET_ATTACKED_OWNER","OWNER_ATTACKED_TARGET","RANDOM_TARGET","DEFEND_VILLAGE","TARGET_ATTACKED_NEARBY_ENTITY","REINFORCEMENT_TARGET","COLLISION","CUSTOM","CLOSEST_ENTITY","TEMPT","UNKNOWN"]},{"name":"org.bukkit.event.entity.EntityTameEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown when a LivingEntity is tamed","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityTameEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"owner","comment_text":"","type":"org.bukkit.entity.AnimalTamer","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getOwner","comment_text":"Gets the owning AnimalTamer","return_type":"org.bukkit.entity.AnimalTamer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityShootBowEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a LivingEntity shoots a bow firing an arrow","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityShootBowEvent","comment_text":"","parameters":[{"name":"shooter","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"bow","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"projectile","comment_text":"","type":"org.bukkit.entity.Projectile","type_dimension":""},{"name":"force","comment_text":"","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBow","comment_text":"Gets the bow ItemStack used to fire the arrow.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getProjectile","comment_text":"Gets the projectile which will be launched by this event","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setProjectile","comment_text":"Replaces the projectile which will be launched","return_type":"void","return_type_dimension":"","parameters":[{"name":"projectile","comment_text":"the new projectile","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"getForce","comment_text":"Gets the force the arrow was launched with","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityResurrectEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity dies and may have the opportunity to be resurrected.\n Will be called in a cancelled state if the entity does not have a totem\n equipped.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityResurrectEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityRegainHealthEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Stores data for health-regain events","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityRegainHealthEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"amount","comment_text":"","type":"double","type_dimension":""},{"name":"regainReason","comment_text":"","type":"org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAmount","comment_text":"Gets the amount of regained health","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAmount","comment_text":"Sets the amount of regained health","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"the amount of health the entity will regain","type":"double","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getRegainReason","comment_text":"Gets the reason for why the entity is regaining health","return_type":"org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the type of health regaining that is occurring","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["REGEN","SATIATED","EATING","ENDER_CRYSTAL","MAGIC","MAGIC_REGEN","WITHER_SPAWN","WITHER","CUSTOM"]},{"name":"org.bukkit.event.entity.EntityPotionEffectEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a potion effect is modified on an entity.\n <p>\n If the event is cancelled, no change will be made on the entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityPotionEffectEvent","comment_text":"","parameters":[{"name":"livingEntity","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"oldEffect","comment_text":"","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"newEffect","comment_text":"","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityPotionEffectEvent.Cause","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.entity.EntityPotionEffectEvent.Action","type_dimension":""},{"name":"override","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getOldEffect","comment_text":"Gets the old potion effect of the changed type, which will be removed.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewEffect","comment_text":"Gets new potion effect of the changed type to be applied.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCause","comment_text":"Gets the cause why the effect has changed.","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Cause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAction","comment_text":"Gets the action which will be performed on the potion effect type.","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Action","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getModifiedType","comment_text":"Gets the modified potion effect type.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isOverride","comment_text":"Returns if the new potion effect will override the old potion effect\n (Only applicable for the CHANGED Action).","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOverride","comment_text":"Sets if the new potion effect will override the old potion effect (Only\n applicable for the CHANGED action).","return_type":"void","return_type_dimension":"","parameters":[{"name":"override","comment_text":"If the new effect will override the old one.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityPotionEffectEvent.Action","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the action to be performed.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Action","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Action","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ADDED","CHANGED","CLEARED","REMOVED"]},{"name":"org.bukkit.event.entity.EntityPotionEffectEvent.Cause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the cause why an effect was changed.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Cause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityPotionEffectEvent.Cause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["AREA_EFFECT_CLOUD","ARROW","ATTACK","BEACON","COMMAND","CONDUIT","CONVERSION","DEATH","DOLPHIN","EXPIRATION","FOOD","ILLUSION","MILK","PLUGIN","POTION_DRINK","POTION_SPLASH","SPIDER_SPAWN","TOTEM","TURTLE_HELMET","UNKNOWN","VILLAGER_TRADE"]},{"name":"org.bukkit.event.entity.EntityPortalExitEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityTeleportEvent","comment_text":"Called before an entity exits a portal.\n <p>\n This event allows you to modify the velocity of the entity after they have\n successfully exited the portal.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityPortalExitEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"before","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"after","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBefore","comment_text":"Gets a copy of the velocity that the entity has before entering the\n portal.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAfter","comment_text":"Gets a copy of the velocity that the entity will have after exiting the\n portal.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAfter","comment_text":"Sets the velocity that the entity will have after exiting the portal.","return_type":"void","return_type_dimension":"","parameters":[{"name":"after","comment_text":"the velocity after exiting the portal","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityPortalEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityTeleportEvent","comment_text":"Called when a non-player entity is about to teleport because it is in\n contact with a portal.\n <p>\n For players see {@link org.bukkit.event.player.PlayerPortalEvent}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityPortalEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"pta","comment_text":"","type":"org.bukkit.TravelAgent","type_dimension":""}],"throws":[]}],"fields":[{"name":"useTravelAgent","comment_text":"","type":"boolean","type_dimension":""},{"name":"travelAgent","comment_text":"","type":"org.bukkit.TravelAgent","type_dimension":""}],"methods":[{"name":"useTravelAgent","comment_text":"Sets whether or not the Travel Agent will be used.\n <p>\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n <p>\n If this is set to false, the {@link #getEntity()} will only be\n teleported to the {@link #getTo()} Location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"useTravelAgent","comment_text":"whether to use the Travel Agent","type":"boolean","type_dimension":""}],"throws":[]},{"name":"useTravelAgent","comment_text":"Gets whether or not the Travel Agent will be used.\n <p>\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n <p>\n If this is set to false, the {@link #getEntity()} will only be\n teleported to the {@link #getTo()} Location.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPortalTravelAgent","comment_text":"Gets the Travel Agent used (or not) in this event.","return_type":"org.bukkit.TravelAgent","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPortalTravelAgent","comment_text":"Sets the Travel Agent used (or not) in this event.","return_type":"void","return_type_dimension":"","parameters":[{"name":"travelAgent","comment_text":"the Travel Agent used (or not) in this event","type":"org.bukkit.TravelAgent","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityPortalEnterEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity comes into contact with a portal","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityPortalEnterEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"location","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLocation","comment_text":"Gets the portal block the entity is touching","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityPickupItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown when a entity picks an item up from the ground","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityPickupItemEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"remaining","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Gets the Item picked up by the entity.","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRemaining","comment_text":"Gets the amount remaining on the ground, if any","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityInteractEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity interacts with an object","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityInteractEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getBlock","comment_text":"Returns the involved block","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityExplodeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity explodes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityExplodeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"location","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"yield","comment_text":"","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"blockList","comment_text":"Returns the list of blocks that would have been removed or were removed\n from the explosion event.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Returns the location where the explosion happened.\n <p>\n It is not possible to get this value from the Entity as the Entity no\n longer exists in the world.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getYield","comment_text":"Returns the percentage of blocks to drop from this explosion","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setYield","comment_text":"Sets the percentage of blocks to drop from this explosion","return_type":"void","return_type_dimension":"","parameters":[{"name":"yield","comment_text":"The new yield percentage","type":"float","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents an Entity-related event","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"methods":[{"name":"getEntity","comment_text":"Returns the Entity involved in this event","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntityType","comment_text":"Gets the EntityType of the Entity involved in this event.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityDropItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown when an entity creates an item drop.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityDropItemEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"drop","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItemDrop","comment_text":"Gets the Item created by the entity","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityDeathEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown whenever a LivingEntity dies","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityDeathEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"drops","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"EntityDeathEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"drops","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"droppedExp","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDroppedExp","comment_text":"Gets how much EXP should be dropped from this death.\n <p>\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDroppedExp","comment_text":"Sets how much EXP should be dropped from this death.\n <p>\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.","return_type":"void","return_type_dimension":"","parameters":[{"name":"exp","comment_text":"Amount of EXP to drop.","type":"int","type_dimension":""}],"throws":[]},{"name":"getDrops","comment_text":"Gets all the items which will drop when the entity dies","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityDamageEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Stores data for damage events","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityDamageEvent","comment_text":"","parameters":[{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"damage","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"EntityDamageEvent","comment_text":"","parameters":[{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"modifiers","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"modifierFunctions","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getOriginalDamage","comment_text":"Gets the original damage for the specified modifier, as defined at this\n event's construction.","return_type":"double","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the modifier","type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if type is null"}]},{"name":"setDamage","comment_text":"Sets the damage for the specified modifier.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the damage modifier","type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","type_dimension":""},{"name":"damage","comment_text":"the scalar value of the damage's modifier","type":"double","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if type is null"},{"name":"java.lang.UnsupportedOperationException","comment_text":"if the caller does not support\n     the particular DamageModifier, or to rephrase, when {@link\n     #isApplicable(DamageModifier)} returns false"}]},{"name":"getDamage","comment_text":"Gets the damage change for some modifier","return_type":"double","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the damage modifier","type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if type is null"}]},{"name":"isApplicable","comment_text":"This checks to see if a particular modifier is valid for this event's\n caller, such that, {@link #setDamage(DamageModifier, double)} will not\n throw an {@link UnsupportedOperationException}.\n <p>\n {@link DamageModifier#BASE} is always applicable.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the modifier","type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if type is null"}]},{"name":"getDamage","comment_text":"Gets the raw amount of damage caused by the event","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFinalDamage","comment_text":"Gets the amount of damage caused by the event after all damage\n reduction is applied.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDamage","comment_text":"Sets the raw amount of damage caused by the event.\n <p>\n For compatibility this also recalculates the modifiers and scales\n them by the difference between the modifier for the previous damage\n value and the new one.","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"The raw amount of damage caused by the event","type":"double","type_dimension":""}],"throws":[]},{"name":"getCause","comment_text":"Gets the cause of the damage.","return_type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the types of modifier","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityDamageEvent.DamageModifier","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BASE","HARD_HAT","BLOCKING","ARMOR","RESISTANCE","MAGIC","ABSORPTION"]},{"name":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the cause of the damage","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["CONTACT","ENTITY_ATTACK","ENTITY_SWEEP_ATTACK","PROJECTILE","SUFFOCATION","FALL","FIRE","FIRE_TICK","MELTING","LAVA","DROWNING","BLOCK_EXPLOSION","ENTITY_EXPLOSION","VOID","LIGHTNING","SUICIDE","STARVATION","POISON","MAGIC","WITHER","FALLING_BLOCK","THORNS","DRAGON_BREATH","CUSTOM","FLY_INTO_WALL","HOT_FLOOR","CRAMMING","DRYOUT"]},{"name":"org.bukkit.event.entity.EntityDamageByEntityEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityDamageEvent","comment_text":"Called when an entity is damaged by an entity","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityDamageByEntityEvent","comment_text":"","parameters":[{"name":"damager","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"damage","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"EntityDamageByEntityEvent","comment_text":"","parameters":[{"name":"damager","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"modifiers","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"modifierFunctions","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getDamager","comment_text":"Returns the entity that damaged the defender.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityDamageByBlockEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityDamageEvent","comment_text":"Called when an entity is damaged by a block","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityDamageByBlockEvent","comment_text":"","parameters":[{"name":"damager","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"damage","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"EntityDamageByBlockEvent","comment_text":"","parameters":[{"name":"damager","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"damagee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.EntityDamageEvent.DamageCause","type_dimension":""},{"name":"modifiers","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"modifierFunctions","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getDamager","comment_text":"Returns the block that damaged the player.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityCreatePortalEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Thrown when a Living Entity creates a portal in a world.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityCreatePortalEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.PortalType","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlocks","comment_text":"Gets a list of all blocks associated with the portal.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPortalType","comment_text":"Gets the type of portal that is trying to be created.","return_type":"org.bukkit.PortalType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityCombustEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an entity combusts.\n <p>\n If an Entity Combust event is cancelled, the entity will not combust.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityCombustEvent","comment_text":"","parameters":[{"name":"combustee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"duration","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getDuration","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDuration","comment_text":"The number of seconds the combustee should be alight for.\n <p>\n This value will only ever increase the combustion time, not decrease\n existing combustion times.","return_type":"void","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"the time in seconds to be alight for.","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityCombustByEntityEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityCombustEvent","comment_text":"Called when an entity causes another entity to combust.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityCombustByEntityEvent","comment_text":"","parameters":[{"name":"combuster","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"combustee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"duration","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCombuster","comment_text":"Get the entity that caused the combustion event.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityCombustByBlockEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityCombustEvent","comment_text":"Called when a block causes an entity to combust.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityCombustByBlockEvent","comment_text":"","parameters":[{"name":"combuster","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"combustee","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"duration","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCombuster","comment_text":"The combuster can be lava or a block that is on fire.\n <p>\n WARNING: block may be null.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityChangeBlockEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when any Entity, excluding players, changes a block.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityChangeBlockEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBlock","comment_text":"Gets the block the entity is changing","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getTo","comment_text":"Gets the Material that the block is changing into","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockData","comment_text":"Gets the data for the block that would be changed into","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityBreedEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when one Entity breeds with another Entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityBreedEvent","comment_text":"","parameters":[{"name":"child","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"mother","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"father","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"breeder","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"bredWith","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"experience","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMother","comment_text":"Gets the parent creating this entity.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFather","comment_text":"Gets the other parent of the newly born entity.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBreeder","comment_text":"Gets the Entity responsible for breeding. Breeder is null for spontaneous\n conception.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBredWith","comment_text":"The ItemStack that was used to initiate breeding, if present.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getExperience","comment_text":"Get the amount of experience granted by breeding.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExperience","comment_text":"Set the amount of experience granted by breeding.","return_type":"void","return_type_dimension":"","parameters":[{"name":"experience","comment_text":"experience amount","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityBreakDoorEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityChangeBlockEvent","comment_text":"Called when an {@link Entity} breaks a door\n <p>\n Cancelling the event will cause the event to be delayed","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityBreakDoorEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"targetBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EntityAirChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when the amount of air an entity has remaining changes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EntityAirChangeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"amount","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAmount","comment_text":"Gets the amount of air the entity has left (measured in ticks).","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAmount","comment_text":"Sets the amount of air remaining for the entity (measured in ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"amount of air remaining","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.EnderDragonChangePhaseEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when an EnderDragon switches controller phase.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EnderDragonChangePhaseEvent","comment_text":"","parameters":[{"name":"enderDragon","comment_text":"","type":"org.bukkit.entity.EnderDragon","type_dimension":""},{"name":"currentPhase","comment_text":"","type":"org.bukkit.entity.EnderDragon.Phase","type_dimension":""},{"name":"newPhase","comment_text":"","type":"org.bukkit.entity.EnderDragon.Phase","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.EnderDragon","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCurrentPhase","comment_text":"Gets the current phase that the dragon is in. This method will return null \n when a dragon is first spawned and hasn't yet been assigned a phase.","return_type":"org.bukkit.entity.EnderDragon.Phase","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewPhase","comment_text":"Gets the new phase that the dragon will switch to.","return_type":"org.bukkit.entity.EnderDragon.Phase","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewPhase","comment_text":"Sets the new phase for the ender dragon.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newPhase","comment_text":"the new dragon phase","type":"org.bukkit.entity.EnderDragon.Phase","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.CreeperPowerEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a Creeper is struck by lightning.\n <p>\n If a Creeper Power event is cancelled, the Creeper will not be powered.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CreeperPowerEvent","comment_text":"","parameters":[{"name":"creeper","comment_text":"","type":"org.bukkit.entity.Creeper","type_dimension":""},{"name":"bolt","comment_text":"","type":"org.bukkit.entity.LightningStrike","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","type_dimension":""}],"throws":[]},{"name":"CreeperPowerEvent","comment_text":"","parameters":[{"name":"creeper","comment_text":"","type":"org.bukkit.entity.Creeper","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Creeper","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLightning","comment_text":"Gets the lightning bolt which is striking the Creeper.","return_type":"org.bukkit.entity.LightningStrike","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCause","comment_text":"Gets the cause of the creeper being (un)powered.","return_type":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the cause of the change in power","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.CreeperPowerEvent.PowerCause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["LIGHTNING","SET_ON","SET_OFF"]},{"name":"org.bukkit.event.entity.CreatureSpawnEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a creature is spawned into a world.\n <p>\n If a Creature Spawn event is cancelled, the creature will not spawn.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CreatureSpawnEvent","comment_text":"","parameters":[{"name":"spawnee","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"spawnReason","comment_text":"","type":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocation","comment_text":"Gets the location at which the creature is spawning.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpawnReason","comment_text":"Gets the reason for why the creature is being spawned.","return_type":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the type of spawning","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NATURAL","JOCKEY","CHUNK_GEN","SPAWNER","EGG","SPAWNER_EGG","LIGHTNING","BUILD_SNOWMAN","BUILD_IRONGOLEM","BUILD_WITHER","VILLAGE_DEFENSE","VILLAGE_INVASION","BREEDING","SLIME_SPLIT","REINFORCEMENTS","NETHER_PORTAL","DISPENSE_EGG","INFECTION","CURED","OCELOT_BABY","SILVERFISH_BLOCK","MOUNT","TRAP","ENDER_PEARL","SHOULDER_ENTITY","DROWNED","CUSTOM","DEFAULT"]},{"name":"org.bukkit.event.entity.AreaEffectCloudApplyEvent","interfaces":[],"superclass":"org.bukkit.event.entity.EntityEvent","comment_text":"Called when a lingering potion applies it's effects. Happens\n once every 5 ticks","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"AreaEffectCloudApplyEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.AreaEffectCloud","type_dimension":""},{"name":"affectedEntities","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.AreaEffectCloud","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAffectedEntities","comment_text":"Retrieves a mutable list of the effected entities\n <p>\n It is important to note that not every entity in this list\n is guaranteed to be effected.  The cloud may die during the\n application of its effects due to the depletion of {@link AreaEffectCloud#getDurationOnUse()}\n or {@link AreaEffectCloud#getRadiusOnUse()}","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.hanging.HangingPlaceEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.hanging.HangingEvent","comment_text":"Triggered when a hanging entity is created in the world","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HangingPlaceEvent","comment_text":"","parameters":[{"name":"hanging","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Returns the player placing the hanging entity","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlock","comment_text":"Returns the block that the hanging entity was placed on","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockFace","comment_text":"Returns the face of the block that the hanging entity was placed on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.hanging.HangingEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a hanging entity-related event.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HangingEvent","comment_text":"","parameters":[{"name":"painting","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""}],"throws":[]}],"fields":[{"name":"hanging","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""}],"methods":[{"name":"getEntity","comment_text":"Gets the hanging entity involved in this event.","return_type":"org.bukkit.entity.Hanging","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.hanging.HangingBreakEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.hanging.HangingEvent","comment_text":"Triggered when a hanging entity is removed","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HangingBreakEvent","comment_text":"","parameters":[{"name":"hanging","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCause","comment_text":"Gets the cause for the hanging entity's removal","return_type":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the cause of the removal","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ENTITY","EXPLOSION","OBSTRUCTION","PHYSICS","DEFAULT"]},{"name":"org.bukkit.event.hanging.HangingBreakByEntityEvent","interfaces":[],"superclass":"org.bukkit.event.hanging.HangingBreakEvent","comment_text":"Triggered when a hanging entity is removed by an entity","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HangingBreakByEntityEvent","comment_text":"","parameters":[{"name":"hanging","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""},{"name":"remover","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"HangingBreakByEntityEvent","comment_text":"","parameters":[{"name":"hanging","comment_text":"","type":"org.bukkit.entity.Hanging","type_dimension":""},{"name":"remover","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.hanging.HangingBreakEvent.RemoveCause","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRemover","comment_text":"Gets the entity that removed the hanging entity","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.PrepareItemCraftEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PrepareItemCraftEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.inventory.CraftingInventory","type_dimension":""},{"name":"view","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"isRepair","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRecipe","comment_text":"Get the recipe that has been formed. If this event was triggered by a\n tool repair, this will be a temporary shapeless recipe representing the\n repair.","return_type":"org.bukkit.inventory.Recipe","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.CraftingInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isRepair","comment_text":"Check if this event was triggered by a tool repair operation rather\n than a crafting recipe.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.PrepareAnvilEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"Called when an item is put in a slot for repair by an anvil.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PrepareAnvilEvent","comment_text":"","parameters":[{"name":"inventory","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.AnvilInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getResult","comment_text":"Get result item, may be null.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setResult","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different kinds of inventories available in Bukkit.\n <br>\n Only InventoryTypes marked {@link #isCreatable()} can be created.\n <br>\n The current list of inventories that cannot be created via\n {@link org.bukkit.Bukkit#createInventory} are:<br>\n <blockquote>\n     {@link InventoryType#CREATIVE} and {@link InventoryType#CRAFTING}\n </blockquote>\n\n See {@link org.bukkit.Bukkit#createInventory} for more information.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":["org.bukkit.Bukkit"],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDefaultSize","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefaultTitle","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCreatable","comment_text":"Denotes that this InventoryType can be created via the normal\n {@link org.bukkit.Bukkit#createInventory} methods.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["CHEST","DISPENSER","DROPPER","FURNACE","WORKBENCH","CRAFTING","ENCHANTING","BREWING","PLAYER","CREATIVE","MERCHANT","ENDER_CHEST","ANVIL","BEACON","HOPPER","SHULKER_BOX"]},{"name":"org.bukkit.event.inventory.InventoryType.SlotType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryType.SlotType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryType.SlotType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["RESULT","CRAFTING","ARMOR","CONTAINER","QUICKBAR","OUTSIDE","FUEL"]},{"name":"org.bukkit.event.inventory.InventoryPickupItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.Event","comment_text":"Called when a hopper or hopper minecart picks up a dropped item.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryPickupItemEvent","comment_text":"","parameters":[{"name":"inventory","comment_text":"","type":"org.bukkit.inventory.Inventory","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getInventory","comment_text":"Gets the Inventory that picked up the item","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Gets the Item entity that was picked up","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryOpenEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"Represents a player related inventory event","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryOpenEvent","comment_text":"","parameters":[{"name":"transaction","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Returns the player involved in this event","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n <p>\n If an inventory open event is cancelled, the inventory screen will not\n show.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n <p>\n If an inventory open event is cancelled, the inventory screen will not\n show.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"true if you wish to cancel this event","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryMoveItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.Event","comment_text":"Called when some entity or block (e.g. hopper) tries to move items directly\n from one inventory to another.\n <p>\n When this event is called, the initiator may already have removed the item\n from the source inventory and is ready to move it into the destination\n inventory.\n <p>\n If this event is cancelled, the items will be returned to the source\n inventory, if needed.\n <p>\n If this event is not cancelled, the initiator will try to put the ItemStack\n into the destination inventory. If this is not possible and the ItemStack\n has not been modified, the source inventory slot will be restored to its\n former state. Otherwise any additional items will be discarded.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryMoveItemEvent","comment_text":"","parameters":[{"name":"sourceInventory","comment_text":"","type":"org.bukkit.inventory.Inventory","type_dimension":""},{"name":"itemStack","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"destinationInventory","comment_text":"","type":"org.bukkit.inventory.Inventory","type_dimension":""},{"name":"didSourceInitiate","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSource","comment_text":"Gets the Inventory that the ItemStack is being taken from","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Gets the ItemStack being moved; if modified, the original item will not\n be removed from the source inventory.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Sets the ItemStack being moved; if this is different from the original\n ItemStack, the original item will not be removed from the source\n inventory.","return_type":"void","return_type_dimension":"","parameters":[{"name":"itemStack","comment_text":"The ItemStack","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getDestination","comment_text":"Gets the Inventory that the ItemStack is being put into","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInitiator","comment_text":"Gets the Inventory that initiated the transfer. This will always be\n either the destination or source Inventory.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryInteractEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"An abstract base class for events that describe an interaction between a\n HumanEntity and the contents of an Inventory.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryInteractEvent","comment_text":"","parameters":[{"name":"transaction","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getWhoClicked","comment_text":"Gets the player who performed the click.","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setResult","comment_text":"Sets the result of this event. This will change whether or not this\n event is considered cancelled.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newResult","comment_text":"the new {@link Result} for this event","type":"org.bukkit.event.Event.Result","type_dimension":""}],"throws":[]},{"name":"getResult","comment_text":"Gets the {@link Result} of this event. The Result describes the\n behavior that will be applied to the inventory in relation to this\n event.","return_type":"org.bukkit.event.Event.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"Gets whether or not this event is cancelled. This is based off of the\n Result value returned by {@link #getResult()}.  Result.ALLOW and\n Result.DEFAULT will result in a returned value of false, but\n Result.DENY will result in a returned value of true.\n <p>\n {@inheritDoc}","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Proxy method to {@link #setResult(Event.Result)} for the Cancellable\n interface. {@link #setResult(Event.Result)} is preferred, as it allows\n you to specify the Result beyond Result.DENY and Result.ALLOW.\n <p>\n {@inheritDoc}","return_type":"void","return_type_dimension":"","parameters":[{"name":"toCancel","comment_text":"result becomes DENY if true, ALLOW if false","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a player related inventory event","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryEvent","comment_text":"","parameters":[{"name":"transaction","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"throws":[]}],"fields":[{"name":"transaction","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"methods":[{"name":"getInventory","comment_text":"Gets the primary Inventory involved in this transaction","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getViewers","comment_text":"Gets the list of players viewing the primary (upper) inventory involved\n in this event","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getView","comment_text":"Gets the view object itself","return_type":"org.bukkit.inventory.InventoryView","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryDragEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryInteractEvent","comment_text":"This event is called when the player drags an item in their cursor across\n the inventory. The ItemStack is distributed across the slots the\n HumanEntity dragged over. The method of distribution is described by the \n DragType returned by {@link #getType()}.\n <p>\n Canceling this event will result in none of the changes described in\n {@link #getNewItems()} being applied to the Inventory.\n <p>\n Because InventoryDragEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n <p>\n The following should never be invoked by an EventHandler for\n InventoryDragEvent using the HumanEntity or InventoryView associated with\n this event.\n <ul>\n <li>{@link HumanEntity#closeInventory()}\n <li>{@link HumanEntity#openInventory(Inventory)}\n <li>{@link HumanEntity#openWorkbench(Location, boolean)}\n <li>{@link HumanEntity#openEnchanting(Location, boolean)}\n <li>{@link InventoryView#close()}\n </ul>\n To invoke one of these methods, schedule a task using \n {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\n on the next tick.  Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n <p>\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of {@link Player#updateInventory()}.\n <p>\n Any modifications to slots that are modified by the results of this\n InventoryDragEvent will be overwritten. To change these slots, this event\n should be cancelled and the changes applied. Alternatively, scheduling a\n task using {@link BukkitScheduler#runTask(Plugin, Runnable)}, which would\n execute the task on the next tick, would work as well.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryDragEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"newCursor","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"oldCursor","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"right","comment_text":"","type":"boolean","type_dimension":""},{"name":"slots","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getNewItems","comment_text":"Gets all items to be added to the inventory in this drag.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRawSlots","comment_text":"Gets the raw slot ids to be changed in this drag.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInventorySlots","comment_text":"Gets the slots to be changed in this drag.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCursor","comment_text":"Gets the result cursor after the drag is done. The returned value is\n mutable.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCursor","comment_text":"Sets the result cursor after the drag is done.\n <p>\n Changing this item stack changes the cursor item. Note that changing\n the affected \"dragged\" slots does not change this ItemStack, nor does\n changing this ItemStack affect the \"dragged\" slots.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newCursor","comment_text":"the new cursor ItemStack","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getOldCursor","comment_text":"Gets an ItemStack representing the cursor prior to any modifications\n as a result of this drag.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Gets the DragType that describes the behavior of ItemStacks placed\n after this InventoryDragEvent.\n <p>\n The ItemStacks and the raw slots that they're being applied to can be\n found using {@link #getNewItems()}.","return_type":"org.bukkit.event.inventory.DragType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryCreativeEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryClickEvent","comment_text":"This event is called when a player in creative mode puts down or picks up\n an item in their inventory / hotbar and when they drop items from their\n Inventory while in creative mode.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryCreativeEvent","comment_text":"","parameters":[{"name":"what","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.event.inventory.InventoryType.SlotType","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"newItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCursor","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCursor","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryCloseEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryEvent","comment_text":"Represents a player related inventory event","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryCloseEvent","comment_text":"","parameters":[{"name":"transaction","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Returns the player involved in this event","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryClickEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryInteractEvent","comment_text":"This event is called when a player clicks a slot in an inventory.\n <p>\n Because InventoryClickEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n <p>\n The following should never be invoked by an EventHandler for\n InventoryClickEvent using the HumanEntity or InventoryView associated with\n this event:\n <ul>\n <li>{@link HumanEntity#closeInventory()}\n <li>{@link HumanEntity#openInventory(Inventory)}\n <li>{@link HumanEntity#openWorkbench(Location, boolean)}\n <li>{@link HumanEntity#openEnchanting(Location, boolean)}\n <li>{@link InventoryView#close()}\n </ul>\n To invoke one of these methods, schedule a task using \n {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\n on the next tick. Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n <p>\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of {@link Player#updateInventory()}.\n <p>\n Modifications to slots that are modified by the results of this\n InventoryClickEvent can be overwritten. To change these slots, this event\n should be cancelled and all desired changes to the inventory applied.\n Alternatively, scheduling a task using {@link BukkitScheduler#runTask(\n Plugin, Runnable)}, which would execute the task on the next tick, would\n work as well.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryClickEvent","comment_text":"","parameters":[{"name":"view","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.event.inventory.InventoryType.SlotType","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"click","comment_text":"","type":"org.bukkit.event.inventory.ClickType","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.inventory.InventoryAction","type_dimension":""}],"throws":[]},{"name":"InventoryClickEvent","comment_text":"","parameters":[{"name":"view","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.event.inventory.InventoryType.SlotType","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"click","comment_text":"","type":"org.bukkit.event.inventory.ClickType","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.inventory.InventoryAction","type_dimension":""},{"name":"key","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSlotType","comment_text":"Gets the type of slot that was clicked.","return_type":"org.bukkit.event.inventory.InventoryType.SlotType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCursor","comment_text":"Gets the current ItemStack on the cursor.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCurrentItem","comment_text":"Gets the ItemStack currently in the clicked slot.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isRightClick","comment_text":"Gets whether or not the ClickType for this event represents a right\n click.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLeftClick","comment_text":"Gets whether or not the ClickType for this event represents a left\n click.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isShiftClick","comment_text":"Gets whether the ClickType for this event indicates that the key was\n pressed down when the click was made.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCursor","comment_text":"Sets the item on the cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the new cursor item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setCurrentItem","comment_text":"Sets the ItemStack currently in the clicked slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the item to be placed in the current slot","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getSlot","comment_text":"The slot number that was clicked, ready for passing to\n {@link Inventory#getItem(int)}. Note that there may be two slots with\n the same slot number, since a view links two different inventories.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRawSlot","comment_text":"The raw slot number clicked, ready for passing to {@link InventoryView\n #getItem(int)} This slot number is unique for the view.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHotbarButton","comment_text":"If the ClickType is NUMBER_KEY, this method will return the index of\n the pressed key (0-8).","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAction","comment_text":"Gets the InventoryAction that triggered this event.\n <p>\n This action cannot be changed, and represents what the normal outcome\n of the event will be. To change the behavior of this\n InventoryClickEvent, changes must be manually applied.","return_type":"org.bukkit.event.inventory.InventoryAction","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getClick","comment_text":"Gets the ClickType for this event.\n <p>\n This is insulated against changes to the inventory by other plugins.","return_type":"org.bukkit.event.inventory.ClickType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.InventoryAction","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An estimation of what the result will be.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryAction","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryAction","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NOTHING","PICKUP_ALL","PICKUP_SOME","PICKUP_HALF","PICKUP_ONE","PLACE_ALL","PLACE_SOME","PLACE_ONE","SWAP_WITH_CURSOR","DROP_ALL_CURSOR","DROP_ONE_CURSOR","DROP_ALL_SLOT","DROP_ONE_SLOT","MOVE_TO_OTHER_INVENTORY","HOTBAR_MOVE_AND_READD","HOTBAR_SWAP","CLONE_STACK","COLLECT_TO_CURSOR","UNKNOWN"]},{"name":"org.bukkit.event.inventory.FurnaceSmeltEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when an ItemStack is successfully smelted in a furnace.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FurnaceSmeltEvent","comment_text":"","parameters":[{"name":"furnace","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSource","comment_text":"Gets the smelted ItemStack for this event","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getResult","comment_text":"Gets the resultant ItemStack for this event","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setResult","comment_text":"Sets the resultant ItemStack for this event","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"new result ItemStack","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.FurnaceExtractEvent","interfaces":[],"superclass":"org.bukkit.event.block.BlockExpEvent","comment_text":"This event is called when a player takes items out of the furnace","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FurnaceExtractEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"itemType","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"itemAmount","comment_text":"","type":"int","type_dimension":""},{"name":"exp","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Get the player that triggered the event","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemType","comment_text":"Get the Material of the item being retrieved","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemAmount","comment_text":"Get the item count being retrieved","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.FurnaceBurnEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when an ItemStack is successfully burned as fuel in a furnace.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FurnaceBurnEvent","comment_text":"","parameters":[{"name":"furnace","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"fuel","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"burnTime","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getFuel","comment_text":"Gets the fuel ItemStack for this event","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBurnTime","comment_text":"Gets the burn time for this fuel","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBurnTime","comment_text":"Sets the burn time for this fuel","return_type":"void","return_type_dimension":"","parameters":[{"name":"burnTime","comment_text":"the burn time for this fuel","type":"int","type_dimension":""}],"throws":[]},{"name":"isBurning","comment_text":"Gets whether the furnace's fuel is burning or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBurning","comment_text":"Sets whether the furnace's fuel is burning or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"burning","comment_text":"true if the furnace's fuel is burning","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.DragType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the effect of a drag that will be applied to an Inventory in an\n InventoryDragEvent.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.inventory.DragType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.inventory.DragType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SINGLE","EVEN"]},{"name":"org.bukkit.event.inventory.CraftItemEvent","interfaces":[],"superclass":"org.bukkit.event.inventory.InventoryClickEvent","comment_text":"Called when the recipe of an Item is completed inside a crafting matrix.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CraftItemEvent","comment_text":"","parameters":[{"name":"recipe","comment_text":"","type":"org.bukkit.inventory.Recipe","type_dimension":""},{"name":"what","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.event.inventory.InventoryType.SlotType","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"click","comment_text":"","type":"org.bukkit.event.inventory.ClickType","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.inventory.InventoryAction","type_dimension":""}],"throws":[]},{"name":"CraftItemEvent","comment_text":"","parameters":[{"name":"recipe","comment_text":"","type":"org.bukkit.inventory.Recipe","type_dimension":""},{"name":"what","comment_text":"","type":"org.bukkit.inventory.InventoryView","type_dimension":""},{"name":"type","comment_text":"","type":"org.bukkit.event.inventory.InventoryType.SlotType","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"click","comment_text":"","type":"org.bukkit.event.inventory.ClickType","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.inventory.InventoryAction","type_dimension":""},{"name":"key","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRecipe","comment_text":"","return_type":"org.bukkit.inventory.Recipe","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getInventory","comment_text":"","return_type":"org.bukkit.inventory.CraftingInventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.ClickType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"What the client did to trigger this action (not the result).","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.inventory.ClickType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.inventory.ClickType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isKeyboardClick","comment_text":"Gets whether this ClickType represents the pressing of a key on a\n keyboard.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCreativeAction","comment_text":"Gets whether this ClickType represents an action that can only be\n performed by a Player in creative mode.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isRightClick","comment_text":"Gets whether this ClickType represents a right click.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isLeftClick","comment_text":"Gets whether this ClickType represents a left click.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isShiftClick","comment_text":"Gets whether this ClickType indicates that the shift key was pressed\n down when the click was made.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["LEFT","SHIFT_LEFT","RIGHT","SHIFT_RIGHT","WINDOW_BORDER_LEFT","WINDOW_BORDER_RIGHT","MIDDLE","NUMBER_KEY","DOUBLE_CLICK","DROP","CONTROL_DROP","CREATIVE","UNKNOWN"]},{"name":"org.bukkit.event.inventory.BrewingStandFuelEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when an ItemStack is about to increase the fuel level of a brewing\n stand.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BrewingStandFuelEvent","comment_text":"","parameters":[{"name":"brewingStand","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"fuel","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"fuelPower","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getFuel","comment_text":"Gets the ItemStack of the fuel before the amount was subtracted.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFuelPower","comment_text":"Gets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFuelPower","comment_text":"Sets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.","return_type":"void","return_type_dimension":"","parameters":[{"name":"fuelPower","comment_text":"the fuel power for this fuel","type":"int","type_dimension":""}],"throws":[]},{"name":"isConsuming","comment_text":"Gets whether the brewing stand's fuel will be reduced / consumed or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setConsuming","comment_text":"Sets whether the brewing stand's fuel will be reduced / consumed or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"consuming","comment_text":"whether the fuel will be reduced or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.inventory.BrewEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.block.BlockEvent","comment_text":"Called when the brewing of the contents inside the Brewing Stand is\n complete.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BrewEvent","comment_text":"","parameters":[{"name":"brewer","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"contents","comment_text":"","type":"org.bukkit.inventory.BrewerInventory","type_dimension":""},{"name":"fuelLevel","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getContents","comment_text":"Gets the contents of the Brewing Stand.","return_type":"org.bukkit.inventory.BrewerInventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFuelLevel","comment_text":"Gets the remaining fuel level.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerVelocityEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when the velocity of a player changes.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerVelocityEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"velocity","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getVelocity","comment_text":"Gets the velocity vector that will be sent to the player","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setVelocity","comment_text":"Sets the velocity vector that will be sent to the player","return_type":"void","return_type_dimension":"","parameters":[{"name":"velocity","comment_text":"The velocity vector that will be sent to the player","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerUnregisterChannelEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerChannelEvent","comment_text":"This is called immediately after a player unregisters for a plugin channel.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerUnregisterChannelEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerUnleashEntityEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.entity.EntityUnleashEvent","comment_text":"Called prior to an entity being unleashed due to a player's action.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerUnleashEntityEvent","comment_text":"","parameters":[{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Returns the player who is unleashing the entity.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerToggleSprintEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player toggles their sprinting state","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerToggleSprintEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"isSprinting","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isSprinting","comment_text":"Gets whether the player is now sprinting or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerToggleSneakEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player toggles their sneaking state","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerToggleSneakEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"isSneaking","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isSneaking","comment_text":"Returns whether the player is now sneaking or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerToggleFlightEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player toggles their flying state","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerToggleFlightEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"isFlying","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isFlying","comment_text":"Returns whether the player is trying to start or stop flying.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerTeleportEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerMoveEvent","comment_text":"Holds information for player teleport events","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerTeleportEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"PlayerTeleportEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCause","comment_text":"Gets the cause of this teleportation event","return_type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ENDER_PEARL","COMMAND","PLUGIN","NETHER_PORTAL","END_PORTAL","SPECTATE","END_GATEWAY","CHORUS_FRUIT","UNKNOWN"]},{"name":"org.bukkit.event.player.PlayerSwapHandItemsEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player swap items between main hand and off hand using the\n hotkey.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerSwapHandItemsEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"mainHandItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"offHandItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMainHandItem","comment_text":"Gets the item switched to the main hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMainHandItem","comment_text":"Sets the item in the main hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"mainHandItem","comment_text":"new item in the main hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getOffHandItem","comment_text":"Gets the item switched to the off hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOffHandItem","comment_text":"Sets the item in the off hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"offHandItem","comment_text":"new item in the off hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerStatisticIncrementEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player statistic is incremented.\n <p>\n This event is not called for some high frequency statistics, e.g. movement\n based statistics.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerStatisticIncrementEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"statistic","comment_text":"","type":"org.bukkit.Statistic","type_dimension":""},{"name":"initialValue","comment_text":"","type":"int","type_dimension":""},{"name":"newValue","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"PlayerStatisticIncrementEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"statistic","comment_text":"","type":"org.bukkit.Statistic","type_dimension":""},{"name":"initialValue","comment_text":"","type":"int","type_dimension":""},{"name":"newValue","comment_text":"","type":"int","type_dimension":""},{"name":"entityType","comment_text":"","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"PlayerStatisticIncrementEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"statistic","comment_text":"","type":"org.bukkit.Statistic","type_dimension":""},{"name":"initialValue","comment_text":"","type":"int","type_dimension":""},{"name":"newValue","comment_text":"","type":"int","type_dimension":""},{"name":"material","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]}],"fields":[{"name":"statistic","comment_text":"","type":"org.bukkit.Statistic","type_dimension":""}],"methods":[{"name":"getStatistic","comment_text":"Gets the statistic that is being incremented.","return_type":"org.bukkit.Statistic","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPreviousValue","comment_text":"Gets the previous value of the statistic.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewValue","comment_text":"Gets the new value of the statistic.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntityType","comment_text":"Gets the EntityType if {@link #getStatistic() getStatistic()} is an\n entity statistic otherwise returns null.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaterial","comment_text":"Gets the Material if {@link #getStatistic() getStatistic()} is a block\n or item statistic otherwise returns null.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerShearEntityEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player shears an entity","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerShearEntityEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"what","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getEntity","comment_text":"Gets the entity the player is shearing","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerRiptideEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is fired when the player activates the riptide enchantment, using\n their trident to propel them through the air.\n <br>\n N.B. the riptide action is currently performed client side, so manipulating\n the player in this event may have undesired effects.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerRiptideEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItem","comment_text":"Gets the item containing the used enchantment.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerRespawnEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player respawns.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerRespawnEvent","comment_text":"","parameters":[{"name":"respawnPlayer","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"respawnLocation","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"isBedSpawn","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getRespawnLocation","comment_text":"Gets the current respawn location","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRespawnLocation","comment_text":"Sets the new respawn location","return_type":"void","return_type_dimension":"","parameters":[{"name":"respawnLocation","comment_text":"new location for the respawn","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"isBedSpawn","comment_text":"Gets whether the respawn location is the player's bed.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerResourcePackStatusEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player takes action on a resource pack request sent via\n {@link Player#setResourcePack(java.lang.String)}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerResourcePackStatusEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"resourcePackStatus","comment_text":"","type":"org.bukkit.event.player.PlayerResourcePackStatusEvent.Status","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getStatus","comment_text":"Gets the status of this pack.","return_type":"org.bukkit.event.player.PlayerResourcePackStatusEvent.Status","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerResourcePackStatusEvent.Status","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Status of the resource pack.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerResourcePackStatusEvent.Status","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerResourcePackStatusEvent.Status","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SUCCESSFULLY_LOADED","DECLINED","FAILED_DOWNLOAD","ACCEPTED"]},{"name":"org.bukkit.event.player.PlayerRegisterChannelEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerChannelEvent","comment_text":"This is called immediately after a player registers for a plugin channel.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerRegisterChannelEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerQuitEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player leaves a server","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerQuitEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"quitMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getQuitMessage","comment_text":"Gets the quit message to send to all online players","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setQuitMessage","comment_text":"Sets the quit message to send to all online players","return_type":"void","return_type_dimension":"","parameters":[{"name":"quitMessage","comment_text":"quit message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerPreLoginEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Stores details for players attempting to log in","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerPreLoginEvent","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"ipAddress","comment_text":"","type":"java.net.InetAddress","type_dimension":""}],"throws":[]},{"name":"PlayerPreLoginEvent","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"ipAddress","comment_text":"","type":"java.net.InetAddress","type_dimension":""},{"name":"uniqueId","comment_text":"","type":"java.util.UUID","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getResult","comment_text":"Gets the current result of the login, as an enum","return_type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setResult","comment_text":"Sets the new result of the login, as an enum","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result to set","type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","type_dimension":""}],"throws":[]},{"name":"getKickMessage","comment_text":"Gets the current kick message that will be used if getResult() !=\n Result.ALLOWED","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKickMessage","comment_text":"Sets the kick message to display if getResult() != Result.ALLOWED","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New kick message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"allow","comment_text":"Allows the player to log in","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"disallow","comment_text":"Disallows the player from logging in, with the given reason","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result for disallowing the player","type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","type_dimension":""},{"name":"message","comment_text":"Kick message to display to the user","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the player's name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAddress","comment_text":"Gets the player IP address.","return_type":"java.net.InetAddress","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUniqueId","comment_text":"Gets the player's unique ID.","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerPreLoginEvent.Result","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Basic kick reasons for communicating to plugins","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ALLOWED","KICK_FULL","KICK_BANNED","KICK_WHITELIST","KICK_OTHER"]},{"name":"org.bukkit.event.player.PlayerPortalEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerTeleportEvent","comment_text":"Called when a player is about to teleport because it is in contact with a\n portal.\n <p>\n For other entities see {@link org.bukkit.event.entity.EntityPortalEvent}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerPortalEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"pta","comment_text":"","type":"org.bukkit.TravelAgent","type_dimension":""}],"throws":[]},{"name":"PlayerPortalEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"pta","comment_text":"","type":"org.bukkit.TravelAgent","type_dimension":""},{"name":"cause","comment_text":"","type":"org.bukkit.event.player.PlayerTeleportEvent.TeleportCause","type_dimension":""}],"throws":[]}],"fields":[{"name":"useTravelAgent","comment_text":"","type":"boolean","type_dimension":""},{"name":"travelAgent","comment_text":"","type":"org.bukkit.TravelAgent","type_dimension":""}],"methods":[{"name":"useTravelAgent","comment_text":"Sets whether or not the Travel Agent will be used.\n <p>\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n <p>\n If this is set to false, the {@link #getPlayer()} will only be\n teleported to the {@link #getTo()} Location.","return_type":"void","return_type_dimension":"","parameters":[{"name":"useTravelAgent","comment_text":"whether to use the Travel Agent","type":"boolean","type_dimension":""}],"throws":[]},{"name":"useTravelAgent","comment_text":"Gets whether or not the Travel Agent will be used.\n <p>\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n <p>\n If this is set to false, the {@link #getPlayer()}} will only be\n teleported to the {@link #getTo()} Location.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPortalTravelAgent","comment_text":"Gets the Travel Agent used (or not) in this event.","return_type":"org.bukkit.TravelAgent","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPortalTravelAgent","comment_text":"Sets the Travel Agent used (or not) in this event.","return_type":"void","return_type_dimension":"","parameters":[{"name":"travelAgent","comment_text":"the Travel Agent used (or not) in this event","type":"org.bukkit.TravelAgent","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerPickupItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Thrown when a player picks an item up from the ground","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerPickupItemEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"remaining","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItem","comment_text":"Gets the Item picked up by the player.","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRemaining","comment_text":"Gets the amount remaining on the ground, if any","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerPickupArrowEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerPickupItemEvent","comment_text":"Thrown when a player picks up an arrow from the ground.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerPickupArrowEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""},{"name":"arrow","comment_text":"","type":"org.bukkit.entity.Arrow","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getArrow","comment_text":"Get the arrow being picked up by the player","return_type":"org.bukkit.entity.Arrow","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerMoveEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Holds information for player movement events","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerMoveEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n <p>\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n <p>\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"true if you wish to cancel this event","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getFrom","comment_text":"Gets the location this player moved from","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFrom","comment_text":"Sets the location to mark as where the player moved from","return_type":"void","return_type_dimension":"","parameters":[{"name":"from","comment_text":"New location to mark as the players previous location","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getTo","comment_text":"Gets the location this player moved to","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTo","comment_text":"Sets the location that this player will move to","return_type":"void","return_type_dimension":"","parameters":[{"name":"to","comment_text":"New Location this player will move to","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerLoginEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Stores details for players attempting to log in","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerLoginEvent","comment_text":"This constructor defaults message to an empty string, and result to\n ALLOWED","parameters":[{"name":"player","comment_text":"The {@link Player} for this event","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"hostname","comment_text":"The hostname that was used to connect to the server","type":"java.lang.String","type_dimension":""},{"name":"address","comment_text":"The address the player used to connect, provided for\n     timing issues","type":"java.net.InetAddress","type_dimension":""}],"throws":[]},{"name":"PlayerLoginEvent","comment_text":"This constructor pre-configures the event with a result and message","parameters":[{"name":"player","comment_text":"The {@link Player} for this event","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"hostname","comment_text":"The hostname that was used to connect to the server","type":"java.lang.String","type_dimension":""},{"name":"address","comment_text":"The address the player used to connect, provided for\n     timing issues","type":"java.net.InetAddress","type_dimension":""},{"name":"result","comment_text":"The result status for this event","type":"org.bukkit.event.player.PlayerLoginEvent.Result","type_dimension":""},{"name":"message","comment_text":"The message to be displayed if result denies login","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getResult","comment_text":"Gets the current result of the login, as an enum","return_type":"org.bukkit.event.player.PlayerLoginEvent.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setResult","comment_text":"Sets the new result of the login, as an enum","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result to set","type":"org.bukkit.event.player.PlayerLoginEvent.Result","type_dimension":""}],"throws":[]},{"name":"getKickMessage","comment_text":"Gets the current kick message that will be used if getResult() !=\n Result.ALLOWED","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKickMessage","comment_text":"Sets the kick message to display if getResult() != Result.ALLOWED","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New kick message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHostname","comment_text":"Gets the hostname that the player used to connect to the server, or\n blank if unknown","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"allow","comment_text":"Allows the player to log in","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"disallow","comment_text":"Disallows the player from logging in, with the given reason","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result for disallowing the player","type":"org.bukkit.event.player.PlayerLoginEvent.Result","type_dimension":""},{"name":"message","comment_text":"Kick message to display to the user","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getAddress","comment_text":"Gets the {@link InetAddress} for the Player associated with this event.\n This method is provided as a workaround for player.getAddress()\n returning null during PlayerLoginEvent.","return_type":"java.net.InetAddress","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerLoginEvent.Result","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Basic kick reasons for communicating to plugins","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerLoginEvent.Result","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerLoginEvent.Result","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ALLOWED","KICK_FULL","KICK_BANNED","KICK_WHITELIST","KICK_OTHER"]},{"name":"org.bukkit.event.player.PlayerLocaleChangeEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player changes their locale in the client settings.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerLocaleChangeEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"locale","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLocale","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerLevelChangeEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a players level changes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerLevelChangeEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"oldLevel","comment_text":"","type":"int","type_dimension":""},{"name":"newLevel","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getOldLevel","comment_text":"Gets the old level of the player","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewLevel","comment_text":"Gets the new level of the player","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerKickEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player gets kicked from the server","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerKickEvent","comment_text":"","parameters":[{"name":"playerKicked","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"kickReason","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"leaveMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getReason","comment_text":"Gets the reason why the player is getting kicked","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLeaveMessage","comment_text":"Gets the leave message send to all online players","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setReason","comment_text":"Sets the reason why the player is getting kicked","return_type":"void","return_type_dimension":"","parameters":[{"name":"kickReason","comment_text":"kick reason","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setLeaveMessage","comment_text":"Sets the leave message send to all online players","return_type":"void","return_type_dimension":"","parameters":[{"name":"leaveMessage","comment_text":"leave message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerJoinEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player joins a server","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerJoinEvent","comment_text":"","parameters":[{"name":"playerJoined","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"joinMessage","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getJoinMessage","comment_text":"Gets the join message to send to all online players","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setJoinMessage","comment_text":"Sets the join message to send to all online players","return_type":"void","return_type_dimension":"","parameters":[{"name":"joinMessage","comment_text":"join message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerItemMendEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Represents when a player has an item repaired via the Mending enchantment.\n <br>\n This event is fired directly before the {@link PlayerExpChangeEvent}, and the\n results of this event directly affect the {@link PlayerExpChangeEvent}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerItemMendEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"experienceOrb","comment_text":"","type":"org.bukkit.entity.ExperienceOrb","type_dimension":""},{"name":"repairAmount","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItem","comment_text":"Get the {@link ItemStack} to be repaired.\n\n This is not necessarily the item the player is holding.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getExperienceOrb","comment_text":"Get the experience orb triggering the event.","return_type":"org.bukkit.entity.ExperienceOrb","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRepairAmount","comment_text":"Get the amount the item is to be repaired.\n\n The default value is twice the value of the consumed experience orb\n or the remaining damage left on the item, whichever is smaller.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRepairAmount","comment_text":"Set the amount the item will be repaired.\n\n Half of this value will be subtracted from the experience orb which initiated this event.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"how much damage will be repaired on the item","type":"int","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerItemHeldEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Fired when a player changes their currently held item","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerItemHeldEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"previous","comment_text":"","type":"int","type_dimension":""},{"name":"current","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPreviousSlot","comment_text":"Gets the previous held slot index","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewSlot","comment_text":"Gets the new held slot index","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerItemConsumeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event will fire when a player is finishing consuming an item (food,\n potion, milk bucket).\n <br>\n If the ItemStack is modified the server will use the effects of the new\n item and not remove the original one from the player's inventory.\n <br>\n If the event is cancelled the effect will not be applied and the item will\n not be removed from the player's inventory.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerItemConsumeEvent","comment_text":"","parameters":[{"name":"player","comment_text":"the player consuming","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"item","comment_text":"the ItemStack being consumed","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItem","comment_text":"Gets the item that is being consumed. Modifying the returned item will\n have no effect, you must use {@link\n #setItem(org.bukkit.inventory.ItemStack)} instead.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Set the item being consumed","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the item being consumed","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerItemBreakEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Fired when a player's item breaks (such as a shovel or flint and steel).\n <p>\n The item that's breaking will exist in the inventory with a stack size of\n 0. After the event, the item's durability will be reset to 0.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerItemBreakEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"brokenItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBrokenItem","comment_text":"Gets the item that broke","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerInteractEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Represents an event that is called when a player interacts with an object or\n air, potentially fired once for each hand. The hand can be determined using\n {@link #getHand()}.\n <p>\n This event will fire as cancelled if the vanilla behavior\n is to do nothing (e.g interacting with air)","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerInteractEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.block.Action","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"clickedBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"clickedFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"PlayerInteractEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.block.Action","type_dimension":""},{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"clickedBlock","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"clickedFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"hand","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"throws":[]}],"fields":[{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"action","comment_text":"","type":"org.bukkit.event.block.Action","type_dimension":""},{"name":"blockClicked","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"methods":[{"name":"getAction","comment_text":"Returns the action type","return_type":"org.bukkit.event.block.Action","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"Gets the cancellation state of this event. Set to true if you want to\n prevent buckets from placing water and so forth","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"Sets the cancellation state of this event. A canceled event will not be\n executed in the server, but will still pass to other plugins\n <p>\n Canceling this event will prevent use of food (player won't lose the\n food item), prevent bows/snowballs/eggs from firing, etc. (player won't\n lose the ammo)","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"true if you wish to cancel this event","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getItem","comment_text":"Returns the item in hand represented by this event","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaterial","comment_text":"Convenience method. Returns the material of the item represented by\n this event","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasBlock","comment_text":"Check if this event involved a block","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasItem","comment_text":"Check if this event involved an item","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBlockInHand","comment_text":"Convenience method to inform the user whether this was a block\n placement event.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getClickedBlock","comment_text":"Returns the clicked block","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockFace","comment_text":"Returns the face of the block that was clicked","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"useInteractedBlock","comment_text":"This controls the action to take with the block (if any) that was\n clicked on. This event gets processed for all blocks, but most don't\n have a default action","return_type":"org.bukkit.event.Event.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUseInteractedBlock","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"useInteractedBlock","comment_text":"the action to take with the interacted block","type":"org.bukkit.event.Event.Result","type_dimension":""}],"throws":[]},{"name":"useItemInHand","comment_text":"This controls the action to take with the item the player is holding.\n This includes both blocks and items (such as flint and steel or\n records). When this is set to default, it will be allowed if no action\n is taken on the interacted block.","return_type":"org.bukkit.event.Event.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUseItemInHand","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"useItemInHand","comment_text":"the action to take with the item in hand","type":"org.bukkit.event.Event.Result","type_dimension":""}],"throws":[]},{"name":"getHand","comment_text":"The hand used to perform this interaction. May be null in the case of\n {@link Action#PHYSICAL}.","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerInteractEntityEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Represents an event that is called when a player right clicks an entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerInteractEntityEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"PlayerInteractEntityEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"hand","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"throws":[]}],"fields":[{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getRightClicked","comment_text":"Gets the entity that was rightclicked by the player.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHand","comment_text":"The hand used to perform this interaction.","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerInteractAtEntityEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerInteractEntityEvent","comment_text":"Represents an event that is called when a player right clicks an entity that\n also contains the location where the entity was clicked.\n <br>\n Note that the client may sometimes spuriously send this packet in addition to {@link PlayerInteractEntityEvent}.\n Users are advised to listen to this (parent) class unless specifically required.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerInteractAtEntityEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"position","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"PlayerInteractAtEntityEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"position","comment_text":"","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"hand","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getClickedPosition","comment_text":"","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerGameModeChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when the GameMode of the player is changed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerGameModeChangeEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"newGameMode","comment_text":"","type":"org.bukkit.GameMode","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getNewGameMode","comment_text":"Gets the GameMode the player is switched to.","return_type":"org.bukkit.GameMode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerFishEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Thrown when a player is fishing","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerFishEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"hookEntity","comment_text":"","type":"org.bukkit.entity.FishHook","type_dimension":""},{"name":"state","comment_text":"","type":"org.bukkit.event.player.PlayerFishEvent.State","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCaught","comment_text":"Gets the entity caught by the player.\n <p>\n If player has fished successfully, the result may be cast to {@link\n org.bukkit.entity.Item}.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHook","comment_text":"Gets the fishing hook.","return_type":"org.bukkit.entity.FishHook","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getExpToDrop","comment_text":"Gets the amount of experience received when fishing.\n <p>\n Note: This value has no default effect unless the event state is {@link\n State#CAUGHT_FISH}.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExpToDrop","comment_text":"Sets the amount of experience received when fishing.\n <p>\n Note: This value has no default effect unless the event state is {@link\n State#CAUGHT_FISH}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"the amount of experience to drop","type":"int","type_dimension":""}],"throws":[]},{"name":"getState","comment_text":"Gets the state of the fishing","return_type":"org.bukkit.event.player.PlayerFishEvent.State","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerFishEvent.State","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the state of the fishing","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerFishEvent.State","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerFishEvent.State","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["FISHING","CAUGHT_FISH","CAUGHT_ENTITY","IN_GROUND","FAILED_ATTEMPT","BITE"]},{"name":"org.bukkit.event.player.PlayerExpChangeEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a players experience changes naturally","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerExpChangeEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"expAmount","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAmount","comment_text":"Get the amount of experience the player will receive","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAmount","comment_text":"Set the amount of experience the player will receive","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"The amount of experience to set","type":"int","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a player related event","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"fields":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""}],"methods":[{"name":"getPlayer","comment_text":"Returns the player involved in this event","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerEggThrowEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player throws an egg and it might hatch","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerEggThrowEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"egg","comment_text":"","type":"org.bukkit.entity.Egg","type_dimension":""},{"name":"hatching","comment_text":"","type":"boolean","type_dimension":""},{"name":"numHatches","comment_text":"","type":"byte","type_dimension":""},{"name":"hatchingType","comment_text":"","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEgg","comment_text":"Gets the egg involved in this event.","return_type":"org.bukkit.entity.Egg","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isHatching","comment_text":"Gets whether the egg is hatching or not. Will be what the server\n would've done without interaction.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHatching","comment_text":"Sets whether the egg will hatch or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"hatching","comment_text":"true if you want the egg to hatch, false if you want it\n     not to","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHatchingType","comment_text":"Get the type of the mob being hatched (EntityType.CHICKEN by default)","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHatchingType","comment_text":"Change the type of mob being hatched by the egg","return_type":"void","return_type_dimension":"","parameters":[{"name":"hatchType","comment_text":"The type of the mob being hatched by the egg","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"getNumHatches","comment_text":"Get the number of mob hatches from the egg. By default the number will\n be the number the server would've done\n <ul>\n <li>7/8 chance of being 0\n <li>31/256 ~= 1/8 chance to be 1\n <li>1/256 chance to be 4\n </ul>","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNumHatches","comment_text":"Change the number of mobs coming out of the hatched egg\n <p>\n The boolean hatching will override this number. Ie. If hatching =\n false, this number will not matter","return_type":"void","return_type_dimension":"","parameters":[{"name":"numHatches","comment_text":"The number of mobs coming out of the egg","type":"byte","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerEditBookEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player edits or signs a book and quill item. If the event is\n cancelled, no changes are made to the BookMeta","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerEditBookEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"slot","comment_text":"","type":"int","type_dimension":""},{"name":"previousBookMeta","comment_text":"","type":"org.bukkit.inventory.meta.BookMeta","type_dimension":""},{"name":"newBookMeta","comment_text":"","type":"org.bukkit.inventory.meta.BookMeta","type_dimension":""},{"name":"isSigning","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPreviousBookMeta","comment_text":"Gets the book meta currently on the book.\n <p>\n Note: this is a copy of the book meta. You cannot use this object to\n change the existing book meta.","return_type":"org.bukkit.inventory.meta.BookMeta","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewBookMeta","comment_text":"Gets the book meta that the player is attempting to add to the book.\n <p>\n Note: this is a copy of the proposed new book meta. Use {@link\n #setNewBookMeta(BookMeta)} to change what will actually be added to the\n book.","return_type":"org.bukkit.inventory.meta.BookMeta","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSlot","comment_text":"Gets the inventory slot number for the book item that triggered this\n event.\n <p>\n This is a slot number on the player's hotbar in the range 0-8, or -1 for\n off hand.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNewBookMeta","comment_text":"Sets the book meta that will actually be added to the book.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newBookMeta","comment_text":"new book meta","type":"org.bukkit.inventory.meta.BookMeta","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the new book meta is null"}]},{"name":"isSigning","comment_text":"Gets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSigning","comment_text":"Sets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.","return_type":"void","return_type_dimension":"","parameters":[{"name":"signing","comment_text":"whether or not the book is being signed.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerDropItemEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Thrown when a player drops an item from their inventory","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerDropItemEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"drop","comment_text":"","type":"org.bukkit.entity.Item","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getItemDrop","comment_text":"Gets the ItemDrop created by the player","return_type":"org.bukkit.entity.Item","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerCommandSendEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is called when the list of available server commands is sent to\n the player.\n <br>\n Commands may be removed from display using this event, but implementations\n are not required to securely remove all traces of the command. If secure\n removal of commands is required, then the command should be assigned a\n permission which is not granted to the player.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerCommandSendEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"commands","comment_text":"","type":"java.util.Collection","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCommands","comment_text":"Returns a mutable collection of all top level commands to be sent.\n <br>\n It is not legal to add entries to this collection, only remove them.\n Behaviour of adding entries is undefined.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerCommandPreprocessEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is called whenever a player runs a command (by placing a slash\n at the start of their message). It is called early in the command handling\n process, and modifications in this event (via {@link #setMessage(String)})\n will be shown in the behavior.\n <p>\n Many plugins will have <b>no use for this event</b>, and you should\n attempt to avoid using it if it is not necessary.\n <p>\n Some examples of valid uses for this event are:\n <ul>\n <li>Logging executed commands to a separate file\n <li>Variable substitution. For example, replacing\n     <code>${nearbyPlayer}</code> with the name of the nearest other\n     player, or simulating the <code>@a</code> and <code>@p</code>\n     decorators used by Command Blocks in plugins that do not handle it.\n <li>Conditionally blocking commands belonging to other plugins. For\n     example, blocking the use of the <code>/home</code> command in a\n     combat arena.\n <li>Per-sender command aliases. For example, after a player runs the\n     command <code>/calias cr gamemode creative</code>, the next time they\n     run <code>/cr</code>, it gets replaced into\n     <code>/gamemode creative</code>. (Global command aliases should be\n     done by registering the alias.)\n </ul>\n <p>\n Examples of incorrect uses are:\n <ul>\n <li>Using this event to run command logic\n </ul>\n <p>\n If the event is cancelled, processing of the command will halt.\n <p>\n The state of whether or not there is a slash (<code>/</code>) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerCommandPreprocessEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"PlayerCommandPreprocessEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"recipients","comment_text":"","type":"java.util.Set","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getMessage","comment_text":"Gets the command that the player is attempting to send.\n <p>\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMessage","comment_text":"Sets the command that the player will send.\n <p>\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.","return_type":"void","return_type_dimension":"","parameters":[{"name":"command","comment_text":"New message that the player will send","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if command is null or empty"}]},{"name":"setPlayer","comment_text":"Sets the player that this command will be executed as.","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"New player which this event will execute as","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the player provided is null"}]},{"name":"getRecipients","comment_text":"Gets a set of recipients that this chat message will be displayed to.\n <p>\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation. Listeners\n should be aware that modifying the list may throw {@link\n UnsupportedOperationException} if the event caller provides an\n unmodifiable set.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerChatTabCompleteEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player attempts to tab-complete a chat message.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerChatTabCompleteEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"completions","comment_text":"","type":"java.util.Collection","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getChatMessage","comment_text":"Gets the chat message being tab-completed.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLastToken","comment_text":"Gets the last 'token' of the message being tab-completed.\n <p>\n The token is the substring starting with the character after the last\n space in the message.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTabCompletions","comment_text":"This is the collection of completions for this event.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerChatEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Holds information for player chat and commands","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerChatEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"PlayerChatEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"format","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"recipients","comment_text":"","type":"java.util.Set","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getMessage","comment_text":"Gets the message that the player is attempting to send","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMessage","comment_text":"Sets the message that the player will send","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New message that the player will send","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"setPlayer","comment_text":"Sets the player that this message will display as, or command will be\n executed as","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"New player which this event will execute as","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]},{"name":"getFormat","comment_text":"Gets the format to use to display this chat message","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFormat","comment_text":"Sets the format to use to display this chat message","return_type":"void","return_type_dimension":"","parameters":[{"name":"format","comment_text":"String.Format compatible format string","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getRecipients","comment_text":"Gets a set of recipients that this chat message will be displayed to","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerChannelEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is called after a player registers or unregisters a new plugin\n channel.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerChannelEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getChannel","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerChangedWorldEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player switches to another world.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerChangedWorldEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getFrom","comment_text":"Gets the world the player is switching from.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerChangedMainHandEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player changes their main hand in the client settings.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerChangedMainHandEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"mainHand","comment_text":"","type":"org.bukkit.inventory.MainHand","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMainHand","comment_text":"Gets the new main hand of the player. The old hand is still momentarily\n available via {@link Player#getMainHand()}.","return_type":"org.bukkit.inventory.MainHand","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerBucketFillEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerBucketEvent","comment_text":"Called when a player fills a bucket","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerBucketFillEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"blockClicked","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"bucket","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerBucketEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player interacts with a Bucket","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerBucketEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"blockClicked","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"bucket","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBucket","comment_text":"Returns the bucket used in this event","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemStack","comment_text":"Get the resulting item in hand after the bucket event","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemStack","comment_text":"Set the item in hand after the event","return_type":"void","return_type_dimension":"","parameters":[{"name":"itemStack","comment_text":"the new held itemstack after the bucket event.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getBlockClicked","comment_text":"Return the block clicked","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockFace","comment_text":"Get the face on the clicked block","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerBucketEmptyEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerBucketEvent","comment_text":"Called when a player empties a bucket","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerBucketEmptyEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"blockClicked","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"blockFace","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"bucket","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"itemInHand","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerBedLeaveEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is fired when the player is leaving a bed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerBedLeaveEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"bed","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""},{"name":"setBedSpawn","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBed","comment_text":"Returns the bed block involved in this event.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"shouldSetSpawnLocation","comment_text":"Get if this event should set the new spawn location for the\n {@link Player}.\n <br>\n This does not remove any existing spawn location, only prevent it from\n being changed (if true).\n <br>\n To change a {@link Player}'s spawn location, use\n {@link Player#setBedSpawnLocation(Location)}.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnLocation","comment_text":"Set if this event should set the new spawn location for the\n {@link Player}.\n <br>\n This will not remove any existing spawn location, only prevent it from\n being changed (if true).\n <br>\n To change a {@link Player}'s spawn location, use\n {@link Player#setBedSpawnLocation(Location)}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"setBedSpawn","comment_text":"true to change the new spawn location","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerBedEnterEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event is fired when the player is almost about to enter the bed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerBedEnterEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"bed","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getBed","comment_text":"Returns the bed block involved in this event.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerArmorStandManipulateEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerInteractEntityEvent","comment_text":"Called when a player interacts with an armor stand and will either swap, retrieve or place an item.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerArmorStandManipulateEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"clickedEntity","comment_text":"","type":"org.bukkit.entity.ArmorStand","type_dimension":""},{"name":"playerItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"armorStandItem","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"slot","comment_text":"","type":"org.bukkit.inventory.EquipmentSlot","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlayerItem","comment_text":"Returns the item held by the player. If this Item is null and the armor stand Item is also null,\n there will be no transaction between the player and the armor stand.\n If the Player's item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player's item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getArmorStandItem","comment_text":"Returns the item held by the armor stand.\n If this Item is null and the player's Item is also null, there will be no transaction between the player and the armor stand.\n If the Player's item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player's item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSlot","comment_text":"Returns the raw item slot of the armor stand in this event.","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRightClicked","comment_text":"","return_type":"org.bukkit.entity.ArmorStand","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerAnimationType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Different types of player animations","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.PlayerAnimationType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.PlayerAnimationType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ARM_SWING"]},{"name":"org.bukkit.event.player.PlayerAnimationEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Represents a player animation event","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerAnimationEvent","comment_text":"Construct a new PlayerAnimation event","parameters":[{"name":"player","comment_text":"The player instance","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAnimationType","comment_text":"Get the type of this animation event","return_type":"org.bukkit.event.player.PlayerAnimationType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerAdvancementDoneEvent","interfaces":[],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player has completed all criteria in an advancement.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerAdvancementDoneEvent","comment_text":"","parameters":[{"name":"who","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"advancement","comment_text":"","type":"org.bukkit.advancement.Advancement","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAdvancement","comment_text":"Get the advancement which has been completed.","return_type":"org.bukkit.advancement.Advancement","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.PlayerAchievementAwardedEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"Called when a player earns an achievement.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PlayerAchievementAwardedEvent","comment_text":"","parameters":[{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"achievement","comment_text":"","type":"org.bukkit.Achievement","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAchievement","comment_text":"Gets the Achievement being awarded.","return_type":"org.bukkit.Achievement","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.AsyncPlayerPreLoginEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Stores details for players attempting to log in.\n <p>\n This event is asynchronous, and not run using main thread.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"AsyncPlayerPreLoginEvent","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"ipAddress","comment_text":"","type":"java.net.InetAddress","type_dimension":""}],"throws":[]},{"name":"AsyncPlayerPreLoginEvent","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"ipAddress","comment_text":"","type":"java.net.InetAddress","type_dimension":""},{"name":"uniqueId","comment_text":"","type":"java.util.UUID","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLoginResult","comment_text":"Gets the current result of the login, as an enum","return_type":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getResult","comment_text":"Gets the current result of the login, as an enum","return_type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLoginResult","comment_text":"Sets the new result of the login, as an enum","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result to set","type":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","type_dimension":""}],"throws":[]},{"name":"setResult","comment_text":"Sets the new result of the login, as an enum","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result to set","type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","type_dimension":""}],"throws":[]},{"name":"getKickMessage","comment_text":"Gets the current kick message that will be used if getResult() !=\n Result.ALLOWED","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setKickMessage","comment_text":"Sets the kick message to display if getResult() != Result.ALLOWED","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New kick message","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"allow","comment_text":"Allows the player to log in","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"disallow","comment_text":"Disallows the player from logging in, with the given reason","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result for disallowing the player","type":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","type_dimension":""},{"name":"message","comment_text":"Kick message to display to the user","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"disallow","comment_text":"Disallows the player from logging in, with the given reason","return_type":"void","return_type_dimension":"","parameters":[{"name":"result","comment_text":"New result for disallowing the player","type":"org.bukkit.event.player.PlayerPreLoginEvent.Result","type_dimension":""},{"name":"message","comment_text":"Kick message to display to the user","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Gets the player's name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAddress","comment_text":"Gets the player IP address.","return_type":"java.net.InetAddress","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUniqueId","comment_text":"Gets the player's unique ID.","return_type":"java.util.UUID","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Basic kick reasons for communicating to plugins","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ALLOWED","KICK_FULL","KICK_BANNED","KICK_WHITELIST","KICK_OTHER"]},{"name":"org.bukkit.event.player.AsyncPlayerChatEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.player.PlayerEvent","comment_text":"This event will sometimes fire synchronously, depending on how it was\n triggered.\n <p>\n The constructor provides a boolean to indicate if the event was fired\n synchronously or asynchronously. When asynchronous, this event can be\n called from any thread, sans the main thread, and has limited access to the\n API.\n <p>\n If a player is the direct cause of this event by an incoming packet, this\n event will be asynchronous. If a plugin triggers this event by compelling a\n player to chat, this event will be synchronous.\n <p>\n Care should be taken to check {@link #isAsynchronous()} and treat the event\n appropriately.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"AsyncPlayerChatEvent","comment_text":"","parameters":[{"name":"async","comment_text":"This changes the event to a synchronous state.","type":"boolean","type_dimension":""},{"name":"who","comment_text":"the chat sender","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"the message sent","type":"java.lang.String","type_dimension":""},{"name":"players","comment_text":"the players to receive the message. This may be a lazy\n     or unmodifiable collection.","type":"java.util.Set","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMessage","comment_text":"Gets the message that the player is attempting to send. This message\n will be used with {@link #getFormat()}.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMessage","comment_text":"Sets the message that the player will send. This message will be used\n with {@link #getFormat()}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New message that the player will send","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFormat","comment_text":"Gets the format to use to display this chat message.\n <p>\n When this event finishes execution, the first format parameter is the\n {@link Player#getDisplayName()} and the second parameter is {@link\n #getMessage()}","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFormat","comment_text":"Sets the format to use to display this chat message.\n <p>\n When this event finishes execution, the first format parameter is the\n {@link Player#getDisplayName()} and the second parameter is {@link\n #getMessage()}","return_type":"void","return_type_dimension":"","parameters":[{"name":"format","comment_text":"{@link String#format(String, Object...)} compatible\n     format string","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.util.IllegalFormatException","comment_text":"if the underlying API throws the\n     exception"},{"name":"java.lang.NullPointerException","comment_text":"if format is null"}]},{"name":"getRecipients","comment_text":"Gets a set of recipients that this chat message will be displayed to.\n <p>\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n <p>\n Listeners should be aware that modifying the list may throw {@link\n UnsupportedOperationException} if the event caller provides an\n unmodifiable set.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.TabCompleteEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.Event","comment_text":"Called when a {@link CommandSender} of any description (ie: player or\n console) attempts to tab complete.\n <br>\n Note that due to client changes, if the sender is a Player, this event will\n only begin to fire once command arguments are specified, not commands\n themselves. Plugins wishing to remove commands from tab completion are\n advised to ensure the client does not have permission for the relevant\n commands, or use {@link PlayerCommandSendEvent}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TabCompleteEvent","comment_text":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"buffer","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"completions","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSender","comment_text":"Get the sender completing this command.","return_type":"org.bukkit.command.CommandSender","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBuffer","comment_text":"Return the entire buffer which formed the basis of this completion.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCompletions","comment_text":"The list of completions which will be offered to the sender, in order.\n This list is mutable and reflects what will be offered.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCompletions","comment_text":"Set the completions offered, overriding any already set.","return_type":"void","return_type_dimension":"","parameters":[{"name":"completions","comment_text":"the new completions","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServiceUnregisterEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServiceEvent","comment_text":"This event is called when a service is unregistered.\n <p>\n Warning: The order in which register and unregister events are called\n should not be relied upon.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServiceUnregisterEvent","comment_text":"","parameters":[{"name":"serviceProvider","comment_text":"","type":"org.bukkit.plugin.RegisteredServiceProvider","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServiceRegisterEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServiceEvent","comment_text":"This event is called when a service is registered.\n <p>\n Warning: The order in which register and unregister events are called\n should not be relied upon.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServiceRegisterEvent","comment_text":"","parameters":[{"name":"registeredProvider","comment_text":"","type":"org.bukkit.plugin.RegisteredServiceProvider","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServiceEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"An event relating to a registered service. This is called in a {@link\n org.bukkit.plugin.ServicesManager}","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServiceEvent","comment_text":"","parameters":[{"name":"provider","comment_text":"","type":"org.bukkit.plugin.RegisteredServiceProvider","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getProvider","comment_text":"","return_type":"org.bukkit.plugin.RegisteredServiceProvider","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServerLoadEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"This event is called when either the server startup or reload has completed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServerLoadEvent","comment_text":"Creates a {@code ServerLoadEvent} with a given loading type.","parameters":[{"name":"type","comment_text":"the context in which the server was loaded","type":"org.bukkit.event.server.ServerLoadEvent.LoadType","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the context in which the server was loaded.","return_type":"org.bukkit.event.server.ServerLoadEvent.LoadType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServerLoadEvent.LoadType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the context in which the enclosing event has been completed.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.server.ServerLoadEvent.LoadType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.server.ServerLoadEvent.LoadType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["STARTUP","RELOAD"]},{"name":"org.bukkit.event.server.ServerListPingEvent","interfaces":["java.lang.Iterable"],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"Called when a server list ping is coming in. Displayed players can be\n checked and removed by {@link #iterator() iterating} over this event.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServerListPingEvent","comment_text":"","parameters":[{"name":"address","comment_text":"","type":"java.net.InetAddress","type_dimension":""},{"name":"motd","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"numPlayers","comment_text":"","type":"int","type_dimension":""},{"name":"maxPlayers","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"ServerListPingEvent","comment_text":"This constructor is intended for implementations that provide the\n {@link #iterator()} method, thus provided the {@link #getNumPlayers()}\n count.","parameters":[{"name":"address","comment_text":"the address of the pinger","type":"java.net.InetAddress","type_dimension":""},{"name":"motd","comment_text":"the message of the day","type":"java.lang.String","type_dimension":""},{"name":"maxPlayers","comment_text":"the max number of players","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAddress","comment_text":"Get the address the ping is coming from.","return_type":"java.net.InetAddress","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMotd","comment_text":"Get the message of the day message.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMotd","comment_text":"Change the message of the day message.","return_type":"void","return_type_dimension":"","parameters":[{"name":"motd","comment_text":"the message of the day","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getNumPlayers","comment_text":"Get the number of players sent.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxPlayers","comment_text":"Get the maximum number of players sent.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxPlayers","comment_text":"Set the maximum number of players sent.","return_type":"void","return_type_dimension":"","parameters":[{"name":"maxPlayers","comment_text":"the maximum number of player","type":"int","type_dimension":""}],"throws":[]},{"name":"setServerIcon","comment_text":"Sets the server-icon sent to the client.","return_type":"void","return_type_dimension":"","parameters":[{"name":"icon","comment_text":"the icon to send to the client","type":"org.bukkit.util.CachedServerIcon","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the {@link CachedServerIcon} is not\n     created by the caller of this event; null may be accepted for some\n     implementations"},{"name":"java.lang.UnsupportedOperationException","comment_text":"if the caller of this event does\n     not support setting the server icon"}]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"iterator","comment_text":"{@inheritDoc}\n <p>\n Calling the {@link Iterator#remove()} method will force that particular\n player to not be displayed on the player list, decrease the size\n returned by {@link #getNumPlayers()}, and will not be returned again by\n any new iterator.","return_type":"java.util.Iterator","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.UnsupportedOperationException","comment_text":"if the caller of this event does\n     not support removing players"}]}],"enumConstants":[]},{"name":"org.bukkit.event.server.ServerEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Miscellaneous server events","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServerEvent","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.server.ServerCommandEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"This event is called when a command is run by a non-player. It is\n called early in the command handling process, and modifications in this\n event (via {@link #setCommand(String)}) will be shown in the behavior.\n <p>\n Many plugins will have <b>no use for this event</b>, and you should\n attempt to avoid using it if it is not necessary.\n <p>\n Some examples of valid uses for this event are:\n <ul>\n <li>Logging executed commands to a separate file\n <li>Variable substitution. For example, replacing <code>${ip:Steve}</code>\n     with the connection IP of the player named Steve, or simulating the\n     <code>@a</code> and <code>@p</code> decorators used by Command Blocks\n     for plugins that do not handle it.\n <li>Conditionally blocking commands belonging to other plugins.\n <li>Per-sender command aliases. For example, after the console runs the\n     command <code>/calias cr gamemode creative</code>, the next time they\n     run <code>/cr</code>, it gets replaced into\n     <code>/gamemode creative</code>. (Global command aliases should be\n     done by registering the alias.)\n </ul>\n <p>\n Examples of incorrect uses are:\n <ul>\n <li>Using this event to run command logic\n </ul>\n <p>\n If the event is cancelled, processing of the command will halt.\n <p>\n The state of whether or not there is a slash (<code>/</code>) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ServerCommandEvent","comment_text":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getCommand","comment_text":"Gets the command that the user is attempting to execute from the\n console","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCommand","comment_text":"Sets the command that the server will execute","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New message that the server will execute","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getSender","comment_text":"Get the command sender.","return_type":"org.bukkit.command.CommandSender","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.RemoteServerCommandEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServerCommandEvent","comment_text":"This event is called when a command is received over RCON. See the javadocs\n of {@link ServerCommandEvent} for more information.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RemoteServerCommandEvent","comment_text":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.PluginEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"Used for plugin enable and disable events","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginEvent","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlugin","comment_text":"Gets the plugin involved in this event","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.PluginEnableEvent","interfaces":[],"superclass":"org.bukkit.event.server.PluginEvent","comment_text":"Called when a plugin is enabled.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginEnableEvent","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.PluginDisableEvent","interfaces":[],"superclass":"org.bukkit.event.server.PluginEvent","comment_text":"Called when a plugin is disabled.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginDisableEvent","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.MapInitializeEvent","interfaces":[],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"Called when a map is initialized.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MapInitializeEvent","comment_text":"","parameters":[{"name":"mapView","comment_text":"","type":"org.bukkit.map.MapView","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMap","comment_text":"Gets the map initialized in this event.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.server.BroadcastMessageEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.server.ServerEvent","comment_text":"Event triggered for server broadcast messages such as from\n {@link org.bukkit.Server#broadcast(String, String)}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BroadcastMessageEvent","comment_text":"","parameters":[{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"recipients","comment_text":"","type":"java.util.Set","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMessage","comment_text":"Get the message to broadcast.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMessage","comment_text":"Set the message to broadcast.","return_type":"void","return_type_dimension":"","parameters":[{"name":"message","comment_text":"New message to broadcast","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getRecipients","comment_text":"Gets a set of recipients that this chat message will be displayed to.\n <p>\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n <p>\n Listeners should be aware that modifying the list may throw {@link\n UnsupportedOperationException} if the event caller provides an\n unmodifiable set.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleUpdateEvent","interfaces":[],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Called when a vehicle updates","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleUpdateEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleMoveEvent","interfaces":[],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a vehicle moves.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleMoveEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"from","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"to","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getFrom","comment_text":"Get the previous position.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTo","comment_text":"Get the next position.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleExitEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a living entity exits a vehicle.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleExitEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"exited","comment_text":"","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getExited","comment_text":"Get the living entity that exited the vehicle.","return_type":"org.bukkit.entity.LivingEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a vehicle-related event.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""}],"throws":[]}],"fields":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""}],"methods":[{"name":"getVehicle","comment_text":"Get the vehicle.","return_type":"org.bukkit.entity.Vehicle","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleEntityCollisionEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleCollisionEvent","comment_text":"Raised when a vehicle collides with an entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleEntityCollisionEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"entity","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntity","comment_text":"","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isPickupCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPickupCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCollisionCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCollisionCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleEnterEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when an entity enters a vehicle.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleEnterEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"entered","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getEntered","comment_text":"Gets the Entity that entered the vehicle.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleDestroyEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a vehicle is destroyed, which could be caused by either a\n player or the environment. This is not raised if the boat is simply\n 'removed' due to other means.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleDestroyEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"attacker","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAttacker","comment_text":"Gets the Entity that has destroyed the vehicle, potentially null","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleDamageEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a vehicle receives damage.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleDamageEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"attacker","comment_text":"","type":"org.bukkit.entity.Entity","type_dimension":""},{"name":"damage","comment_text":"","type":"double","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAttacker","comment_text":"Gets the Entity that is attacking the vehicle","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDamage","comment_text":"Gets the damage done to the vehicle","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDamage","comment_text":"Sets the damage done to the vehicle","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"The damage","type":"double","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleCreateEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a vehicle is created.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleCreateEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleCollisionEvent","interfaces":[],"superclass":"org.bukkit.event.vehicle.VehicleEvent","comment_text":"Raised when a vehicle collides.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleCollisionEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.event.vehicle.VehicleBlockCollisionEvent","interfaces":[],"superclass":"org.bukkit.event.vehicle.VehicleCollisionEvent","comment_text":"Raised when a vehicle collides with a block.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"VehicleBlockCollisionEvent","comment_text":"","parameters":[{"name":"vehicle","comment_text":"","type":"org.bukkit.entity.Vehicle","type_dimension":""},{"name":"block","comment_text":"","type":"org.bukkit.block.Block","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBlock","comment_text":"Gets the block the vehicle collided with","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.weather.WeatherEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents a Weather-related event","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WeatherEvent","comment_text":"","parameters":[{"name":"where","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"methods":[{"name":"getWorld","comment_text":"Returns the World where this event is occurring","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.weather.WeatherChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.weather.WeatherEvent","comment_text":"Stores data for weather changing in a world","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WeatherChangeEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""},{"name":"to","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toWeatherState","comment_text":"Gets the state of weather that the world is being set to","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.weather.ThunderChangeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.weather.WeatherEvent","comment_text":"Stores data for thunder state changing in a world","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ThunderChangeEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""},{"name":"to","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toThunderState","comment_text":"Gets the state of thunder that the world is being set to","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.weather.LightningStrikeEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.weather.WeatherEvent","comment_text":"Stores data for lightning striking","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"LightningStrikeEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""},{"name":"bolt","comment_text":"","type":"org.bukkit.entity.LightningStrike","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getLightning","comment_text":"Gets the bolt which is striking the earth.","return_type":"org.bukkit.entity.LightningStrike","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.WorldUnloadEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Called when a World is unloaded","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldUnloadEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.WorldSaveEvent","interfaces":[],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Called when a World is saved.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldSaveEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.WorldLoadEvent","interfaces":[],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Called when a World is loaded","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldLoadEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.WorldInitEvent","interfaces":[],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Called when a World is initializing","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldInitEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.WorldEvent","interfaces":[],"superclass":"org.bukkit.event.Event","comment_text":"Represents events within a world","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"WorldEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getWorld","comment_text":"Gets the world primarily involved with this event","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.StructureGrowEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Event that is called when an organic structure attempts to grow (Sapling {@literal ->}\n Tree), (Mushroom {@literal ->} Huge Mushroom), naturally or using bonemeal.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"StructureGrowEvent","comment_text":"","parameters":[{"name":"location","comment_text":"","type":"org.bukkit.Location","type_dimension":""},{"name":"species","comment_text":"","type":"org.bukkit.TreeType","type_dimension":""},{"name":"bonemeal","comment_text":"","type":"boolean","type_dimension":""},{"name":"player","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"blocks","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getLocation","comment_text":"Gets the location of the structure.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSpecies","comment_text":"Gets the species type (birch, normal, pine, red mushroom, brown\n mushroom)","return_type":"org.bukkit.TreeType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isFromBonemeal","comment_text":"Checks if structure was grown using bonemeal.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Gets the player that created the structure.","return_type":"org.bukkit.entity.Player","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlocks","comment_text":"Gets a list of all blocks associated with the structure.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.SpawnChangeEvent","interfaces":[],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"An event that is called when a world's spawn changes. The world's previous\n spawn location is included.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SpawnChangeEvent","comment_text":"","parameters":[{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""},{"name":"previousLocation","comment_text":"","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPreviousLocation","comment_text":"Gets the previous spawn location","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.PortalCreateEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Called when a portal is created","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PortalCreateEvent","comment_text":"","parameters":[{"name":"blocks","comment_text":"","type":"java.util.Collection","type_dimension":""},{"name":"world","comment_text":"","type":"org.bukkit.World","type_dimension":""},{"name":"reason","comment_text":"","type":"org.bukkit.event.world.PortalCreateEvent.CreateReason","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getBlocks","comment_text":"Gets an array list of all the blocks associated with the created portal","return_type":"java.util.ArrayList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getReason","comment_text":"Gets the reason for the portal's creation","return_type":"org.bukkit.event.world.PortalCreateEvent.CreateReason","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.PortalCreateEvent.CreateReason","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum to specify the various reasons for a portal's creation","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.event.world.PortalCreateEvent.CreateReason","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.event.world.PortalCreateEvent.CreateReason","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["FIRE","OBC_DESTINATION"]},{"name":"org.bukkit.event.world.ChunkUnloadEvent","interfaces":["org.bukkit.event.Cancellable"],"superclass":"org.bukkit.event.world.ChunkEvent","comment_text":"Called when a chunk is unloaded","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChunkUnloadEvent","comment_text":"","parameters":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]},{"name":"ChunkUnloadEvent","comment_text":"","parameters":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""},{"name":"save","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isSaveChunk","comment_text":"Return whether this chunk will be saved to disk.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSaveChunk","comment_text":"Set whether this chunk will be saved to disk.","return_type":"void","return_type_dimension":"","parameters":[{"name":"saveChunk","comment_text":"chunk save status","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isCancelled","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCancelled","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"cancel","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.ChunkPopulateEvent","interfaces":[],"superclass":"org.bukkit.event.world.ChunkEvent","comment_text":"Thrown when a new chunk has finished being populated.\n <p>\n If your intent is to populate the chunk using this event, please see {@link\n BlockPopulator}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChunkPopulateEvent","comment_text":"","parameters":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.ChunkLoadEvent","interfaces":[],"superclass":"org.bukkit.event.world.ChunkEvent","comment_text":"Called when a chunk is loaded","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChunkLoadEvent","comment_text":"","parameters":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""},{"name":"newChunk","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isNewChunk","comment_text":"Gets if this chunk was newly created or not.\n <p>\n Note that if this chunk is new, it will not be populated at this time.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlers","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHandlerList","comment_text":"","return_type":"org.bukkit.event.HandlerList","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.event.world.ChunkEvent","interfaces":[],"superclass":"org.bukkit.event.world.WorldEvent","comment_text":"Represents a Chunk related event","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChunkEvent","comment_text":"","parameters":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]}],"fields":[{"name":"chunk","comment_text":"","type":"org.bukkit.Chunk","type_dimension":""}],"methods":[{"name":"getChunk","comment_text":"Gets the chunk being loaded/unloaded","return_type":"org.bukkit.Chunk","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.generator.ChunkGenerator","interfaces":[],"superclass":"java.lang.Object","comment_text":"A chunk generator is responsible for the initial shaping of an entire\n chunk. For example, the nether chunk generator should shape netherrack and\n soulsand","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChunkGenerator","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"generateChunkData","comment_text":"Shapes the chunk for the given coordinates.\n \n This method must return a ChunkData.\n <p>\n Notes:\n <p>\n This method should <b>never</b> attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n <p>\n This method should <b>never</b> modify a ChunkData after it has\n been returned.\n <p>\n This method <b>must</b> return a ChunkData returned by {@link ChunkGenerator#createChunkData(org.bukkit.World)}","return_type":"org.bukkit.generator.ChunkGenerator.ChunkData","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world this chunk will be used for","type":"org.bukkit.World","type_dimension":""},{"name":"random","comment_text":"The random generator to use","type":"java.util.Random","type_dimension":""},{"name":"x","comment_text":"The X-coordinate of the chunk","type":"int","type_dimension":""},{"name":"z","comment_text":"The Z-coordinate of the chunk","type":"int","type_dimension":""},{"name":"biome","comment_text":"Proposed biome values for chunk - can be updated by\n     generator","type":"org.bukkit.generator.ChunkGenerator.BiomeGrid","type_dimension":""}],"throws":[]},{"name":"createChunkData","comment_text":"Create a ChunkData for a world.","return_type":"org.bukkit.generator.ChunkGenerator.ChunkData","return_type_dimension":"","parameters":[{"name":"world","comment_text":"the world the ChunkData is for","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"canSpawn","comment_text":"Tests if the specified location is valid for a natural spawn position","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world we're testing on","type":"org.bukkit.World","type_dimension":""},{"name":"x","comment_text":"X-coordinate of the block to test","type":"int","type_dimension":""},{"name":"z","comment_text":"Z-coordinate of the block to test","type":"int","type_dimension":""}],"throws":[]},{"name":"getDefaultPopulators","comment_text":"Gets a list of default {@link BlockPopulator}s to apply to a given\n world","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"world","comment_text":"World to apply to","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"getFixedSpawnLocation","comment_text":"Gets a fixed spawn location to use for a given world.\n <p>\n A null value is returned if a world should not use a fixed spawn point,\n and will instead attempt to find one randomly.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world to locate a spawn point for","type":"org.bukkit.World","type_dimension":""},{"name":"random","comment_text":"Random generator to use in the calculation","type":"java.util.Random","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.generator.ChunkGenerator.BiomeGrid","interfaces":[],"superclass":"","comment_text":"Interface to biome section for chunk to be generated: initialized with\n default values for world type and seed.\n <p>\n Custom generator is free to access and tailor values during\n generateBlockSections() or generateExtBlockSections().","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBiome","comment_text":"Get biome at x, z within chunk being generated","return_type":"org.bukkit.block.Biome","return_type_dimension":"","parameters":[{"name":"x","comment_text":"- 0-15","type":"int","type_dimension":""},{"name":"z","comment_text":"- 0-15","type":"int","type_dimension":""}],"throws":[]},{"name":"setBiome","comment_text":"Set biome at x, z within chunk being generated","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"- 0-15","type":"int","type_dimension":""},{"name":"z","comment_text":"- 0-15","type":"int","type_dimension":""},{"name":"bio","comment_text":"- Biome value","type":"org.bukkit.block.Biome","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.generator.ChunkGenerator.ChunkData","interfaces":[],"superclass":"","comment_text":"Data for a Chunk.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMaxHeight","comment_text":"Get the maximum height for the chunk.\n \n Setting blocks at or above this height will do nothing.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBlock","comment_text":"Set the block at x,y,z in the chunk data to material.\n\n Note: setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"material","comment_text":"the type to set the block to","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setBlock","comment_text":"Set the block at x,y,z in the chunk data to material.\n\n Setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"material","comment_text":"the type to set the block to","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setBlock","comment_text":"Set the block at x,y,z in the chunk data to material.\n\n Setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"blockData","comment_text":"the type to set the block to","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"setRegion","comment_text":"Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"xMin","comment_text":"minimum x location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMin","comment_text":"minimum y location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMin","comment_text":"minimum z location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"xMax","comment_text":"maximum x location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMax","comment_text":"maximum y location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMax","comment_text":"maximum z location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"material","comment_text":"the type to set the blocks to","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setRegion","comment_text":"Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"xMin","comment_text":"minimum x location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMin","comment_text":"minimum y location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMin","comment_text":"minimum z location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"xMax","comment_text":"maximum x location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMax","comment_text":"maximum y location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMax","comment_text":"maximum z location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"material","comment_text":"the type to set the blocks to","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setRegion","comment_text":"Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax,\n yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk's bounds does nothing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"xMin","comment_text":"minimum x location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMin","comment_text":"minimum y location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMin","comment_text":"minimum z location (inclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"xMax","comment_text":"maximum x location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"yMax","comment_text":"maximum y location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"zMax","comment_text":"maximum z location (exclusive) in the chunk to set","type":"int","type_dimension":""},{"name":"blockData","comment_text":"the type to set the blocks to","type":"org.bukkit.block.data.BlockData","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"Get the type of the block at x, y, z.\n\n Getting blocks outside the chunk's bounds returns air.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""}],"throws":[]},{"name":"getTypeAndData","comment_text":"Get the type and data of the block at x, y ,z.\n\n Getting blocks outside the chunk's bounds returns air.","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""}],"throws":[]},{"name":"getBlockData","comment_text":"Get the type and data of the block at x, y ,z.\n\n Getting blocks outside the chunk's bounds returns air.","return_type":"org.bukkit.block.data.BlockData","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Get the block data at x,y,z in the chunk data.\n\n Getting blocks outside the chunk's bounds returns 0.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the x location in the chunk from 0-15 inclusive","type":"int","type_dimension":""},{"name":"y","comment_text":"the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)","type":"int","type_dimension":""},{"name":"z","comment_text":"the z location in the chunk from 0-15 inclusive","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.generator.BlockPopulator","interfaces":[],"superclass":"java.lang.Object","comment_text":"A block populator is responsible for generating a small area of blocks.\n <p>\n For example, generating glowstone inside the nether or generating dungeons\n full of treasure","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockPopulator","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"populate","comment_text":"Populates an area of blocks at or around the given chunk.\n <p>\n The chunks on each side of the specified chunk must already exist; that\n is, there must be one north, east, south and west of the specified\n chunk. The \"corner\" chunks may not exist, in which scenario the\n populator should record any changes required for those chunks and\n perform the changes when they are ready.","return_type":"void","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world to generate in","type":"org.bukkit.World","type_dimension":""},{"name":"random","comment_text":"The random generator to use","type":"java.util.Random","type_dimension":""},{"name":"source","comment_text":"The chunk to generate for","type":"org.bukkit.Chunk","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.IndexHelpTopic","interfaces":[],"superclass":"org.bukkit.help.HelpTopic","comment_text":"This help topic generates a list of other help topics. This class is useful\n for adding your own index help topics. To enforce a particular order, use a\n sorted collection.\n <p>\n If a preamble is provided to the constructor, that text will be displayed\n before the first item in the index.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"IndexHelpTopic","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"shortText","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"topics","comment_text":"","type":"java.util.Collection","type_dimension":""}],"throws":[]},{"name":"IndexHelpTopic","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"shortText","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"topics","comment_text":"","type":"java.util.Collection","type_dimension":""},{"name":"preamble","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"preamble","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"allTopics","comment_text":"","type":"java.util.Collection","type_dimension":""}],"methods":[{"name":"setTopicsCollection","comment_text":"Sets the contents of the internal allTopics collection.","return_type":"void","return_type_dimension":"","parameters":[{"name":"topics","comment_text":"The topics to set.","type":"java.util.Collection","type_dimension":""}],"throws":[]},{"name":"canSee","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"amendCanSee","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"amendedPermission","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getFullText","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"buildPreamble","comment_text":"Builds the topic preamble. Override this method to change how the index\n preamble looks.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"The command sender requesting the preamble.","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"buildIndexLine","comment_text":"Builds individual lines in the index topic. Override this method to\n change how index lines are rendered.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"The command sender requesting the index line.","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"topic","comment_text":"The topic to render into an index line.","type":"org.bukkit.help.HelpTopic","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.HelpTopicFactory","interfaces":[],"superclass":"","comment_text":"A HelpTopicFactory is used to create custom {@link HelpTopic} objects from\n commands that inherit from a common base class or have executors that\n inherit from a common base class. You can use a custom HelpTopic to change\n the way all the commands in your plugin display in the help. If your plugin\n implements a complex permissions system, a custom help topic may also be\n appropriate.\n <p>\n To automatically bind your plugin's commands to your custom HelpTopic\n implementation, first make sure all your commands or executors derive from\n a custom base class (it doesn't have to do anything). Next implement a\n custom HelpTopicFactory that accepts your custom command base class and\n instantiates an instance of your custom HelpTopic from it. Finally,\n register your HelpTopicFactory against your command base class using the\n {@link HelpMap#registerHelpTopicFactory(Class, HelpTopicFactory)} method.\n <p>\n As the help system iterates over all registered commands to make help\n topics, it first checks to see if there is a HelpTopicFactory registered\n for the command's base class. If so, the factory is used to make a help\n topic rather than a generic help topic. If no factory is found for the\n command's base class and the command derives from {@link\n org.bukkit.command.PluginCommand}, then the type of the command's executor\n is inspected looking for a registered HelpTopicFactory. Finally, if no\n factory is found, a generic help topic is created for the command.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"createTopic","comment_text":"This method accepts a command deriving from a custom command base class\n and constructs a custom HelpTopic for it.","return_type":"org.bukkit.help.HelpTopic","return_type_dimension":"","parameters":[{"name":"command","comment_text":"The custom command to build a help topic for.","type":"TCommand","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.HelpTopicComparator","interfaces":["java.util.Comparator"],"superclass":"java.lang.Object","comment_text":"Used to impose a custom total ordering on help topics.\n <p>\n All topics are listed in alphabetic order, but topics that start with a\n slash come after topics that don't.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"topicNameComparatorInstance","comment_text":"","return_type":"org.bukkit.help.HelpTopicComparator.TopicNameComparator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"helpTopicComparatorInstance","comment_text":"","return_type":"org.bukkit.help.HelpTopicComparator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"compare","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"lhs","comment_text":"","type":"org.bukkit.help.HelpTopic","type_dimension":""},{"name":"rhs","comment_text":"","type":"org.bukkit.help.HelpTopic","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.HelpTopicComparator.TopicNameComparator","interfaces":["java.util.Comparator"],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"compare","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"lhs","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"rhs","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.HelpTopic","interfaces":[],"superclass":"java.lang.Object","comment_text":"HelpTopic implementations are displayed to the user when the user uses the\n /help command.\n <p>\n Custom implementations of this class can work at two levels. A simple\n implementation only needs to set the value of {@code name}, {@code\n shortText}, and {@code fullText} in the constructor. This base class will\n take care of the rest.\n <p>\n Complex implementations can be created by overriding the behavior of all\n the methods in this class.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"HelpTopic","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"shortText","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"fullText","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"amendedPermission","comment_text":"","type":"java.lang.String","type_dimension":""}],"methods":[{"name":"canSee","comment_text":"Determines if a {@link Player} is allowed to see this help topic.\n <p>\n HelpTopic implementations should take server administrator wishes into\n account as set by the {@link HelpTopic#amendCanSee(String)} function.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"player","comment_text":"The Player in question.","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"amendCanSee","comment_text":"Allows the server administrator to override the permission required to\n see a help topic.\n <p>\n HelpTopic implementations should take this into account when\n determining topic visibility on the {@link\n HelpTopic#canSee(org.bukkit.command.CommandSender)} function.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amendedPermission","comment_text":"The permission node the server administrator\n     wishes to apply to this topic.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Returns the name of this help topic.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShortText","comment_text":"Returns a brief description that will be displayed in the topic index.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFullText","comment_text":"Returns the full description of this help topic that is displayed when\n the user requests this topic's details.\n <p>\n The result will be paginated to properly fit the user's client.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"forWho","comment_text":"The player or console requesting the full text. Useful\n     for further security trimming the command's full text based on\n     sub-permissions in custom implementations.","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]},{"name":"amendTopic","comment_text":"Allows the server admin (or another plugin) to add or replace the\n contents of a help topic.\n <p>\n A null in either parameter will leave that part of the topic unchanged.\n In either amending parameter, the string {@literal <text>} is replaced\n with the existing contents in the help topic. Use this to append or\n prepend additional content into an automatically generated help topic.","return_type":"void","return_type_dimension":"","parameters":[{"name":"amendedShortText","comment_text":"The new topic short text to use, or null to\n     leave alone.","type":"java.lang.String","type_dimension":""},{"name":"amendedFullText","comment_text":"The new topic full text to use, or null to leave\n     alone.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"applyAmendment","comment_text":"Developers implementing their own custom HelpTopic implementations can\n use this utility method to ensure their implementations comply with the\n expected behavior of the {@link HelpTopic#amendTopic(String, String)}\n method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"baseText","comment_text":"The existing text of the help topic.","type":"java.lang.String","type_dimension":""},{"name":"amendment","comment_text":"The amending text from the amendTopic() method.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.HelpMap","interfaces":[],"superclass":"","comment_text":"The HelpMap tracks all help topics registered in a Bukkit server. When the\n server starts up or is reloaded, help is processed and topics are added in\n the following order:\n \n <ol>\n <li>General topics are loaded from the help.yml\n <li>Plugins load and optionally call {@code addTopic()}\n <li>Registered plugin commands are processed by {@link HelpTopicFactory}\n     objects to create topics\n <li>Topic contents are amended as directed in help.yml\n </ol>","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getHelpTopic","comment_text":"Returns a help topic for a given topic name.","return_type":"org.bukkit.help.HelpTopic","return_type_dimension":"","parameters":[{"name":"topicName","comment_text":"The help topic name to look up.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHelpTopics","comment_text":"Returns a collection of all the registered help topics.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addTopic","comment_text":"Adds a topic to the server's help index.","return_type":"void","return_type_dimension":"","parameters":[{"name":"topic","comment_text":"The new help topic to add.","type":"org.bukkit.help.HelpTopic","type_dimension":""}],"throws":[]},{"name":"clear","comment_text":"Clears out the contents of the help index. Normally called during\n server reload.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"registerHelpTopicFactory","comment_text":"Associates a {@link HelpTopicFactory} object with given command base\n class. Plugins typically call this method during {@code onLoad()}. Once\n registered, the custom HelpTopicFactory will be used to create a custom\n {@link HelpTopic} for all commands deriving from the {@code\n commandClass} base class, or all commands deriving from {@link\n org.bukkit.command.PluginCommand} who's executor derives from {@code\n commandClass} base class.","return_type":"void","return_type_dimension":"","parameters":[{"name":"commandClass","comment_text":"The class for which the custom HelpTopicFactory\n     applies. Must derive from either {@link org.bukkit.command.Command}\n     or {@link org.bukkit.command.CommandExecutor}.","type":"java.lang.Class","type_dimension":""},{"name":"factory","comment_text":"The {@link HelpTopicFactory} implementation to associate\n     with the {@code commandClass}.","type":"org.bukkit.help.HelpTopicFactory","type_dimension":""}],"throws":[]},{"name":"getIgnoredPlugins","comment_text":"Gets the list of plugins the server administrator has chosen to exclude\n from the help index. Plugin authors who choose to directly extend\n {@link org.bukkit.command.Command} instead of {@link\n org.bukkit.command.PluginCommand} will need to check this collection in\n their {@link HelpTopicFactory} implementations to ensure they meet the\n server administrator's expectations.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.help.GenericCommandHelpTopic","interfaces":[],"superclass":"org.bukkit.help.HelpTopic","comment_text":"Lacking an alternative, the help system will create instances of\n GenericCommandHelpTopic for each command in the server's CommandMap. You\n can use this class as a base class for custom help topics, or as an example\n for how to write your own.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"GenericCommandHelpTopic","comment_text":"","parameters":[{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""}],"throws":[]}],"fields":[{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""}],"methods":[{"name":"canSee","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.ShapelessRecipe","interfaces":["org.bukkit.inventory.Recipe","org.bukkit.Keyed"],"superclass":"java.lang.Object","comment_text":"Represents a shapeless recipe, where the arrangement of the ingredients on\n the crafting grid does not matter.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ShapelessRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"ShapelessRecipe","comment_text":"Create a shapeless recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you'll need to call the appropriate methods.","parameters":[{"name":"key","comment_text":"the unique recipe key","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"result","comment_text":"The item you want the recipe to create.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"addIngredient","comment_text":"Adds the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"Adds the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"Adds the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.Material","type_dimension":""},{"name":"rawdata","comment_text":"The data value, or -1 to allow any data value.","type":"int","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"Adds multiples of the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"How many to add (can't be more than 9!)","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"Adds multiples of the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"How many to add (can't be more than 9!)","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"Adds multiples of the specified ingredient.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"How many to add (can't be more than 9!)","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to add.","type":"org.bukkit.Material","type_dimension":""},{"name":"rawdata","comment_text":"The data value, or -1 to allow any data value.","type":"int","type_dimension":""}],"throws":[]},{"name":"addIngredient","comment_text":"","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"","type":"org.bukkit.inventory.RecipeChoice","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes an ingredient from the list.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to remove","type":"org.bukkit.inventory.RecipeChoice","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. Only removes exact matches,\n with a data value of 0.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to remove","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to remove","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. Only removes exact\n matches, with a data value of 0.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"The number of copies to remove.","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to remove","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"The number of copies to remove.","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to remove.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient to remove","type":"org.bukkit.Material","type_dimension":""},{"name":"rawdata","comment_text":"The data value;","type":"int","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.","return_type":"org.bukkit.inventory.ShapelessRecipe","return_type_dimension":"","parameters":[{"name":"count","comment_text":"The number of copies to remove.","type":"int","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient to remove.","type":"org.bukkit.Material","type_dimension":""},{"name":"rawdata","comment_text":"The data value.","type":"int","type_dimension":""}],"throws":[]},{"name":"getResult","comment_text":"Get the result of this recipe.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIngredientList","comment_text":"Get the list of ingredients used for this recipe.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChoiceList","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGroup","comment_text":"Get the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGroup","comment_text":"Set the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"void","return_type_dimension":"","parameters":[{"name":"group","comment_text":"recipe group. An empty string denotes no group. May not be\n null.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.ShapedRecipe","interfaces":["org.bukkit.inventory.Recipe","org.bukkit.Keyed"],"superclass":"java.lang.Object","comment_text":"Represents a shaped (ie normal) crafting recipe.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ShapedRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"ShapedRecipe","comment_text":"Create a shaped recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you'll need to call the appropriate methods.","parameters":[{"name":"key","comment_text":"the unique recipe key","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"result","comment_text":"The item you want the recipe to create.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"shape","comment_text":"Set the shape of this recipe to the specified rows. Each character\n represents a different ingredient; exactly what each character\n represents is set separately. The first row supplied corresponds with\n the upper most part of the recipe on the workbench e.g. if all three\n rows are supplies the first string represents the top row on the\n workbench.","return_type":"org.bukkit.inventory.ShapedRecipe","return_type_dimension":"","parameters":[{"name":"shape","comment_text":"The rows of the recipe (up to 3 rows).","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"setIngredient","comment_text":"Sets the material that a character in the recipe shape refers to.","return_type":"org.bukkit.inventory.ShapedRecipe","return_type_dimension":"","parameters":[{"name":"key","comment_text":"The character that represents the ingredient in the shape.","type":"char","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setIngredient","comment_text":"Sets the material that a character in the recipe shape refers to.","return_type":"org.bukkit.inventory.ShapedRecipe","return_type_dimension":"","parameters":[{"name":"key","comment_text":"The character that represents the ingredient in the shape.","type":"char","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient.","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setIngredient","comment_text":"Sets the material that a character in the recipe shape refers to.","return_type":"org.bukkit.inventory.ShapedRecipe","return_type_dimension":"","parameters":[{"name":"key","comment_text":"The character that represents the ingredient in the shape.","type":"char","type_dimension":""},{"name":"ingredient","comment_text":"The ingredient.","type":"org.bukkit.Material","type_dimension":""},{"name":"raw","comment_text":"The raw material data as an integer.","type":"int","type_dimension":""}],"throws":[]},{"name":"setIngredient","comment_text":"","return_type":"org.bukkit.inventory.ShapedRecipe","return_type_dimension":"","parameters":[{"name":"key","comment_text":"","type":"char","type_dimension":""},{"name":"ingredient","comment_text":"","type":"org.bukkit.inventory.RecipeChoice","type_dimension":""}],"throws":[]},{"name":"getIngredientMap","comment_text":"Get a copy of the ingredients map.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChoiceMap","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getShape","comment_text":"Get the shape.","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getResult","comment_text":"Get the result.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGroup","comment_text":"Get the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGroup","comment_text":"Set the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"void","return_type_dimension":"","parameters":[{"name":"group","comment_text":"recipe group. An empty string denotes no group. May not be\n null.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.RecipeChoice","interfaces":["java.util.function.Predicate","java.lang.Cloneable"],"superclass":"","comment_text":"Represents a potential item match within a recipe. All choices within a\n recipe must be satisfied for it to be craftable.\n\n <b>This class is not legal for implementation by plugins!</b>","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItemStack","comment_text":"Gets a single item stack representative of this stack choice.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.RecipeChoice","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.RecipeChoice.MaterialChoice","interfaces":["org.bukkit.inventory.RecipeChoice"],"superclass":"java.lang.Object","comment_text":"Represents a choice of multiple matching Materials.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MaterialChoice","comment_text":"","parameters":[{"name":"choices","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"test","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"t","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemStack","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChoices","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.RecipeChoice.MaterialChoice","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.Recipe","interfaces":[],"superclass":"","comment_text":"Represents some type of crafting recipe.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getResult","comment_text":"Get the result of this recipe.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.PlayerInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of a Player, including the four armor slots and any extra slots.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getArmorContents","comment_text":"Get all ItemStacks from the armor slots","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getExtraContents","comment_text":"Get all additional ItemStacks stored in this inventory.\n <br>\n NB: What defines an extra slot is up to the implementation, however it\n will not be contained within {@link #getStorageContents()} or\n {@link #getArmorContents()}","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"getHelmet","comment_text":"Return the ItemStack from the helmet slot","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChestplate","comment_text":"Return the ItemStack from the chestplate slot","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLeggings","comment_text":"Return the ItemStack from the leg slot","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBoots","comment_text":"Return the ItemStack from the boots slot","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Stores the ItemStack at the given index of the inventory.\n <p>\n Indexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top\n left corner of the inventory, moving to the right, and moving to the row below it back on the left side when it\n reaches the end of the row. It follows the same path in the inventory like you would read a book.\n <p>\n Indexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes,\n you are encouraged to use the provided methods for those slots.\n <p>\n Index 40 refers to the off hand (shield) item slot. Though you can set off hand with this method using this index,\n you are encouraged to use the provided method for this slot.\n <p>\n If you attempt to use this method with an index less than 0 or greater than 40, an ArrayIndexOutOfBounds\n exception will be thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index where to put the ItemStack","type":"int","type_dimension":""},{"name":"item","comment_text":"The ItemStack to set","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setArmorContents","comment_text":"Put the given ItemStacks into the armor slots","return_type":"void","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The ItemStacks to use as armour","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[]},{"name":"setExtraContents","comment_text":"Put the given ItemStacks into the extra slots\n <br>\n See {@link #getExtraContents()} for an explanation of extra slots.","return_type":"void","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The ItemStacks to use as extra","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[]},{"name":"setHelmet","comment_text":"Put the given ItemStack into the helmet slot. This does not check if\n the ItemStack is a helmet","return_type":"void","return_type_dimension":"","parameters":[{"name":"helmet","comment_text":"The ItemStack to use as helmet","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setChestplate","comment_text":"Put the given ItemStack into the chestplate slot. This does not check\n if the ItemStack is a chestplate","return_type":"void","return_type_dimension":"","parameters":[{"name":"chestplate","comment_text":"The ItemStack to use as chestplate","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setLeggings","comment_text":"Put the given ItemStack into the leg slot. This does not check if the\n ItemStack is a pair of leggings","return_type":"void","return_type_dimension":"","parameters":[{"name":"leggings","comment_text":"The ItemStack to use as leggings","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setBoots","comment_text":"Put the given ItemStack into the boots slot. This does not check if the\n ItemStack is a boots","return_type":"void","return_type_dimension":"","parameters":[{"name":"boots","comment_text":"The ItemStack to use as boots","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemInMainHand","comment_text":"Gets a copy of the item the player is currently holding\n in their main hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInMainHand","comment_text":"Sets the item the player is holding in their main hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to put into the player's hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemInOffHand","comment_text":"Gets a copy of the item the player is currently holding\n in their off hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInOffHand","comment_text":"Sets the item the player is holding in their off hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to put into the player's hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemInHand","comment_text":"Gets a copy of the item the player is currently holding","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInHand","comment_text":"Sets the item the player is holding","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"The item to put into the player's hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHeldItemSlot","comment_text":"Get the slot number of the currently held item","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHeldItemSlot","comment_text":"Set the slot number of the currently held item.\n <p>\n This validates whether the slot is between 0 and 8 inclusive.","return_type":"void","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"The new slot number","type":"int","type_dimension":""}],"throws":[]},{"name":"getHolder","comment_text":"","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.MerchantRecipe","interfaces":["org.bukkit.inventory.Recipe"],"superclass":"java.lang.Object","comment_text":"Represents a merchant's trade.\n\n Trades can take one or two ingredients, and provide one result. The\n ingredients' Itemstack amounts are respected in the trade.\n <br>\n A trade has a limited number of uses, after which the trade can no longer be\n used, unless the player uses a different trade, which will cause its maximum\n uses to increase.\n <br>\n A trade may or may not reward experience for being completed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.event.entity.VillagerReplenishTradeEvent"],"constructors":[{"name":"MerchantRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"maxUses","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"MerchantRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"uses","comment_text":"","type":"int","type_dimension":""},{"name":"maxUses","comment_text":"","type":"int","type_dimension":""},{"name":"experienceReward","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getResult","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addIngredient","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"removeIngredient","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"setIngredients","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"ingredients","comment_text":"","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"getIngredients","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getUses","comment_text":"Get the number of times this trade has been used.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUses","comment_text":"Set the number of times this trade has been used.","return_type":"void","return_type_dimension":"","parameters":[{"name":"uses","comment_text":"the number of uses","type":"int","type_dimension":""}],"throws":[]},{"name":"getMaxUses","comment_text":"Get the maximum number of uses this trade has.\n <br>\n The maximum uses of this trade may increase when a player trades with the\n owning merchant.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxUses","comment_text":"Set the maximum number of uses this trade has.","return_type":"void","return_type_dimension":"","parameters":[{"name":"maxUses","comment_text":"the maximum number of time this trade can be used","type":"int","type_dimension":""}],"throws":[]},{"name":"hasExperienceReward","comment_text":"Whether to reward experience for the trade.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExperienceReward","comment_text":"Set whether to reward experience for the trade.","return_type":"void","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"whether to reward experience for completing this trade","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.MerchantInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Represents a trading inventory between a player and a merchant.\n <br>\n The holder of this Inventory is the owning Villager, or null if the player is\n trading with a merchant created by a plugin.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSelectedRecipeIndex","comment_text":"Get the index of the currently selected recipe.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSelectedRecipe","comment_text":"Get the currently selected recipe.","return_type":"org.bukkit.inventory.MerchantRecipe","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.Merchant","interfaces":[],"superclass":"","comment_text":"Represents a merchant. A merchant is a special type of inventory which can\n facilitate custom trades between items.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getRecipes","comment_text":"Get a list of trades currently available from this merchant.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRecipes","comment_text":"Set the list of trades currently available from this merchant.\n <br>\n This will not change the selected trades of players currently trading\n with this merchant.","return_type":"void","return_type_dimension":"","parameters":[{"name":"recipes","comment_text":"a list of recipes","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"getRecipe","comment_text":"Get the recipe at a certain index of this merchant's trade list.","return_type":"org.bukkit.inventory.MerchantRecipe","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":""}]},{"name":"setRecipe","comment_text":"Set the recipe at a certain index of this merchant's trade list.","return_type":"void","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""},{"name":"recipe","comment_text":"the recipe","type":"org.bukkit.inventory.MerchantRecipe","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":""}]},{"name":"getRecipeCount","comment_text":"Get the number of trades this merchant currently has available.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isTrading","comment_text":"Gets whether this merchant is currently trading.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTrader","comment_text":"Gets the player this merchant is trading with, or null if it is not\n currently trading.","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.MainHand","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the chosen main hand of a player","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.inventory.MainHand","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.inventory.MainHand","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["LEFT","RIGHT"]},{"name":"org.bukkit.inventory.LlamaInventory","interfaces":["org.bukkit.inventory.AbstractHorseInventory"],"superclass":"","comment_text":"An interface to the inventory of a {@link Llama}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getDecor","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDecor","comment_text":"Sets the item in the llama's decor slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.ItemStack","interfaces":["java.lang.Cloneable","org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Represents a stack of items","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ItemStack","comment_text":"","parameters":[],"throws":[]},{"name":"ItemStack","comment_text":"Defaults stack size to 1, with no extra data","parameters":[{"name":"type","comment_text":"item material","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"ItemStack","comment_text":"An item stack with no extra data","parameters":[{"name":"type","comment_text":"item material","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"stack size","type":"int","type_dimension":""}],"throws":[]},{"name":"ItemStack","comment_text":"An item stack with the specified damage / durability","parameters":[{"name":"type","comment_text":"item material","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"stack size","type":"int","type_dimension":""},{"name":"damage","comment_text":"durability / damage","type":"short","type_dimension":""}],"throws":[]},{"name":"ItemStack","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"the amount in the stack","type":"int","type_dimension":""},{"name":"damage","comment_text":"the damage value of the item","type":"short","type_dimension":""},{"name":"data","comment_text":"the data value or null","type":"java.lang.Byte","type_dimension":""}],"throws":[]},{"name":"ItemStack","comment_text":"Creates a new item stack derived from the specified stack","parameters":[{"name":"stack","comment_text":"the stack to copy","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified stack is null or\n     returns an item meta not created by the item factory"}]}],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the type of this item","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the type of this item\n <p>\n Note that in doing so you will reset the MaterialData for this stack","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"New type to set the items in this stack to","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"getAmount","comment_text":"Gets the amount of items in this stack","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAmount","comment_text":"Sets the amount of items in this stack","return_type":"void","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"New amount of items in this stack","type":"int","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the MaterialData for this stack of items","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setData","comment_text":"Sets the MaterialData for this stack of items","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"New MaterialData for this item","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setDurability","comment_text":"Sets the durability of this item","return_type":"void","return_type_dimension":"","parameters":[{"name":"durability","comment_text":"Durability of this item","type":"short","type_dimension":""}],"throws":[]},{"name":"getDurability","comment_text":"Gets the durability of this item","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxStackSize","comment_text":"Get the maximum stacksize for the material hold in this ItemStack.\n (Returns -1 if it has no idea)","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"isSimilar","comment_text":"This method is the same as equals, but does not consider stack size\n (amount).","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the item stack to compare to","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"containsEnchantment","comment_text":"Checks if this ItemStack contains the given {@link Enchantment}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to test","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getEnchantmentLevel","comment_text":"Gets the level of the specified enchantment on this item stack","return_type":"int","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to check","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getEnchantments","comment_text":"Gets a map containing all enchantments and their levels on this item.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addEnchantments","comment_text":"Adds the specified enchantments to this item stack.\n <p>\n This method is the same as calling {@link\n #addEnchantment(org.bukkit.enchantments.Enchantment, int)} for each\n element of the map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enchantments","comment_text":"Enchantments to add","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"addEnchantment","comment_text":"Adds the specified {@link Enchantment} to this item stack.\n <p>\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to add","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"level","comment_text":"Level of the enchantment","type":"int","type_dimension":""}],"throws":[]},{"name":"addUnsafeEnchantments","comment_text":"Adds the specified enchantments to this item stack in an unsafe manner.\n <p>\n This method is the same as calling {@link\n #addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int)} for\n each element of the map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enchantments","comment_text":"Enchantments to add","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"addUnsafeEnchantment","comment_text":"Adds the specified {@link Enchantment} to this item stack.\n <p>\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.\n <p>\n This method is unsafe and will ignore level restrictions or item type.\n Use at your own discretion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to add","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"level","comment_text":"Level of the enchantment","type":"int","type_dimension":""}],"throws":[]},{"name":"removeEnchantment","comment_text":"Removes the specified {@link Enchantment} if it exists on this\n ItemStack","return_type":"int","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to remove","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"Required method for configuration serialization","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"args","comment_text":"map to deserialize","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"getItemMeta","comment_text":"Get a copy of this ItemStack's {@link ItemMeta}.","return_type":"org.bukkit.inventory.meta.ItemMeta","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasItemMeta","comment_text":"Checks to see if any meta data has been defined.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemMeta","comment_text":"Set the ItemMeta of this ItemStack.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"itemMeta","comment_text":"new ItemMeta, or null to indicate meta data be cleared.","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.ItemFlag","interfaces":[],"superclass":"java.lang.Enum","comment_text":"A ItemFlag can hide some Attributes from ItemStacks","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.inventory.ItemFlag","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.inventory.ItemFlag","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["HIDE_ENCHANTS","HIDE_ATTRIBUTES","HIDE_UNBREAKABLE","HIDE_DESTROYS","HIDE_PLACED_ON","HIDE_POTION_EFFECTS"]},{"name":"org.bukkit.inventory.ItemFactory","interfaces":[],"superclass":"","comment_text":"An instance of the ItemFactory can be obtained with {@link\n Server#getItemFactory()}.\n <p>\n The ItemFactory is solely responsible for creating item meta containers to\n apply on item stacks.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItemMeta","comment_text":"This creates a new item meta for the material.","return_type":"org.bukkit.inventory.meta.ItemMeta","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to consider as base for the meta","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"isApplicable","comment_text":"This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified ItemStack.\n <p>\n A {@link SkullMeta} would not be valid for a sword, but a normal {@link\n ItemMeta} from an enchanted dirt block would.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"Meta to check","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"stack","comment_text":"Item that meta will be applied to","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the meta was not created by this\n     factory"}]},{"name":"isApplicable","comment_text":"This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified Material.\n <p>\n A {@link SkullMeta} would not be valid for a sword, but a normal {@link\n ItemMeta} from an enchanted dirt block would.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"Meta to check","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"material","comment_text":"Material that meta will be applied to","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the meta was not created by this\n     factory"}]},{"name":"equals","comment_text":"This method is used to compare two item meta data objects.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"meta1","comment_text":"First meta to compare, and may be null to indicate no data","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"meta2","comment_text":"Second meta to compare, and may be null to indicate no\n     data","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if either meta was not created by this\n     factory"}]},{"name":"asMetaFor","comment_text":"Returns an appropriate item meta for the specified stack.\n <p>\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n <p>\n Example, if a {@link SkullMeta} is being applied to a book, this method\n would return a {@link BookMeta} containing all information in the\n specified meta that is applicable to an {@link ItemMeta}, the highest\n common interface.","return_type":"org.bukkit.inventory.meta.ItemMeta","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"the meta to convert","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"stack","comment_text":"the stack to convert the meta for","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified meta was not created\n     by this factory"}]},{"name":"asMetaFor","comment_text":"Returns an appropriate item meta for the specified material.\n <p>\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n <p>\n Example, if a {@link SkullMeta} is being applied to a book, this method\n would return a {@link BookMeta} containing all information in the\n specified meta that is applicable to an {@link ItemMeta}, the highest\n common interface.","return_type":"org.bukkit.inventory.meta.ItemMeta","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"the meta to convert","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"material","comment_text":"the material to convert the meta for","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if the specified meta was not created\n     by this factory"}]},{"name":"getDefaultLeatherColor","comment_text":"Returns the default color for all leather armor.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"updateMaterial","comment_text":"Apply a material change for an item meta. Do not use under any\n circumstances.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"meta","comment_text":"","type":"org.bukkit.inventory.meta.ItemMeta","type_dimension":""},{"name":"material","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.inventory.InventoryView","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a view linking two inventories and a single player (whose\n inventory may or may not be one of the two).\n <p>\n Note: If you implement this interface but fail to satisfy the expected\n contracts of certain methods, there's no guarantee that the game will work\n as it should.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InventoryView","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"OUTSIDE","comment_text":"","type":"int","type_dimension":""}],"methods":[{"name":"getTopInventory","comment_text":"Get the upper inventory involved in this transaction.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBottomInventory","comment_text":"Get the lower inventory involved in this transaction.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlayer","comment_text":"Get the player viewing.","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Determine the type of inventory involved in the transaction. This\n indicates the window style being shown. It will never return PLAYER,\n since that is common to all windows.","return_type":"org.bukkit.event.inventory.InventoryType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItem","comment_text":"Sets one item in this inventory view by its raw slot ID.\n <p>\n Note: If slot ID -999 is chosen, it may be expected that the item is\n dropped on the ground. This is not required behaviour, however.","return_type":"void","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"The ID as returned by InventoryClickEvent.getRawSlot()","type":"int","type_dimension":""},{"name":"item","comment_text":"The new item to put in the slot, or null to clear it.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItem","comment_text":"Gets one item in this inventory view by its raw slot ID.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"The ID as returned by InventoryClickEvent.getRawSlot()","type":"int","type_dimension":""}],"throws":[]},{"name":"setCursor","comment_text":"Sets the item on the cursor of one of the viewing players.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to put on the cursor, or null to remove the item\n     on their cursor.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getCursor","comment_text":"Get the item on the cursor of one of the viewing players.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"convertSlot","comment_text":"Converts a raw slot ID into its local slot ID into whichever of the two\n inventories the slot points to.\n <p>\n If the raw slot refers to the upper inventory, it will be returned\n unchanged and thus be suitable for getTopInventory().getItem(); if it\n refers to the lower inventory, the output will differ from the input\n and be suitable for getBottomInventory().getItem().","return_type":"int","return_type_dimension":"","parameters":[{"name":"rawSlot","comment_text":"The raw slot ID.","type":"int","type_dimension":""}],"throws":[]},{"name":"close","comment_text":"Closes the inventory view.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"countSlots","comment_text":"Check the total number of slots in this view, combining the upper and\n lower inventories.\n <p>\n Note though that it's possible for this to be greater than the sum of\n the two inventories if for example some slots are not being used.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setProperty","comment_text":"Sets an extra property of this inventory if supported by that\n inventory, for example the state of a progress bar.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"prop","comment_text":"the window property to update","type":"org.bukkit.inventory.InventoryView.Property","type_dimension":""},{"name":"value","comment_text":"the new value for the window property","type":"int","type_dimension":""}],"throws":[]},{"name":"getTitle","comment_text":"Get the title of this inventory window.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.InventoryView.Property","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents various extra properties of certain inventory windows.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.inventory.InventoryView.Property","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.inventory.InventoryView.Property","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getType","comment_text":"","return_type":"org.bukkit.event.inventory.InventoryType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getId","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["BREW_TIME","BURN_TIME","TICKS_FOR_CURRENT_FUEL","COOK_TIME","TICKS_FOR_CURRENT_SMELTING","ENCHANT_BUTTON1","ENCHANT_BUTTON2","ENCHANT_BUTTON3","ENCHANT_XP_SEED","ENCHANT_ID1","ENCHANT_ID2","ENCHANT_ID3","ENCHANT_LEVEL1","ENCHANT_LEVEL2","ENCHANT_LEVEL3","LEVELS","PRIMARY_EFFECT","SECONDARY_EFFECT","REPAIR_COST"]},{"name":"org.bukkit.inventory.InventoryHolder","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getInventory","comment_text":"Get the object's inventory.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.Inventory","interfaces":["java.lang.Iterable"],"superclass":"","comment_text":"Interface to the various inventories. Behavior relating to {@link\n Material#AIR} is unspecified.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSize","comment_text":"Returns the size of the inventory","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxStackSize","comment_text":"Returns the maximum stack size for an ItemStack in this inventory.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaxStackSize","comment_text":"This method allows you to change the maximum stack size for an\n inventory.\n <p>\n <b>Caveats:</b>\n <ul>\n <li>Not all inventories respect this value.\n <li>Stacks larger than 127 may be clipped when the world is saved.\n <li>This value is not guaranteed to be preserved; be sure to set it\n     before every time you want to set a slot over the max stack size.\n <li>Stacks larger than the default max size for this type of inventory\n     may not display correctly in the client.\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"size","comment_text":"The new maximum stack size for items in this inventory.","type":"int","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"Returns the name of the inventory","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItem","comment_text":"Returns the ItemStack found in the slot at the given index","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index of the Slot's ItemStack to return","type":"int","type_dimension":""}],"throws":[]},{"name":"setItem","comment_text":"Stores the ItemStack at the given index of the inventory.","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index where to put the ItemStack","type":"int","type_dimension":""},{"name":"item","comment_text":"The ItemStack to set","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"addItem","comment_text":"Stores the given ItemStacks in the inventory. This will try to fill\n existing stacks and empty slots as well as it can.\n <p>\n The returned HashMap contains what it couldn't store, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all items are stored, it will return\n an empty HashMap.\n <p>\n If you pass in ItemStacks which exceed the maximum stack size for the\n Material, first they will be added to partial stacks where\n Material.getMaxStackSize() is not exceeded, up to\n Material.getMaxStackSize(). When there are no partial stacks left\n stacks will be split on Inventory.getMaxStackSize() allowing you to\n exceed the maximum stack size for that material.\n <p>\n It is known that in some implementations this method will also set\n the inputted argument amount to the number of that item not placed in\n slots.","return_type":"java.util.HashMap","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The ItemStacks to add","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if items or any element in it is null"}]},{"name":"removeItem","comment_text":"Removes the given ItemStacks from the inventory.\n <p>\n It will try to remove 'as much as possible' from the types and amounts\n you give as arguments.\n <p>\n The returned HashMap contains what it couldn't remove, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all the given ItemStacks are\n removed, it will return an empty HashMap.\n <p>\n It is known that in some implementations this method will also set the\n inputted argument amount to the number of that item not removed from\n slots.","return_type":"java.util.HashMap","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The ItemStacks to remove","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if items is null"}]},{"name":"getContents","comment_text":"Returns all ItemStacks from the inventory","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"setContents","comment_text":"Completely replaces the inventory's contents. Removes all existing\n contents and replaces it with the ItemStacks given in the array.","return_type":"void","return_type_dimension":"","parameters":[{"name":"items","comment_text":"A complete replacement for the contents; the length must\n     be less than or equal to {@link #getSize()}.","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If the array has more items than the\n     inventory."}]},{"name":"getStorageContents","comment_text":"Return the contents from the section of the inventory where items can\n reasonably be expected to be stored. In most cases this will represent\n the entire inventory, but in some cases it may exclude armor or result\n slots.\n <br>\n It is these contents which will be used for add / contains / remove\n methods which look for a specific stack.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"setStorageContents","comment_text":"Put the given ItemStacks into the storage slots","return_type":"void","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The ItemStacks to use as storage contents","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If the array has more items than the\n inventory."}]},{"name":"contains","comment_text":"Checks if the inventory contains any ItemStacks with the given\n material.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to check for","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if material is null"}]},{"name":"contains","comment_text":"Checks if the inventory contains any ItemStacks matching the given\n ItemStack.\n <p>\n This will only return true if both the type and the amount of the stack\n match.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"contains","comment_text":"Checks if the inventory contains any ItemStacks with the given\n material, adding to at least the minimum amount specified.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to check for","type":"org.bukkit.Material","type_dimension":""},{"name":"amount","comment_text":"The minimum amount","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if material is null"}]},{"name":"contains","comment_text":"Checks if the inventory contains at least the minimum amount specified\n of exactly matching ItemStacks.\n <p>\n An ItemStack only counts if both the type and the amount of the stack\n match.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"amount","comment_text":"how many identical stacks to check for","type":"int","type_dimension":""}],"throws":[]},{"name":"containsAtLeast","comment_text":"Checks if the inventory contains ItemStacks matching the given\n ItemStack whose amounts sum to at least the minimum amount specified.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"item","comment_text":"the ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"amount","comment_text":"the minimum amount","type":"int","type_dimension":""}],"throws":[]},{"name":"all","comment_text":"Returns a HashMap with all slots and ItemStacks in the inventory with\n the given Material.\n <p>\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.","return_type":"java.util.HashMap","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to look for","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if material is null"}]},{"name":"all","comment_text":"Finds all slots in the inventory containing any ItemStacks with the\n given ItemStack. This will only match slots if both the type and the\n amount of the stack match\n <p>\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.","return_type":"java.util.HashMap","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"first","comment_text":"Finds the first slot in the inventory containing an ItemStack with the\n given material","return_type":"int","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to look for","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if material is null"}]},{"name":"first","comment_text":"Returns the first slot in the inventory containing an ItemStack with\n the given stack. This will only match a slot if both the type and the\n amount of the stack match","return_type":"int","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"firstEmpty","comment_text":"Returns the first empty Slot.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"remove","comment_text":"Removes all stacks in the inventory matching the given material.","return_type":"void","return_type_dimension":"","parameters":[{"name":"material","comment_text":"The material to remove","type":"org.bukkit.Material","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if material is null"}]},{"name":"remove","comment_text":"Removes all stacks in the inventory matching the given stack.\n <p>\n This will only match a slot if both the type and the amount of the\n stack match","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The ItemStack to match against","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"clear","comment_text":"Clears out a particular slot in the index.","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index to empty.","type":"int","type_dimension":""}],"throws":[]},{"name":"clear","comment_text":"Clears out the whole Inventory.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getViewers","comment_text":"Gets a list of players viewing the inventory. Note that a player is\n considered to be viewing their own inventory and internal crafting\n screen even when said inventory is not open. They will normally be\n considered to be viewing their inventory even when they have a\n different inventory screen open, but it's possible for customized\n inventory screens to exclude the viewer's inventory, so this should\n never be assumed to be non-empty.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTitle","comment_text":"Returns the title of this inventory.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Returns what type of inventory this is.","return_type":"org.bukkit.event.inventory.InventoryType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHolder","comment_text":"Gets the block or entity belonging to the open inventory","return_type":"org.bukkit.inventory.InventoryHolder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"iterator","comment_text":"","return_type":"java.util.ListIterator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"iterator","comment_text":"Returns an iterator starting at the given index. If the index is\n positive, then the first call to next() will return the item at that\n index; if it is negative, the first call to previous will return the\n item at index (getSize() + index).","return_type":"java.util.ListIterator","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index.","type":"int","type_dimension":""}],"throws":[]},{"name":"getLocation","comment_text":"Get the location of the block or entity which corresponds to this inventory. May return null if this container\n was custom created or is a virtual / subcontainer.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.HorseInventory","interfaces":["org.bukkit.inventory.AbstractHorseInventory"],"superclass":"","comment_text":"An interface to the inventory of a Horse.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getArmor","comment_text":"Gets the item in the horse's armor slot.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setArmor","comment_text":"Sets the item in the horse's armor slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.FurnaceRecipe","interfaces":["org.bukkit.inventory.Recipe","org.bukkit.Keyed"],"superclass":"java.lang.Object","comment_text":"Represents a smelting recipe.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FurnaceRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"FurnaceRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"FurnaceRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.material.MaterialData","type_dimension":""},{"name":"experience","comment_text":"","type":"float","type_dimension":""}],"throws":[]},{"name":"FurnaceRecipe","comment_text":"","parameters":[{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"FurnaceRecipe","comment_text":"Create a furnace recipe to craft the specified ItemStack.","parameters":[{"name":"key","comment_text":"The unique recipe key","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"result","comment_text":"The item you want the recipe to create.","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"The input material.","type":"org.bukkit.Material","type_dimension":""},{"name":"experience","comment_text":"The experience given by this recipe","type":"float","type_dimension":""},{"name":"cookingTime","comment_text":"The cooking time (in ticks)","type":"int","type_dimension":""}],"throws":[]},{"name":"FurnaceRecipe","comment_text":"","parameters":[{"name":"key","comment_text":"","type":"org.bukkit.NamespacedKey","type_dimension":""},{"name":"result","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""},{"name":"source","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"","type":"int","type_dimension":""},{"name":"experience","comment_text":"","type":"float","type_dimension":""},{"name":"cookingTime","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setInput","comment_text":"Sets the input of this furnace recipe.","return_type":"org.bukkit.inventory.FurnaceRecipe","return_type_dimension":"","parameters":[{"name":"input","comment_text":"The input material.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"setInput","comment_text":"Sets the input of this furnace recipe.","return_type":"org.bukkit.inventory.FurnaceRecipe","return_type_dimension":"","parameters":[{"name":"input","comment_text":"The input material.","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"setInput","comment_text":"Sets the input of this furnace recipe.","return_type":"org.bukkit.inventory.FurnaceRecipe","return_type_dimension":"","parameters":[{"name":"input","comment_text":"The input material.","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"The data value. (Note: This is currently ignored by the\n     CraftBukkit server.)","type":"int","type_dimension":""}],"throws":[]},{"name":"getInput","comment_text":"Get the input material.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getResult","comment_text":"Get the result of this recipe.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setExperience","comment_text":"Sets the experience given by this recipe.","return_type":"void","return_type_dimension":"","parameters":[{"name":"experience","comment_text":"the experience level","type":"float","type_dimension":""}],"throws":[]},{"name":"getExperience","comment_text":"Get the experience given by this recipe.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCookingTime","comment_text":"Set the cooking time for this recipe in ticks.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cookingTime","comment_text":"new cooking time","type":"int","type_dimension":""}],"throws":[]},{"name":"getCookingTime","comment_text":"Get the cooking time for this recipe in ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGroup","comment_text":"Get the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGroup","comment_text":"Set the group of this recipe. Recipes with the same group may be grouped\n together when displayed in the client.","return_type":"void","return_type_dimension":"","parameters":[{"name":"group","comment_text":"recipe group. An empty string denotes no group. May not be\n null.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.FurnaceInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of a Furnace.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getResult","comment_text":"Get the current item in the result slot.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFuel","comment_text":"Get the current fuel.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSmelting","comment_text":"Get the item currently smelting.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFuel","comment_text":"Set the current fuel.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"The item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setResult","comment_text":"Set the current item in the result slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"The item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setSmelting","comment_text":"Set the item currently smelting.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"The item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHolder","comment_text":"","return_type":"org.bukkit.block.Furnace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.EquipmentSlot","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.inventory.EquipmentSlot","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["HAND","OFF_HAND","FEET","LEGS","CHEST","HEAD"]},{"name":"org.bukkit.inventory.EntityEquipment","interfaces":[],"superclass":"","comment_text":"An interface to a creatures inventory","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getItemInMainHand","comment_text":"Gets a copy of the item the entity is currently holding\n in their main hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInMainHand","comment_text":"Sets the item the entity is holding in their main hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to put into the entities hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemInOffHand","comment_text":"Gets a copy of the item the entity is currently holding\n in their off hand.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInOffHand","comment_text":"Sets the item the entity is holding in their off hand.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The item to put into the entities hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItemInHand","comment_text":"Gets a copy of the item the entity is currently holding","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInHand","comment_text":"Sets the item the entity is holding","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"The item to put into the entities hand","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHelmet","comment_text":"Gets a copy of the helmet currently being worn by the entity","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHelmet","comment_text":"Sets the helmet worn by the entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"helmet","comment_text":"The helmet to put on the entity","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getChestplate","comment_text":"Gets a copy of the chest plate currently being worn by the entity","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setChestplate","comment_text":"Sets the chest plate worn by the entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"chestplate","comment_text":"The chest plate to put on the entity","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getLeggings","comment_text":"Gets a copy of the leggings currently being worn by the entity","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLeggings","comment_text":"Sets the leggings worn by the entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"leggings","comment_text":"The leggings to put on the entity","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getBoots","comment_text":"Gets a copy of the boots currently being worn by the entity","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBoots","comment_text":"Sets the boots worn by the entity","return_type":"void","return_type_dimension":"","parameters":[{"name":"boots","comment_text":"The boots to put on the entity","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getArmorContents","comment_text":"Gets a copy of all worn armor","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"setArmorContents","comment_text":"Sets the entities armor to the provided array of ItemStacks","return_type":"void","return_type_dimension":"","parameters":[{"name":"items","comment_text":"The items to set the armor as","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[]},{"name":"clear","comment_text":"Clears the entity of all armor and held items","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getItemInHandDropChance","comment_text":"","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInHandDropChance","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"drop chance","type":"float","type_dimension":""}],"throws":[]},{"name":"getItemInMainHandDropChance","comment_text":"Gets the chance of the main hand item being dropped upon this creature's\n death.\n\n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInMainHandDropChance","comment_text":"Sets the chance of the item this creature is currently holding in their\n main hand being dropped upon this creature's death.\n\n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"the chance of the main hand item being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getItemInOffHandDropChance","comment_text":"Gets the chance of the off hand item being dropped upon this creature's\n death.\n\n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setItemInOffHandDropChance","comment_text":"Sets the chance of the off hand item being dropped upon this creature's\n death.\n\n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"the chance of off hand item being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getHelmetDropChance","comment_text":"Gets the chance of the helmet being dropped upon this creature's death.\n\n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHelmetDropChance","comment_text":"Sets the chance of the helmet being dropped upon this creature's death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"of the helmet being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getChestplateDropChance","comment_text":"Gets the chance of the chest plate being dropped upon this creature's\n death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setChestplateDropChance","comment_text":"Sets the chance of the chest plate being dropped upon this creature's\n death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"of the chest plate being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getLeggingsDropChance","comment_text":"Gets the chance of the leggings being dropped upon this creature's\n death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLeggingsDropChance","comment_text":"Sets the chance of the leggings being dropped upon this creature's\n death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"chance of the leggings being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getBootsDropChance","comment_text":"Gets the chance of the boots being dropped upon this creature's death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBootsDropChance","comment_text":"Sets the chance of the boots being dropped upon this creature's death.\n \n <ul>\n <li>A drop chance of 0.0F will never drop\n <li>A drop chance of 1.0F will always drop\n </ul>","return_type":"void","return_type_dimension":"","parameters":[{"name":"chance","comment_text":"of the boots being dropped","type":"float","type_dimension":""}],"throws":[]},{"name":"getHolder","comment_text":"Get the entity this EntityEquipment belongs to","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.EnchantingInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of an Enchantment Table.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setItem","comment_text":"Set the item being enchanted.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItem","comment_text":"Get the item being enchanted.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSecondary","comment_text":"Set the secondary item being used for the enchant.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getSecondary","comment_text":"Get the secondary item being used for the enchant.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.DoubleChestInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of a Double Chest.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getLeftSide","comment_text":"Get the left half of this double chest.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRightSide","comment_text":"Get the right side of this double chest.","return_type":"org.bukkit.inventory.Inventory","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHolder","comment_text":"","return_type":"org.bukkit.block.DoubleChest","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.CraftingInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the crafting inventories","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getResult","comment_text":"Check what item is in the result slot of this crafting inventory.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMatrix","comment_text":"Get the contents of the crafting matrix.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"setResult","comment_text":"Set the item in the result slot of the crafting inventory.","return_type":"void","return_type_dimension":"","parameters":[{"name":"newResult","comment_text":"The new result item.","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"setMatrix","comment_text":"Replace the contents of the crafting matrix","return_type":"void","return_type_dimension":"","parameters":[{"name":"contents","comment_text":"The new contents.","type":"org.bukkit.inventory.ItemStack","type_dimension":"[]"}],"throws":[]},{"name":"getRecipe","comment_text":"Get the current recipe formed on the crafting inventory, if any.","return_type":"org.bukkit.inventory.Recipe","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.BrewerInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of a Brewing Stand.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getIngredient","comment_text":"Get the current ingredient for brewing.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setIngredient","comment_text":"Set the current ingredient for brewing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ingredient","comment_text":"The ingredient","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getFuel","comment_text":"Get the current fuel for brewing.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFuel","comment_text":"Set the current fuel for brewing. Generally only\n {@link Material#BLAZE_POWDER} will be of use.","return_type":"void","return_type_dimension":"","parameters":[{"name":"fuel","comment_text":"The fuel","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getHolder","comment_text":"","return_type":"org.bukkit.block.BrewingStand","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.BeaconInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of a Beacon.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setItem","comment_text":"Set the item powering the beacon.","return_type":"void","return_type_dimension":"","parameters":[{"name":"item","comment_text":"The new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getItem","comment_text":"Get the item powering the beacon.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.AnvilInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"Interface to the inventory of an Anvil.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getRenameText","comment_text":"Get the name to be applied to the repaired item. An empty string denotes\n the default item name.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRepairCost","comment_text":"Get the experience cost (in levels) to complete the current repair.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRepairCost","comment_text":"Set the experience cost (in levels) to complete the current repair.","return_type":"void","return_type_dimension":"","parameters":[{"name":"levels","comment_text":"the experience cost","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.AbstractHorseInventory","interfaces":["org.bukkit.inventory.Inventory"],"superclass":"","comment_text":"An interface to the inventory of an {@link AbstractHorse}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSaddle","comment_text":"Gets the item in the horse's saddle slot.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSaddle","comment_text":"Sets the item in the horse's saddle slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"stack","comment_text":"the new item","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.TropicalFishBucketMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a bucket of tropical fish.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPatternColor","comment_text":"Gets the color of the fish's pattern.\n <p>\n Plugins should check that hasVariant() returns <code>true</code> before\n calling this method.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPatternColor","comment_text":"Sets the color of the fish's pattern.\n <p>\n Setting this when hasVariant() returns <code>false</code> will initialize\n all other values to unspecified defaults.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"pattern color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getBodyColor","comment_text":"Gets the color of the fish's body.\n <p>\n Plugins should check that hasVariant() returns <code>true</code> before\n calling this method.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBodyColor","comment_text":"Sets the color of the fish's body.\n <p>\n Setting this when hasVariant() returns <code>false</code> will initialize\n all other values to unspecified defaults.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"body color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getPattern","comment_text":"Gets the fish's pattern.\n <p>\n Plugins should check that hasVariant() returns <code>true</code> before\n calling this method.","return_type":"org.bukkit.entity.TropicalFish.Pattern","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPattern","comment_text":"Sets the fish's pattern.\n <p>\n Setting this when hasVariant() returns <code>false</code> will initialize\n all other values to unspecified defaults.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pattern","comment_text":"new pattern","type":"org.bukkit.entity.TropicalFish.Pattern","type_dimension":""}],"throws":[]},{"name":"hasVariant","comment_text":"Checks for existence of a variant tag indicating a specific fish will be\n spawned.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.TropicalFishBucketMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.SpawnEggMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a spawn egg and it's spawned type.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getSpawnedType","comment_text":"Get the type of entity this egg will spawn.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnedType","comment_text":"Set the type of entity this egg will spawn.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The entity type. May be null for implementation specific\n default.","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.SpawnEggMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.SkullMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a skull that can have an owner.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getOwner","comment_text":"Gets the owner of the skull.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasOwner","comment_text":"Checks to see if the skull has an owner.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwner","comment_text":"Sets the owner of the skull.\n <p>\n Plugins should check that hasOwner() returns true before calling this\n plugin.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the new owner of the skull","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getOwningPlayer","comment_text":"Gets the owner of the skull.","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOwningPlayer","comment_text":"Sets the owner of the skull.\n <p>\n Plugins should check that hasOwner() returns true before calling this\n plugin.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"owner","comment_text":"the new owner of the skull","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.SkullMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.Repairable","interfaces":[],"superclass":"","comment_text":"Represents an item that can be repaired at an anvil.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasRepairCost","comment_text":"Checks to see if this has a repair penalty","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRepairCost","comment_text":"Gets the repair penalty","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRepairCost","comment_text":"Sets the repair penalty","return_type":"void","return_type_dimension":"","parameters":[{"name":"cost","comment_text":"repair penalty","type":"int","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.Repairable","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.PotionMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a potion or item that can have custom effects.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setBasePotionData","comment_text":"Sets the underlying potion data","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"PotionData to set the base potion state to","type":"org.bukkit.potion.PotionData","type_dimension":""}],"throws":[]},{"name":"getBasePotionData","comment_text":"Returns the potion data about the base potion","return_type":"org.bukkit.potion.PotionData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasCustomEffects","comment_text":"Checks for the presence of custom potion effects.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCustomEffects","comment_text":"Gets an immutable list containing all custom potion effects applied to\n this potion.\n <p>\n Plugins should check that hasCustomEffects() returns true before calling\n this method.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addCustomEffect","comment_text":"Adds a custom potion effect to this potion.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"the potion effect to add","type":"org.bukkit.potion.PotionEffect","type_dimension":""},{"name":"overwrite","comment_text":"true if any existing effect of the same type should be\n overwritten","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removeCustomEffect","comment_text":"Removes a custom potion effect from this potion.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to remove","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"hasCustomEffect","comment_text":"Checks for a specific custom potion effect type on this potion.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to check for","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"setMainEffect","comment_text":"Moves a potion effect to the top of the potion effect list.\n <p>\n This causes the client to display the potion effect in the potion's name.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"type","comment_text":"the potion effect type to move","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"clearCustomEffects","comment_text":"Removes all custom potion effects from this potion.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasColor","comment_text":"Checks for existence of a potion color.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the potion color that is set. A custom potion color will alter the\n display of the potion in an inventory slot.\n <p>\n Plugins should check that hasColor() returns <code>true</code> before\n calling this method.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the potion color. A custom potion color will alter the display of\n the potion in an inventory slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the color to set","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.PotionMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.MapMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a map that can be scalable.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasMapId","comment_text":"Checks for existence of a map ID number.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMapId","comment_text":"Gets the map ID that is set. This is used to determine what map is\n displayed.\n <p>\n Plugins should check that hasMapId() returns <code>true</code> before\n calling this method.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMapId","comment_text":"Sets the map ID. This is used to determine what map is displayed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"id","comment_text":"the map id to set","type":"int","type_dimension":""}],"throws":[]},{"name":"isScaling","comment_text":"Checks to see if this map is scaling.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setScaling","comment_text":"Sets if this map is scaling or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"true to scale","type":"boolean","type_dimension":""}],"throws":[]},{"name":"hasLocationName","comment_text":"Checks for existence of a location name.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocationName","comment_text":"Gets the location name that is set.\n <p>\n Plugins should check that hasLocationName() returns <code>true</code>\n before calling this method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLocationName","comment_text":"Sets the location name. A custom map color will alter the display of the\n map in an inventory slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasColor","comment_text":"Checks for existence of a map color.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Gets the map color that is set. A custom map color will alter the display\n of the map in an inventory slot.\n <p>\n Plugins should check that hasColor() returns <code>true</code> before\n calling this method.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the map color. A custom map color will alter the display of the map\n in an inventory slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the color to set","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.MapMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.LeatherArmorMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents leather armor ({@link Material#LEATHER_BOOTS}, {@link\n Material#LEATHER_CHESTPLATE}, {@link Material#LEATHER_HELMET}, or {@link\n Material#LEATHER_LEGGINGS}) that can be colored.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the color of the armor. If it has not been set otherwise, it will\n be {@link ItemFactory#getDefaultLeatherColor()}.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of the armor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the color to set. Setting it to null is equivalent to\n     setting it to {@link ItemFactory#getDefaultLeatherColor()}.","type":"org.bukkit.Color","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.LeatherArmorMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.KnowledgeBookMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasRecipes","comment_text":"Checks for the existence of recipes in the book.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRecipes","comment_text":"Gets all the recipes in the book.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRecipes","comment_text":"Clears the existing book recipes, and sets the book to use the provided\n recipes.","return_type":"void","return_type_dimension":"","parameters":[{"name":"recipes","comment_text":"A list of recipes to set the book to use","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"addRecipe","comment_text":"Adds new recipe to the end of the book.","return_type":"void","return_type_dimension":"","parameters":[{"name":"recipes","comment_text":"A list of recipe keys","type":"org.bukkit.NamespacedKey","type_dimension":"[]"}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.KnowledgeBookMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.ItemMeta","interfaces":["java.lang.Cloneable","org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"","comment_text":"This type represents the storage mechanism for auxiliary item data.\n <p>\n An implementation will handle the creation and application for ItemMeta.\n This class should not be implemented by a plugin in a live environment.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasDisplayName","comment_text":"Checks for existence of a display name.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDisplayName","comment_text":"Gets the display name that is set.\n <p>\n Plugins should check that hasDisplayName() returns <code>true</code>\n before calling this method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDisplayName","comment_text":"Sets the display name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasLocalizedName","comment_text":"Checks for existence of a localized name.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLocalizedName","comment_text":"Gets the localized display name that is set.\n <p>\n Plugins should check that hasLocalizedName() returns <code>true</code>\n before calling this method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLocalizedName","comment_text":"Sets the localized name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"the name to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasLore","comment_text":"Checks for existence of lore.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLore","comment_text":"Gets the lore that is set.\n <p>\n Plugins should check if hasLore() returns <code>true</code> before\n calling this method.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setLore","comment_text":"Sets the lore for this item. \n Removes lore when given null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"lore","comment_text":"the lore that will be set","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"hasEnchants","comment_text":"Checks for the existence of any enchantments.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasEnchant","comment_text":"Checks for existence of the specified enchantment.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to check","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getEnchantLevel","comment_text":"Checks for the level of the specified enchantment.","return_type":"int","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to check","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getEnchants","comment_text":"Returns a copy the enchantments in this ItemMeta. <br> \n Returns an empty map if none.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addEnchant","comment_text":"Adds the specified enchantment to this item meta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to add","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"level","comment_text":"Level for the enchantment","type":"int","type_dimension":""},{"name":"ignoreLevelRestriction","comment_text":"this indicates the enchantment should be\n     applied, ignoring the level limit","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removeEnchant","comment_text":"Removes the specified enchantment from this item meta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to remove","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"hasConflictingEnchant","comment_text":"Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to test","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"addItemFlags","comment_text":"Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.","return_type":"void","return_type_dimension":"","parameters":[{"name":"itemFlags","comment_text":"The hideflags which shouldn't be rendered","type":"org.bukkit.inventory.ItemFlag","type_dimension":"[]"}],"throws":[]},{"name":"removeItemFlags","comment_text":"Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.","return_type":"void","return_type_dimension":"","parameters":[{"name":"itemFlags","comment_text":"Hideflags which should be removed","type":"org.bukkit.inventory.ItemFlag","type_dimension":"[]"}],"throws":[]},{"name":"getItemFlags","comment_text":"Get current set itemFlags. The collection returned is unmodifiable.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasItemFlag","comment_text":"Check if the specified flag is present on this item.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"flag","comment_text":"the flag to check","type":"org.bukkit.inventory.ItemFlag","type_dimension":""}],"throws":[]},{"name":"isUnbreakable","comment_text":"Return if the unbreakable tag is true. An unbreakable item will not lose\n durability.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUnbreakable","comment_text":"Sets the unbreakable tag. An unbreakable item will not lose durability.","return_type":"void","return_type_dimension":"","parameters":[{"name":"unbreakable","comment_text":"true if set unbreakable","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.ItemMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.FireworkMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a {@link Material#FIREWORK_ROCKET} and its effects.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"addEffect","comment_text":"Add another effect to this firework.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"The firework effect to add","type":"org.bukkit.FireworkEffect","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If effect is null"}]},{"name":"addEffects","comment_text":"Add several effects to this firework.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effects","comment_text":"The firework effects to add","type":"org.bukkit.FireworkEffect","type_dimension":"[]"}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If effects is null"}]},{"name":"addEffects","comment_text":"Add several firework effects to this firework.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effects","comment_text":"An iterable object whose iterator yields the desired\n     firework effects","type":"java.lang.Iterable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"If effects is null"}]},{"name":"getEffects","comment_text":"Get the effects in this firework.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEffectsSize","comment_text":"Get the number of effects in this firework.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"removeEffect","comment_text":"Remove an effect from this firework.","return_type":"void","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index of the effect to remove","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IndexOutOfBoundsException","comment_text":"If index {@literal < 0 or index >} {@link\n     #getEffectsSize()}"}]},{"name":"clearEffects","comment_text":"Remove all effects from this firework.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasEffects","comment_text":"Get whether this firework has any effects.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPower","comment_text":"Gets the approximate height the firework will fly.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPower","comment_text":"Sets the approximate power of the firework. Each level of power is half\n a second of flight time.","return_type":"void","return_type_dimension":"","parameters":[{"name":"power","comment_text":"the power of the firework, from 0-128","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if {@literal height<0 or height>128}"}]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.FireworkMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.FireworkEffectMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a meta that can store a single FireworkEffect. An example\n includes {@link Material#FIREWORK_STAR}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setEffect","comment_text":"Sets the firework effect for this meta.","return_type":"void","return_type_dimension":"","parameters":[{"name":"effect","comment_text":"the effect to set, or null to indicate none.","type":"org.bukkit.FireworkEffect","type_dimension":""}],"throws":[]},{"name":"hasEffect","comment_text":"Checks if this meta has an effect.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEffect","comment_text":"Gets the firework effect for this meta.","return_type":"org.bukkit.FireworkEffect","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.FireworkEffectMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.EnchantmentStorageMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"EnchantmentMeta is specific to items that can <i>store</i> enchantments, as\n opposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example\n of an item with enchantment storage.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasStoredEnchants","comment_text":"Checks for the existence of any stored enchantments.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasStoredEnchant","comment_text":"Checks for storage of the specified enchantment.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to check","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getStoredEnchantLevel","comment_text":"Checks for the level of the stored enchantment.","return_type":"int","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to check","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"getStoredEnchants","comment_text":"Gets a copy the stored enchantments in this ItemMeta.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addStoredEnchant","comment_text":"Stores the specified enchantment in this item meta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to store","type":"org.bukkit.enchantments.Enchantment","type_dimension":""},{"name":"level","comment_text":"Level for the enchantment","type":"int","type_dimension":""},{"name":"ignoreLevelRestriction","comment_text":"this indicates the enchantment should be\n     applied, ignoring the level limit","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removeStoredEnchant","comment_text":"Remove the specified stored enchantment from this item meta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"Enchantment to remove","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if enchantment is null"}]},{"name":"hasConflictingStoredEnchant","comment_text":"Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"ench","comment_text":"enchantment to test","type":"org.bukkit.enchantments.Enchantment","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.EnchantmentStorageMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.Damageable","interfaces":[],"superclass":"","comment_text":"Represents an item that has durability and can take damage.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasDamage","comment_text":"Checks to see if this item has damage","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDamage","comment_text":"Gets the damage","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDamage","comment_text":"Sets the damage","return_type":"void","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"item damage","type":"int","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.Damageable","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.BookMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"Represents a book ({@link Material#WRITABLE_BOOK} or {@link\n Material#WRITTEN_BOOK}) that can have a title, an author, and pages.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasTitle","comment_text":"Checks for the existence of a title in the book.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTitle","comment_text":"Gets the title of the book.\n <p>\n Plugins should check that hasTitle() returns true before calling this\n method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTitle","comment_text":"Sets the title of the book.\n <p>\n Limited to 16 characters. Removes title when given null.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"title","comment_text":"the title to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasAuthor","comment_text":"Checks for the existence of an author in the book.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAuthor","comment_text":"Gets the author of the book.\n <p>\n Plugins should check that hasAuthor() returns true before calling this\n method.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setAuthor","comment_text":"Sets the author of the book. Removes author when given null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"author","comment_text":"the author to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasGeneration","comment_text":"Checks for the existence of generation level in the book.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getGeneration","comment_text":"Gets the generation of the book.\n <p>\n Plugins should check that hasGeneration() returns true before calling\n this method.","return_type":"org.bukkit.inventory.meta.BookMeta.Generation","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setGeneration","comment_text":"Sets the generation of the book. Removes generation when given null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"generation","comment_text":"the generation to set","type":"org.bukkit.inventory.meta.BookMeta.Generation","type_dimension":""}],"throws":[]},{"name":"hasPages","comment_text":"Checks for the existence of pages in the book.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPage","comment_text":"Gets the specified page in the book. The given page must exist.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"page","comment_text":"the page number to get","type":"int","type_dimension":""}],"throws":[]},{"name":"setPage","comment_text":"Sets the specified page in the book. Pages of the book must be\n contiguous.\n <p>\n The data can be up to 256 characters in length, additional characters\n are truncated.","return_type":"void","return_type_dimension":"","parameters":[{"name":"page","comment_text":"the page number to set","type":"int","type_dimension":""},{"name":"data","comment_text":"the data to set for that page","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPages","comment_text":"Gets all the pages in the book.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPages","comment_text":"Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pages","comment_text":"A list of pages to set the book to use","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"setPages","comment_text":"Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pages","comment_text":"A list of strings, each being a page","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"addPage","comment_text":"Adds new pages to the end of the book. Up to a maximum of 50 pages with\n 256 characters per page.","return_type":"void","return_type_dimension":"","parameters":[{"name":"pages","comment_text":"A list of strings, each being a page","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"getPageCount","comment_text":"Gets the number of pages in the book.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.inventory.meta.BookMeta","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.BookMeta.Generation","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the generation (or level of copying) of a written book","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.inventory.meta.BookMeta.Generation","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.inventory.meta.BookMeta.Generation","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ORIGINAL","COPY_OF_ORIGINAL","COPY_OF_COPY","TATTERED"]},{"name":"org.bukkit.inventory.meta.BlockStateMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"hasBlockState","comment_text":"Returns whether the item has a block state currently\n attached to it.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockState","comment_text":"Returns the currently attached block state for this\n item or creates a new one if one doesn't exist.\n\n The state is a copy, it must be set back (or to another\n item) with {@link #setBlockState(org.bukkit.block.BlockState)}","return_type":"org.bukkit.block.BlockState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBlockState","comment_text":"Attaches a copy of the passed block state to the item.","return_type":"void","return_type_dimension":"","parameters":[{"name":"blockState","comment_text":"the block state to attach to the block.","type":"org.bukkit.block.BlockState","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.inventory.meta.BannerMeta","interfaces":["org.bukkit.inventory.meta.ItemMeta"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBaseColor","comment_text":"Returns the base color for this banner","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBaseColor","comment_text":"Sets the base color for this banner","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"the base color","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"getPatterns","comment_text":"Returns a list of patterns on this banner","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPatterns","comment_text":"Sets the patterns used on this banner","return_type":"void","return_type_dimension":"","parameters":[{"name":"patterns","comment_text":"the new list of patterns","type":"java.util.List","type_dimension":""}],"throws":[]},{"name":"addPattern","comment_text":"Adds a new pattern on top of the existing\n patterns","return_type":"void","return_type_dimension":"","parameters":[{"name":"pattern","comment_text":"the new pattern to add","type":"org.bukkit.block.banner.Pattern","type_dimension":""}],"throws":[]},{"name":"getPattern","comment_text":"Returns the pattern at the specified index","return_type":"org.bukkit.block.banner.Pattern","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""}],"throws":[]},{"name":"removePattern","comment_text":"Removes the pattern at the specified index","return_type":"org.bukkit.block.banner.Pattern","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""}],"throws":[]},{"name":"setPattern","comment_text":"Sets the pattern at the specified index","return_type":"void","return_type_dimension":"","parameters":[{"name":"i","comment_text":"the index","type":"int","type_dimension":""},{"name":"pattern","comment_text":"the new pattern","type":"org.bukkit.block.banner.Pattern","type_dimension":""}],"throws":[]},{"name":"numberOfPatterns","comment_text":"Returns the number of patterns on this\n banner","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.loot.LootTables","interfaces":["org.bukkit.Keyed"],"superclass":"java.lang.Enum","comment_text":"This enum holds a list of all known {@link LootTable}s offered by Mojang.\n This list is not guaranteed to be accurate in future versions.\n\n See the\n <a href=\"https://minecraft.gamepedia.com/Loot_table#List_of_loot_tables\">\n Minecraft Wiki</a> for more information on loot tables.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.loot.LootTables","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.loot.LootTables","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getKey","comment_text":"","return_type":"org.bukkit.NamespacedKey","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLootTable","comment_text":"Get the {@link LootTable} corresponding to this constant. This is\n equivalent to calling {@code Bukkit.getLootTable(this.getKey());}.","return_type":"org.bukkit.loot.LootTable","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["EMPTY","ABANDONED_MINESHAFT","BURIED_TREASURE","DESERT_PYRAMID","END_CITY_TREASURE","IGLOO_CHEST","JUNGLE_TEMPLE","JUNGLE_TEMPLE_DISPENSER","NETHER_BRIDGE","SHIPWRECK_MAP","SHIPWRECK_SUPPLY","SHIPWRECK_TREASURE","SIMPLE_DUNGEON","SPAWN_BONUS_CHEST","STRONGHOLD_CORRIDOR","STRONGHOLD_CROSSING","STRONGHOLD_LIBRARY","UNDERWATER_RUIN_BIG","UNDERWATER_RUIN_SMALL","VILLAGE_BLACKSMITH","WOODLAND_MANSION","BAT","BLAZE","CAVE_SPIDER","CHICKEN","COD","COW","CREEPER","DOLPHIN","DONKEY","DROWNED","ELDER_GUARDIAN","ENDERMAN","ENDERMITE","ENDER_DRAGON","EVOKER","GHAST","GIANT","GUARDIAN","HORSE","HUSK","IRON_GOLEM","LLAMA","MAGMA_CUBE","MULE","MUSHROOM_COW","OCELOT","PARROT","PHANTOM","PIG","POLAR_BEAR","PUFFERFISH","RABBIT","SALMON","SHULKER","SILVERFISH","SKELETON","SKELETON_HORSE","SLIME","SNOW_GOLEM","SPIDER","SQUID","STRAY","TROPICAL_FISH","TURTLE","VEX","VILLAGER","VINDICATOR","WITCH","WITHER_SKELETON","WOLF","ZOMBIE","ZOMBIE_HORSE","ZOMBIE_PIGMAN","ZOMBIE_VILLAGER","FISHING","FISHING_FISH","FISHING_JUNK","FISHING_TREASURE","SHEEP","SHEEP_BLACK","SHEEP_BLUE","SHEEP_BROWN","SHEEP_CYAN","SHEEP_GRAY","SHEEP_GREEN","SHEEP_LIGHT_BLUE","SHEEP_LIME","SHEEP_MAGENTA","SHEEP_ORANGE","SHEEP_PINK","SHEEP_PURPLE","SHEEP_RED","SHEEP_WHITE","SHEEP_YELLOW"]},{"name":"org.bukkit.loot.LootTable","interfaces":["org.bukkit.Keyed"],"superclass":"","comment_text":"LootTables are technical files that represent what items should be in\n naturally generated containers, what items should be dropped when killing a\n mob, or what items can be fished.\n\n See the <a href=\"https://minecraft.gamepedia.com/Loot_table\">\n Minecraft Wiki</a> for more information.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"populateLoot","comment_text":"Returns a mutable list of loot generated by this LootTable.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"random","comment_text":"the random instance to use to generate loot","type":"java.util.Random","type_dimension":""},{"name":"context","comment_text":"context within to populate loot","type":"org.bukkit.loot.LootContext","type_dimension":""}],"throws":[]},{"name":"fillInventory","comment_text":"Attempt to fill an inventory with this LootTable's loot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"inventory","comment_text":"the inventory to fill","type":"org.bukkit.inventory.Inventory","type_dimension":""},{"name":"random","comment_text":"the random instance to use to generate loot","type":"java.util.Random","type_dimension":""},{"name":"context","comment_text":"context within to populate loot","type":"org.bukkit.loot.LootContext","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.loot.LootContext","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents additional information a {@link LootTable} can use to modify it's\n generated loot.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"DEFAULT_LOOT_MODIFIER","comment_text":"","type":"int","type_dimension":""}],"methods":[{"name":"getLocation","comment_text":"The {@link Location} to store where the loot will be generated.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLuck","comment_text":"Represents the {@link org.bukkit.potion.PotionEffectType#LUCK} that an\n entity can have. The higher the value the better chance of receiving more\n loot.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLootingModifier","comment_text":"Represents the\n {@link org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS} the\n {@link #getKiller()} entity has on their equipped item.\n\n This value is only set via\n {@link LootContext.Builder#lootingModifier(int)}. If not set, the\n {@link #getKiller()} entity's looting level will be used instead.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLootedEntity","comment_text":"Get the {@link Entity} that was killed. Can be null.","return_type":"org.bukkit.entity.Entity","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getKiller","comment_text":"Get the {@link HumanEntity} who killed the {@link #getLootedEntity()}.\n Can be null.","return_type":"org.bukkit.entity.HumanEntity","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.loot.LootContext.Builder","interfaces":[],"superclass":"java.lang.Object","comment_text":"Utility class to make building {@link LootContext} easier. The only\n required argument is {@link Location} with a valid (non-null)\n {@link org.bukkit.World}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Builder","comment_text":"Creates a new LootContext.Builder instance to facilitate easy\n creation of {@link LootContext}s.","parameters":[{"name":"location","comment_text":"the location the LootContext should use","type":"org.bukkit.Location","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"luck","comment_text":"Set how much luck to have when generating loot.","return_type":"org.bukkit.loot.LootContext.Builder","return_type_dimension":"","parameters":[{"name":"luck","comment_text":"the luck level","type":"float","type_dimension":""}],"throws":[]},{"name":"lootingModifier","comment_text":"Set the {@link org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS}\n level equivalent to use when generating loot. Values less than or\n equal to 0 will force the {@link LootTable} to only return a single\n {@link org.bukkit.inventory.ItemStack} per pool.","return_type":"org.bukkit.loot.LootContext.Builder","return_type_dimension":"","parameters":[{"name":"modifier","comment_text":"the looting level modifier","type":"int","type_dimension":""}],"throws":[]},{"name":"lootedEntity","comment_text":"The entity that was killed.","return_type":"org.bukkit.loot.LootContext.Builder","return_type_dimension":"","parameters":[{"name":"lootedEntity","comment_text":"the looted entity","type":"org.bukkit.entity.Entity","type_dimension":""}],"throws":[]},{"name":"killer","comment_text":"Set the {@link org.bukkit.entity.HumanEntity} that killed\n {@link #getLootedEntity()}. This entity will be used to get the\n looting level if {@link #lootingModifier(int)} is not set.","return_type":"org.bukkit.loot.LootContext.Builder","return_type_dimension":"","parameters":[{"name":"killer","comment_text":"the killer entity","type":"org.bukkit.entity.HumanEntity","type_dimension":""}],"throws":[]},{"name":"build","comment_text":"Create a new {@link LootContext} instance using the supplied\n parameters.","return_type":"org.bukkit.loot.LootContext","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.loot.Lootable","interfaces":[],"superclass":"","comment_text":"Represents a {@link org.bukkit.block.Container} or a\n {@link org.bukkit.entity.Mob} that can have a loot table.\n <br>\n Container loot will only generate upon opening, and only when the container\n is <i>first</i> opened.\n <br>\n Entities will only generate loot upon death.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setLootTable","comment_text":"Set the loot table for a container or entity.\n <br>\n To remove a loot table use null. Do not use {@link LootTables#EMPTY} to\n clear a LootTable.","return_type":"void","return_type_dimension":"","parameters":[{"name":"table","comment_text":"the Loot Table this {@link org.bukkit.block.Container} or\n {@link org.bukkit.entity.Mob} will have.","type":"org.bukkit.loot.LootTable","type_dimension":""}],"throws":[]},{"name":"getLootTable","comment_text":"Gets the Loot Table attached to this block or entity.\n <br>\n\n If an block/entity does not have a loot table, this will return null, NOT\n an empty loot table.","return_type":"org.bukkit.loot.LootTable","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSeed","comment_text":"Set the seed used when this Loot Table generates loot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"seed","comment_text":"the seed to used to generate loot. Default is 0.","type":"long","type_dimension":""}],"throws":[]},{"name":"getSeed","comment_text":"Get the Loot Table's seed.\n <br>\n The seed is used when generating loot.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MinecraftFont","interfaces":[],"superclass":"org.bukkit.map.MapFont","comment_text":"Represents the built-in Minecraft font.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MinecraftFont","comment_text":"Initialize a new MinecraftFont.","parameters":[],"throws":[]}],"fields":[{"name":"Font","comment_text":"A static non-malleable MinecraftFont.","type":"org.bukkit.map.MinecraftFont","type_dimension":""}],"methods":[],"enumConstants":[]},{"name":"org.bukkit.map.MapView","interfaces":[],"superclass":"","comment_text":"Represents a map item.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getId","comment_text":"Get the ID of this map item. Corresponds to the damage value of a map\n in an inventory.","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isVirtual","comment_text":"Check whether this map is virtual. A map is virtual if its lowermost\n MapRenderer is plugin-provided.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScale","comment_text":"Get the scale of this map.","return_type":"org.bukkit.map.MapView.Scale","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setScale","comment_text":"Set the scale of this map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"The scale to set.","type":"org.bukkit.map.MapView.Scale","type_dimension":""}],"throws":[]},{"name":"getCenterX","comment_text":"Get the center X position of this map.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCenterZ","comment_text":"Get the center Z position of this map.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCenterX","comment_text":"Set the center X position of this map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The center X position.","type":"int","type_dimension":""}],"throws":[]},{"name":"setCenterZ","comment_text":"Set the center Z position of this map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"z","comment_text":"The center Z position.","type":"int","type_dimension":""}],"throws":[]},{"name":"getWorld","comment_text":"Get the world that this map is associated with. Primarily used by the\n internal renderer, but may be used by external renderers. May return\n null if the world the map is associated with is not loaded.","return_type":"org.bukkit.World","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWorld","comment_text":"Set the world that this map is associated with. The world is used by\n the internal renderer, and may also be used by external renderers.","return_type":"void","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The World to associate this map with.","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"getRenderers","comment_text":"Get a list of MapRenderers currently in effect.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addRenderer","comment_text":"Add a renderer to this map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"renderer","comment_text":"The MapRenderer to add.","type":"org.bukkit.map.MapRenderer","type_dimension":""}],"throws":[]},{"name":"removeRenderer","comment_text":"Remove a renderer from this map.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"renderer","comment_text":"The MapRenderer to remove.","type":"org.bukkit.map.MapRenderer","type_dimension":""}],"throws":[]},{"name":"isUnlimitedTracking","comment_text":"Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map's range.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setUnlimitedTracking","comment_text":"Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map's range.","return_type":"void","return_type_dimension":"","parameters":[{"name":"unlimited","comment_text":"tracking state","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapView.Scale","interfaces":[],"superclass":"java.lang.Enum","comment_text":"An enum representing all possible scales a map can be set to.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.map.MapView.Scale","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.map.MapView.Scale","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"valueOf","comment_text":"Get the scale given the raw value.","return_type":"org.bukkit.map.MapView.Scale","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The raw scale","type":"byte","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"Get the raw value of this scale level.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["CLOSEST","CLOSE","NORMAL","FAR","FARTHEST"]},{"name":"org.bukkit.map.MapRenderer","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a renderer for a map.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MapRenderer","comment_text":"Initialize the map renderer base to be non-contextual. See {@link\n #isContextual()}.","parameters":[],"throws":[]},{"name":"MapRenderer","comment_text":"Initialize the map renderer base with the given contextual status.","parameters":[{"name":"contextual","comment_text":"Whether the renderer is contextual. See {@link\n     #isContextual()}.","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isContextual","comment_text":"Get whether the renderer is contextual, i.e. has different canvases for\n different players.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"initialize","comment_text":"Initialize this MapRenderer for the given map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"map","comment_text":"The MapView being initialized.","type":"org.bukkit.map.MapView","type_dimension":""}],"throws":[]},{"name":"render","comment_text":"Render to the given map.","return_type":"void","return_type_dimension":"","parameters":[{"name":"map","comment_text":"The MapView being rendered to.","type":"org.bukkit.map.MapView","type_dimension":""},{"name":"canvas","comment_text":"The canvas to use for rendering.","type":"org.bukkit.map.MapCanvas","type_dimension":""},{"name":"player","comment_text":"The player who triggered the rendering.","type":"org.bukkit.entity.Player","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapPalette","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents the palette that map items use.\n <p>\n These fields are hee base color ranges. Each entry corresponds to four\n colors of varying shades with values entry to entry + 3.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"TRANSPARENT","comment_text":"","type":"byte","type_dimension":""},{"name":"LIGHT_GREEN","comment_text":"","type":"byte","type_dimension":""},{"name":"LIGHT_BROWN","comment_text":"","type":"byte","type_dimension":""},{"name":"GRAY_1","comment_text":"","type":"byte","type_dimension":""},{"name":"RED","comment_text":"","type":"byte","type_dimension":""},{"name":"PALE_BLUE","comment_text":"","type":"byte","type_dimension":""},{"name":"GRAY_2","comment_text":"","type":"byte","type_dimension":""},{"name":"DARK_GREEN","comment_text":"","type":"byte","type_dimension":""},{"name":"WHITE","comment_text":"","type":"byte","type_dimension":""},{"name":"LIGHT_GRAY","comment_text":"","type":"byte","type_dimension":""},{"name":"BROWN","comment_text":"","type":"byte","type_dimension":""},{"name":"DARK_GRAY","comment_text":"","type":"byte","type_dimension":""},{"name":"BLUE","comment_text":"","type":"byte","type_dimension":""},{"name":"DARK_BROWN","comment_text":"","type":"byte","type_dimension":""}],"methods":[{"name":"resizeImage","comment_text":"Resize an image to 128x128.","return_type":"java.awt.image.BufferedImage","return_type_dimension":"","parameters":[{"name":"image","comment_text":"The image to resize.","type":"java.awt.Image","type_dimension":""}],"throws":[]},{"name":"imageToBytes","comment_text":"Convert an Image to a byte[] using the palette.","return_type":"byte","return_type_dimension":"[]","parameters":[{"name":"image","comment_text":"The image to convert.","type":"java.awt.Image","type_dimension":""}],"throws":[]},{"name":"matchColor","comment_text":"Get the index of the closest matching color in the palette to the given\n color.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"r","comment_text":"The red component of the color.","type":"int","type_dimension":""},{"name":"g","comment_text":"The green component of the color.","type":"int","type_dimension":""},{"name":"b","comment_text":"The blue component of the color.","type":"int","type_dimension":""}],"throws":[]},{"name":"matchColor","comment_text":"Get the index of the closest matching color in the palette to the given\n color.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"color","comment_text":"The Color to match.","type":"java.awt.Color","type_dimension":""}],"throws":[]},{"name":"getColor","comment_text":"Get the value of the given color in the palette.","return_type":"java.awt.Color","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index in the palette.","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapFont","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a bitmap font drawable to a map.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MapFont","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"malleable","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"setChar","comment_text":"Set the sprite for a given character.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ch","comment_text":"The character to set the sprite for.","type":"char","type_dimension":""},{"name":"sprite","comment_text":"The CharacterSprite to set.","type":"org.bukkit.map.MapFont.CharacterSprite","type_dimension":""}],"throws":[]},{"name":"getChar","comment_text":"Get the sprite for a given character.","return_type":"org.bukkit.map.MapFont.CharacterSprite","return_type_dimension":"","parameters":[{"name":"ch","comment_text":"The character to get the sprite for.","type":"char","type_dimension":""}],"throws":[]},{"name":"getWidth","comment_text":"Get the width of the given text as it would be rendered using this\n font.","return_type":"int","return_type_dimension":"","parameters":[{"name":"text","comment_text":"The text.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getHeight","comment_text":"Get the height of this font.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isValid","comment_text":"Check whether the given text is valid.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"text","comment_text":"The text.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapFont.CharacterSprite","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents the graphics for a single character in a MapFont.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CharacterSprite","comment_text":"","parameters":[{"name":"width","comment_text":"","type":"int","type_dimension":""},{"name":"height","comment_text":"","type":"int","type_dimension":""},{"name":"data","comment_text":"","type":"boolean","type_dimension":"[]"}],"throws":[]}],"fields":[],"methods":[{"name":"get","comment_text":"Get the value of a pixel of the character.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"row","comment_text":"The row, in the range [0,8).","type":"int","type_dimension":""},{"name":"col","comment_text":"The column, in the range [0,8).","type":"int","type_dimension":""}],"throws":[]},{"name":"getWidth","comment_text":"Get the width of the character sprite.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHeight","comment_text":"Get the height of the character sprite.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapCursorCollection","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a\n MapCursorCollection is linked to a specific {@link MapRenderer}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MapCursorCollection","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"size","comment_text":"Get the amount of cursors in this collection.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCursor","comment_text":"Get a cursor from this collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"index","comment_text":"The index of the cursor.","type":"int","type_dimension":""}],"throws":[]},{"name":"removeCursor","comment_text":"Remove a cursor from the collection.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"cursor","comment_text":"The MapCursor to remove.","type":"org.bukkit.map.MapCursor","type_dimension":""}],"throws":[]},{"name":"addCursor","comment_text":"Add a cursor to the collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"cursor","comment_text":"The MapCursor to add.","type":"org.bukkit.map.MapCursor","type_dimension":""}],"throws":[]},{"name":"addCursor","comment_text":"Add a cursor to the collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""}],"throws":[]},{"name":"addCursor","comment_text":"Add a cursor to the collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""}],"throws":[]},{"name":"addCursor","comment_text":"Add a cursor to the collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"addCursor","comment_text":"Add a cursor to the collection.","return_type":"org.bukkit.map.MapCursor","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"int","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible.","type":"boolean","type_dimension":""},{"name":"caption","comment_text":"banner caption","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapCursor","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a cursor on a map.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MapCursor","comment_text":"Initialize the map cursor.","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible by default.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"MapCursor","comment_text":"Initialize the map cursor.","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"org.bukkit.map.MapCursor.Type","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible by default.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"MapCursor","comment_text":"Initialize the map cursor.","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible by default.","type":"boolean","type_dimension":""},{"name":"caption","comment_text":"cursor caption","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"MapCursor","comment_text":"Initialize the map cursor.","parameters":[{"name":"x","comment_text":"The x coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from -128 to 127.","type":"byte","type_dimension":""},{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""},{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"org.bukkit.map.MapCursor.Type","type_dimension":""},{"name":"visible","comment_text":"Whether the cursor is visible by default.","type":"boolean","type_dimension":""},{"name":"caption","comment_text":"cursor caption","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getX","comment_text":"Get the X position of this cursor.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"Get the Y position of this cursor.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDirection","comment_text":"Get the direction of this cursor.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Get the type of this cursor.","return_type":"org.bukkit.map.MapCursor.Type","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getRawType","comment_text":"Get the type of this cursor.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isVisible","comment_text":"Get the visibility status of this cursor.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setX","comment_text":"Set the X position of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The X coordinate.","type":"byte","type_dimension":""}],"throws":[]},{"name":"setY","comment_text":"Set the Y position of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"y","comment_text":"The Y coordinate.","type":"byte","type_dimension":""}],"throws":[]},{"name":"setDirection","comment_text":"Set the direction of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"direction","comment_text":"The facing of the cursor, from 0 to 15.","type":"byte","type_dimension":""}],"throws":[]},{"name":"setType","comment_text":"Set the type of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"org.bukkit.map.MapCursor.Type","type_dimension":""}],"throws":[]},{"name":"setRawType","comment_text":"Set the type of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The type (color/style) of the map cursor.","type":"byte","type_dimension":""}],"throws":[]},{"name":"setVisible","comment_text":"Set the visibility status of this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"visible","comment_text":"True if visible.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getCaption","comment_text":"Gets the caption on this cursor.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCaption","comment_text":"Sets the caption on this cursor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"caption","comment_text":"new caption","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.map.MapCursor.Type","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the standard types of map cursors. More may be made\n available by resource packs - the value is used by the client as an\n index in the file './misc/mapicons.png' from minecraft.jar or from a\n resource pack.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.map.MapCursor.Type","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.map.MapCursor.Type","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"byValue","comment_text":"","return_type":"org.bukkit.map.MapCursor.Type","return_type_dimension":"","parameters":[{"name":"value","comment_text":"the value","type":"byte","type_dimension":""}],"throws":[]}],"enumConstants":["WHITE_POINTER","GREEN_POINTER","RED_POINTER","BLUE_POINTER","WHITE_CROSS","RED_MARKER","WHITE_CIRCLE","SMALL_WHITE_CIRCLE","MANSION","TEMPLE","BANNER_WHITE","BANNER_ORANGE","BANNER_MAGENTA","BANNER_LIGHT_BLUE","BANNER_YELLOW","BANNER_LIME","BANNER_PINK","BANNER_GRAY","BANNER_LIGHT_GRAY","BANNER_CYAN","BANNER_PURPLE","BANNER_BLUE","BANNER_BROWN","BANNER_GREEN","BANNER_RED","BANNER_BLACK","RED_X"]},{"name":"org.bukkit.map.MapCanvas","interfaces":[],"superclass":"","comment_text":"Represents a canvas for drawing to a map. Each canvas is associated with a\n specific {@link MapRenderer} and represents that renderer's layer on the\n map.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMapView","comment_text":"Get the map this canvas is attached to.","return_type":"org.bukkit.map.MapView","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCursors","comment_text":"Get the cursor collection associated with this canvas.","return_type":"org.bukkit.map.MapCursorCollection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setCursors","comment_text":"Set the cursor collection associated with this canvas. This does not\n usually need to be called since a MapCursorCollection is already\n provided.","return_type":"void","return_type_dimension":"","parameters":[{"name":"cursors","comment_text":"The MapCursorCollection to associate with this canvas.","type":"org.bukkit.map.MapCursorCollection","type_dimension":""}],"throws":[]},{"name":"setPixel","comment_text":"Draw a pixel to the canvas.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from 0 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from 0 to 127.","type":"int","type_dimension":""},{"name":"color","comment_text":"The color. See {@link MapPalette}.","type":"byte","type_dimension":""}],"throws":[]},{"name":"getPixel","comment_text":"Get a pixel from the canvas.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from 0 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from 0 to 127.","type":"int","type_dimension":""}],"throws":[]},{"name":"getBasePixel","comment_text":"Get a pixel from the layers below this canvas.","return_type":"byte","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate, from 0 to 127.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate, from 0 to 127.","type":"int","type_dimension":""}],"throws":[]},{"name":"drawImage","comment_text":"Draw an image to the map. The image will be clipped if necessary.","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The x coordinate of the image.","type":"int","type_dimension":""},{"name":"y","comment_text":"The y coordinate of the image.","type":"int","type_dimension":""},{"name":"image","comment_text":"The Image to draw.","type":"java.awt.Image","type_dimension":""}],"throws":[]},{"name":"drawText","comment_text":"Render text to the map using fancy formatting. Newline (\\n) characters\n will move down one line and return to the original column, and the text\n color can be changed using sequences such as \"Â§12;\", replacing 12 with\n the palette index of the color (see {@link MapPalette}).","return_type":"void","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The column to start rendering on.","type":"int","type_dimension":""},{"name":"y","comment_text":"The row to start rendering on.","type":"int","type_dimension":""},{"name":"font","comment_text":"The font to use.","type":"org.bukkit.map.MapFont","type_dimension":""},{"name":"text","comment_text":"The formatted text to render.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Wool","interfaces":["org.bukkit.material.Colorable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a Wool/Cloth block","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Wool","comment_text":"","parameters":[],"throws":[]},{"name":"Wool","comment_text":"","parameters":[{"name":"color","comment_text":"","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"Wool","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Wool","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the current color of this dye","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this dye","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"New color of this dye","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Wool","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.WoodenStep","interfaces":[],"superclass":"org.bukkit.material.Wood","comment_text":"Represents the different types of wooden steps.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material"],"constructors":[{"name":"WoodenStep","comment_text":"Constructs a wooden step.","parameters":[],"throws":[]},{"name":"WoodenStep","comment_text":"Constructs a wooden step of the given tree species.","parameters":[{"name":"species","comment_text":"the species of the wooden step","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"WoodenStep","comment_text":"Constructs a wooden step of the given type and tree species, either\n inverted or not.","parameters":[{"name":"species","comment_text":"the species of the wooden step","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"inv","comment_text":"true the step is at the top of the block","type":"boolean","type_dimension":""}],"throws":[]},{"name":"WoodenStep","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_TYPE","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"DEFAULT_INVERTED","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"isInverted","comment_text":"Test if step is inverted","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInverted","comment_text":"Set step inverted state","return_type":"void","return_type_dimension":"","parameters":[{"name":"inv","comment_text":"- true if step is inverted (top half), false if step is normal\n (bottom half)","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.WoodenStep","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Wood","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents wood blocks of different species.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Wood","comment_text":"Constructs a wood block.","parameters":[],"throws":[]},{"name":"Wood","comment_text":"Constructs a wood block of the given tree species.","parameters":[{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Wood","comment_text":"Constructs a wood block of the given type.","parameters":[{"name":"type","comment_text":"the type of wood block","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Wood","comment_text":"Constructs a wood block of the given type and tree species.","parameters":[{"name":"type","comment_text":"the type of wood block","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Wood","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_TYPE","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"DEFAULT_SPECIES","comment_text":"","type":"org.bukkit.TreeSpecies","type_dimension":""}],"methods":[{"name":"getSpecies","comment_text":"Gets the current species of this wood block","return_type":"org.bukkit.TreeSpecies","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpecies","comment_text":"Sets the species of this wood block","return_type":"void","return_type_dimension":"","parameters":[{"name":"species","comment_text":"New species of this wood block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Wood","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Vine","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a vine","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Vine","comment_text":"","parameters":[],"throws":[]},{"name":"Vine","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"Vine","comment_text":"","parameters":[{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"Vine","comment_text":"","parameters":[{"name":"faces","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":"[]"}],"throws":[]},{"name":"Vine","comment_text":"","parameters":[{"name":"faces","comment_text":"","type":"java.util.EnumSet","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isOnFace","comment_text":"Check if the vine is attached to the specified face of an adjacent\n block. You can check two faces at once by passing e.g. {@link\n BlockFace#NORTH_EAST}.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The face to check.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"putOnFace","comment_text":"Attach the vine to the specified face of an adjacent block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The face to attach.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"removeFromFace","comment_text":"Detach the vine from the specified face of an adjacent block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The face to detach.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Vine","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.TripwireHook","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"Represents the tripwire hook","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TripwireHook","comment_text":"","parameters":[],"throws":[]},{"name":"TripwireHook","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"TripwireHook","comment_text":"","parameters":[{"name":"dir","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isConnected","comment_text":"Test if tripwire is connected","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setConnected","comment_text":"Set tripwire connection state","return_type":"void","return_type_dimension":"","parameters":[{"name":"connected","comment_text":"- true if connected, false if not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isActivated","comment_text":"Test if hook is currently activated","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setActivated","comment_text":"Set hook activated state","return_type":"void","return_type_dimension":"","parameters":[{"name":"act","comment_text":"- true if activated, false if not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPowered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.TripwireHook","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Tripwire","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the tripwire","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Tripwire","comment_text":"","parameters":[],"throws":[]},{"name":"Tripwire","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isActivated","comment_text":"Test if tripwire is currently activated","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setActivated","comment_text":"Set tripwire activated state","return_type":"void","return_type_dimension":"","parameters":[{"name":"act","comment_text":"- true if activated, false if not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isObjectTriggering","comment_text":"Test if object triggering this tripwire directly","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setObjectTriggering","comment_text":"Set object triggering state for this tripwire","return_type":"void","return_type_dimension":"","parameters":[{"name":"trig","comment_text":"- true if object activating tripwire, false if not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Tripwire","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Tree","interfaces":[],"superclass":"org.bukkit.material.Wood","comment_text":"Represents the different types of Tree block that face a direction.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Tree","comment_text":"Constructs a tree block.","parameters":[],"throws":[]},{"name":"Tree","comment_text":"Constructs a tree block of the given tree species.","parameters":[{"name":"species","comment_text":"the species of the tree block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Tree","comment_text":"Constructs a tree block of the given tree species, and facing the given\n direction.","parameters":[{"name":"species","comment_text":"the species of the tree block","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"dir","comment_text":"the direction the tree block is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Tree","comment_text":"Constructs a tree block of the given type.","parameters":[{"name":"type","comment_text":"the type of tree block","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Tree","comment_text":"Constructs a tree block of the given type and tree species.","parameters":[{"name":"type","comment_text":"the type of tree block","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the tree block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Tree","comment_text":"Constructs a tree block of the given type and tree species, and facing\n the given direction.","parameters":[{"name":"type","comment_text":"the type of tree block","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the tree block","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"dir","comment_text":"the direction the tree block is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Tree","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_TYPE","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"DEFAULT_DIRECTION","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"methods":[{"name":"getDirection","comment_text":"Get direction of the log","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDirection","comment_text":"Set direction of the log","return_type":"void","return_type_dimension":"","parameters":[{"name":"dir","comment_text":"- direction of end of log (BlockFace.SELF for no direction)","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Tree","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.TrapDoor","interfaces":["org.bukkit.material.Openable"],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"Represents a trap door","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TrapDoor","comment_text":"","parameters":[],"throws":[]},{"name":"TrapDoor","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"TrapDoor","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isOpen","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOpen","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"isOpen","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isInverted","comment_text":"Test if trapdoor is inverted","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInverted","comment_text":"Set trapdoor inverted state","return_type":"void","return_type_dimension":"","parameters":[{"name":"inv","comment_text":"- true if inverted (top half), false if normal (bottom half)","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.TrapDoor","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Torch","interfaces":[],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"MaterialData for torches","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Torch","comment_text":"","parameters":[],"throws":[]},{"name":"Torch","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Torch","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Torch","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.TexturedMaterial","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents textured materials like steps and smooth bricks","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TexturedMaterial","comment_text":"","parameters":[{"name":"m","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"TexturedMaterial","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTextures","comment_text":"Retrieve a list of possible textures. The first element of the list\n will be used as a default.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaterial","comment_text":"Gets the current Material this block is made of","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setMaterial","comment_text":"Sets the material this block is made of","return_type":"void","return_type_dimension":"","parameters":[{"name":"material","comment_text":"New material of this block","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"getTextureIndex","comment_text":"Get material index from data","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTextureIndex","comment_text":"Set material index","return_type":"void","return_type_dimension":"","parameters":[{"name":"idx","comment_text":"- index of data in textures list","type":"int","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.TexturedMaterial","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Step","interfaces":[],"superclass":"org.bukkit.material.TexturedMaterial","comment_text":"Represents the different types of steps.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Step","comment_text":"","parameters":[],"throws":[]},{"name":"Step","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Step","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTextures","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInverted","comment_text":"Test if step is inverted","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInverted","comment_text":"Set step inverted state","return_type":"void","return_type_dimension":"","parameters":[{"name":"inv","comment_text":"- true if step is inverted (top half), false if step is\n     normal (bottom half)","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getTextureIndex","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTextureIndex","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"idx","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Step","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Stairs","interfaces":["org.bukkit.material.Directional"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents stairs.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Stairs","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Stairs","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAscendingDirection","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDescendingDirection","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Set the direction the stair part of the block is facing","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInverted","comment_text":"Test if step is inverted","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setInverted","comment_text":"Set step inverted state","return_type":"void","return_type_dimension":"","parameters":[{"name":"inv","comment_text":"- true if step is inverted (top half), false if step is\n     normal (bottom half)","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Stairs","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.SpawnEgg","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a spawn egg that can be used to spawn mobs","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SpawnEgg","comment_text":"","parameters":[],"throws":[]},{"name":"SpawnEgg","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"SpawnEgg","comment_text":"","parameters":[{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"SpawnEgg","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSpawnedType","comment_text":"Get the type of entity this egg will spawn.","return_type":"org.bukkit.entity.EntityType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpawnedType","comment_text":"Set the type of entity this egg will spawn.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The entity type.","type":"org.bukkit.entity.EntityType","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.SpawnEgg","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.SmoothBrick","interfaces":[],"superclass":"org.bukkit.material.TexturedMaterial","comment_text":"Represents the different types of smooth bricks.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SmoothBrick","comment_text":"","parameters":[],"throws":[]},{"name":"SmoothBrick","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"SmoothBrick","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTextures","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.SmoothBrick","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Skull","interfaces":["org.bukkit.material.Directional"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a skull.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Skull","comment_text":"","parameters":[],"throws":[]},{"name":"Skull","comment_text":"Instantiate a skull facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the skull's face is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Skull","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Skull","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Skull","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.SimpleAttachableMaterialData","interfaces":["org.bukkit.material.Attachable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Simple utility class for attachable MaterialData subclasses","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimpleAttachableMaterialData","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"SimpleAttachableMaterialData","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"SimpleAttachableMaterialData","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.SimpleAttachableMaterialData","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Sign","interfaces":["org.bukkit.material.Attachable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"MaterialData for signs","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Sign","comment_text":"","parameters":[],"throws":[]},{"name":"Sign","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Sign","comment_text":"","parameters":[{"name":"type","comment_text":"the raw type id","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isWallSign","comment_text":"Check if this sign is attached to a wall","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFacing","comment_text":"Gets the direction that this sign is currently facing","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Sign","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Sapling","interfaces":[],"superclass":"org.bukkit.material.Wood","comment_text":"Represents the different types of Tree block that face a direction.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material"],"constructors":[{"name":"Sapling","comment_text":"Constructs a sapling.","parameters":[],"throws":[]},{"name":"Sapling","comment_text":"Constructs a sapling of the given tree species.","parameters":[{"name":"species","comment_text":"the species of the sapling","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Sapling","comment_text":"Constructs a sapling of the given tree species and if is it instant\n growable","parameters":[{"name":"species","comment_text":"the species of the tree block","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"isInstantGrowable","comment_text":"true if the Sapling should grow when next ticked with bonemeal","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Sapling","comment_text":"Constructs a sapling of the given type.","parameters":[{"name":"type","comment_text":"the type of tree block","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Sapling","comment_text":"Constructs a sapling of the given type and tree species.","parameters":[{"name":"type","comment_text":"the type of sapling","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the sapling","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Sapling","comment_text":"Constructs a sapling of the given type and tree species and if is it\n instant growable","parameters":[{"name":"type","comment_text":"the type of sapling","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the sapling","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"isInstantGrowable","comment_text":"true if the Sapling should grow when next ticked\n with bonemeal","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Sapling","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isInstantGrowable","comment_text":"Checks if the Sapling would grow when next ticked with bonemeal","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setIsInstantGrowable","comment_text":"Set whether this sapling will grow when next ticked with bonemeal","return_type":"void","return_type_dimension":"","parameters":[{"name":"isInstantGrowable","comment_text":"true if the Sapling should grow when next ticked\n with bonemeal","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Sapling","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Sandstone","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the different types of sandstone.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Sandstone","comment_text":"","parameters":[],"throws":[]},{"name":"Sandstone","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.SandstoneType","type_dimension":""}],"throws":[]},{"name":"Sandstone","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Sandstone","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the current type of this sandstone","return_type":"org.bukkit.SandstoneType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the type of this sandstone","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"New type of this sandstone","type":"org.bukkit.SandstoneType","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Sandstone","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.RedstoneWire","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents redstone wire","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RedstoneWire","comment_text":"","parameters":[],"throws":[]},{"name":"RedstoneWire","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"RedstoneWire","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.RedstoneWire","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.RedstoneTorch","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.Torch","comment_text":"Represents a redstone torch","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RedstoneTorch","comment_text":"","parameters":[],"throws":[]},{"name":"RedstoneTorch","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"RedstoneTorch","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.RedstoneTorch","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Redstone","interfaces":[],"superclass":"","comment_text":"Indicated a Material that may carry or create a Redstone current","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Rails","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents minecart rails.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Rails","comment_text":"","parameters":[],"throws":[]},{"name":"Rails","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Rails","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isOnSlope","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCurve","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDirection","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConvertedData","comment_text":"Return the data without the extended properties used by {@link\n PoweredRail} and {@link DetectorRail}. Overridden in {@link\n ExtendedRails}","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDirection","comment_text":"Set the direction of these tracks\n <p>\n Note that tracks are bidirectional and that the direction returned is\n the ascending direction if the track is set on a slope. If it is set as\n a curve, the corner of the track should be supplied.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"the direction the track should be facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isOnSlope","comment_text":"whether or not the track should be on a slope","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Rails","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Pumpkin","interfaces":["org.bukkit.material.Directional"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a pumpkin.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Pumpkin","comment_text":"","parameters":[],"throws":[]},{"name":"Pumpkin","comment_text":"Instantiate a pumpkin facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the pumkin's face is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Pumpkin","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Pumpkin","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isLit","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Pumpkin","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.PressureSensor","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPressed","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.PressurePlate","interfaces":["org.bukkit.material.PressureSensor"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a pressure plate","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PressurePlate","comment_text":"","parameters":[],"throws":[]},{"name":"PressurePlate","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"PressurePlate","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPressed","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.PressurePlate","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.PoweredRail","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.ExtendedRails","comment_text":"Represents a powered rail","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PoweredRail","comment_text":"","parameters":[],"throws":[]},{"name":"PoweredRail","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"PoweredRail","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Set whether this PoweredRail should be powered or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isPowered","comment_text":"whether or not the rail is powered","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.PoweredRail","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.PistonExtensionMaterial","interfaces":["org.bukkit.material.Attachable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Material data for the piston extension block","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PistonExtensionMaterial","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"PistonExtensionMaterial","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSticky","comment_text":"Checks if this piston extension is sticky, and returns true if so","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSticky","comment_text":"Sets whether or not this extension is sticky","return_type":"void","return_type_dimension":"","parameters":[{"name":"sticky","comment_text":"true if sticky, otherwise false","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.PistonExtensionMaterial","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.PistonBaseMaterial","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Material data for the piston base block","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PistonBaseMaterial","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"PistonBaseMaterial","comment_text":"Constructs a PistonBaseMaterial.","parameters":[{"name":"type","comment_text":"the material type to use","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPowered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Sets the current state of this piston","return_type":"void","return_type_dimension":"","parameters":[{"name":"powered","comment_text":"true if the piston is extended {@literal &} powered, or false","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSticky","comment_text":"Checks if this piston base is sticky, and returns true if so","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.PistonBaseMaterial","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Openable","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isOpen","comment_text":"Check to see if the door is open.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOpen","comment_text":"Configure this door to be either open or closed;","return_type":"void","return_type_dimension":"","parameters":[{"name":"isOpen","comment_text":"True to open the door.","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Observer","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents an observer.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Observer","comment_text":"","parameters":[],"throws":[]},{"name":"Observer","comment_text":"","parameters":[{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Observer","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Observer","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Observer","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.NetherWarts","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents nether wart","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NetherWarts","comment_text":"","parameters":[],"throws":[]},{"name":"NetherWarts","comment_text":"","parameters":[{"name":"state","comment_text":"","type":"org.bukkit.NetherWartsState","type_dimension":""}],"throws":[]},{"name":"NetherWarts","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"NetherWarts","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getState","comment_text":"Gets the current growth state of this nether wart","return_type":"org.bukkit.NetherWartsState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setState","comment_text":"Sets the growth state of this nether wart","return_type":"void","return_type_dimension":"","parameters":[{"name":"state","comment_text":"New growth state of this nether wart","type":"org.bukkit.NetherWartsState","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.NetherWarts","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Mushroom","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a huge mushroom block with certain combinations of faces set to\n cap, pores or stem.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Mushroom","comment_text":"Constructs a brown/red mushroom block with all sides set to pores.","parameters":[{"name":"shroom","comment_text":"A brown or red mushroom material type.","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Mushroom","comment_text":"Constructs a brown/red mushroom cap block with the specified face or\n faces set to cap texture.\n\n Setting any of the four sides will also set the top to cap.\n\n To set two side faces at once use e.g. north-west.\n\n Specify self to set all six faces at once.","parameters":[{"name":"shroom","comment_text":"A brown or red mushroom material type.","type":"org.bukkit.Material","type_dimension":""},{"name":"capFace","comment_text":"The face or faces to set to mushroom cap texture.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Mushroom","comment_text":"Constructs a brown/red mushroom block with the specified textures.","parameters":[{"name":"shroom","comment_text":"A brown or red mushroom material type.","type":"org.bukkit.Material","type_dimension":""},{"name":"texture","comment_text":"The textured mushroom faces.","type":"org.bukkit.material.types.MushroomBlockTexture","type_dimension":""}],"throws":[]},{"name":"Mushroom","comment_text":"","parameters":[{"name":"shroom","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isStem","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setStem","comment_text":"Sets this to be a mushroom stem.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockTexture","comment_text":"Gets the mushroom texture of this block.","return_type":"org.bukkit.material.types.MushroomBlockTexture","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setBlockTexture","comment_text":"Sets the mushroom texture of this block.","return_type":"void","return_type_dimension":"","parameters":[{"name":"texture","comment_text":"The mushroom texture to set","type":"org.bukkit.material.types.MushroomBlockTexture","type_dimension":""}],"throws":[]},{"name":"isFacePainted","comment_text":"Checks whether a face of the block is painted with cap texture.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The face to check.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"setFacePainted","comment_text":"Set a face of the block to be painted or not. Note that due to the\n nature of how the data is stored, setting a face painted or not is not\n guaranteed to leave the other faces unchanged.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The face to paint or unpaint.","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"painted","comment_text":"True if you want to paint it, false if you want the\n     pores to show.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPaintedFaces","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Mushroom","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.MonsterEggs","interfaces":[],"superclass":"org.bukkit.material.TexturedMaterial","comment_text":"Represents the different types of monster eggs","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MonsterEggs","comment_text":"","parameters":[],"throws":[]},{"name":"MonsterEggs","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"MonsterEggs","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getTextures","comment_text":"","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.MonsterEggs","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.MaterialData","interfaces":["java.lang.Cloneable"],"superclass":"java.lang.Object","comment_text":"Handles specific metadata for certain items or blocks","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MaterialData","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"MaterialData","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getData","comment_text":"Gets the raw data in this material","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setData","comment_text":"Sets the raw data of this material","return_type":"void","return_type_dimension":"","parameters":[{"name":"data","comment_text":"New raw data","type":"byte","type_dimension":""}],"throws":[]},{"name":"getItemType","comment_text":"Gets the Material that this MaterialData represents","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toItemStack","comment_text":"Creates a new ItemStack based on this MaterialData","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toItemStack","comment_text":"Creates a new ItemStack based on this MaterialData","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"The stack size of the new stack","type":"int","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.LongGrass","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the different types of long grasses.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"LongGrass","comment_text":"","parameters":[],"throws":[]},{"name":"LongGrass","comment_text":"","parameters":[{"name":"species","comment_text":"","type":"org.bukkit.GrassSpecies","type_dimension":""}],"throws":[]},{"name":"LongGrass","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"LongGrass","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSpecies","comment_text":"Gets the current species of this grass","return_type":"org.bukkit.GrassSpecies","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSpecies","comment_text":"Sets the species of this grass","return_type":"void","return_type_dimension":"","parameters":[{"name":"species","comment_text":"New species of this grass","type":"org.bukkit.GrassSpecies","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.LongGrass","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Lever","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"Represents a lever","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Lever","comment_text":"","parameters":[],"throws":[]},{"name":"Lever","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Lever","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Set this lever to be powered or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isPowered","comment_text":"whether the lever should be powered or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this lever is pointing in","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Lever","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Leaves","interfaces":[],"superclass":"org.bukkit.material.Wood","comment_text":"Represents the different types of leaf block that may be permanent or can\n decay when too far from a log.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Leaves","comment_text":"Constructs a leaf block.","parameters":[],"throws":[]},{"name":"Leaves","comment_text":"Constructs a leaf block of the given tree species.","parameters":[{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Leaves","comment_text":"Constructs a leaf block of the given tree species and flag for whether\n this leaf block will disappear when too far from a log.","parameters":[{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"isDecayable","comment_text":"whether the block is permanent or can disappear","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Leaves","comment_text":"Constructs a leaf block of the given type.","parameters":[{"name":"type","comment_text":"the type of leaf block","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Leaves","comment_text":"Constructs a leaf block of the given type and tree species.","parameters":[{"name":"type","comment_text":"the type of leaf block","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"Leaves","comment_text":"Constructs a leaf block of the given type and tree species and flag for\n whether this leaf block will disappear when too far from a log.","parameters":[{"name":"type","comment_text":"the type of leaf block","type":"org.bukkit.Material","type_dimension":""},{"name":"species","comment_text":"the species of the wood block","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"isDecayable","comment_text":"whether the block is permanent or can disappear","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Leaves","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_TYPE","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"DEFAULT_DECAYABLE","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"isDecaying","comment_text":"Checks if this leaf block is in the process of decaying","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDecaying","comment_text":"Set whether this leaf block is in the process of decaying","return_type":"void","return_type_dimension":"","parameters":[{"name":"isDecaying","comment_text":"whether the block is decaying or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isDecayable","comment_text":"Checks if this leaf block is permanent or can decay when too far from a\n log","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDecayable","comment_text":"Set whether this leaf block will disappear when too far from a log","return_type":"void","return_type_dimension":"","parameters":[{"name":"isDecayable","comment_text":"whether the block is permanent or can disappear","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Leaves","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Ladder","interfaces":[],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"Represents Ladder data","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Ladder","comment_text":"","parameters":[],"throws":[]},{"name":"Ladder","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Ladder","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this ladder is facing","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Ladder","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Hopper","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a hopper in an active or deactivated state and facing in a\n specific direction.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material"],"constructors":[{"name":"Hopper","comment_text":"Constructs a hopper facing the default direction (down) and initially\n active.","parameters":[],"throws":[]},{"name":"Hopper","comment_text":"Constructs a hopper facing the specified direction and initially active.","parameters":[{"name":"facingDirection","comment_text":"the direction the hopper is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Hopper","comment_text":"Constructs a hopper facing the specified direction and either active or\n not.","parameters":[{"name":"facingDirection","comment_text":"the direction the hopper is facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isActive","comment_text":"True if the hopper is initially active, false if\n deactivated","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Hopper","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Hopper","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_DIRECTION","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"DEFAULT_ACTIVE","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"setActive","comment_text":"Sets whether the hopper is active or not.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isActive","comment_text":"True if the hopper is active, false if deactivated as if\n powered by redstone","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isActive","comment_text":"Checks whether the hopper is active or not.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this hopper is facing","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The direction to set this hopper to","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Gets the direction this hopper is facing","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Hopper","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPowered","comment_text":"Checks if the hopper is powered.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Gate","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Openable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a fence gate","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Gate","comment_text":"","parameters":[],"throws":[]},{"name":"Gate","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"Gate","comment_text":"","parameters":[{"name":"data","comment_text":"","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isOpen","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOpen","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"isOpen","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Gate","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.FurnaceAndDispenser","interfaces":[],"superclass":"org.bukkit.material.DirectionalContainer","comment_text":"Represents a furnace or dispenser, two types of directional containers","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FurnaceAndDispenser","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"FurnaceAndDispenser","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"clone","comment_text":"","return_type":"org.bukkit.material.FurnaceAndDispenser","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Furnace","interfaces":[],"superclass":"org.bukkit.material.FurnaceAndDispenser","comment_text":"Represents a furnace.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Furnace","comment_text":"","parameters":[],"throws":[]},{"name":"Furnace","comment_text":"Instantiate a furnace facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the furnace's \"opening\" is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Furnace","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Furnace","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Furnace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.FlowerPot","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a flower pot.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FlowerPot","comment_text":"Default constructor for a flower pot.","parameters":[],"throws":[]},{"name":"FlowerPot","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"FlowerPot","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getContents","comment_text":"Get the material in the flower pot","return_type":"org.bukkit.material.MaterialData","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setContents","comment_text":"Set the contents of the flower pot","return_type":"void","return_type_dimension":"","parameters":[{"name":"materialData","comment_text":"MaterialData of the block to put in the flower pot.","type":"org.bukkit.material.MaterialData","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.FlowerPot","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.ExtendedRails","interfaces":[],"superclass":"org.bukkit.material.Rails","comment_text":"This is the superclass for the {@link DetectorRail} and {@link PoweredRail}\n classes","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ExtendedRails","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"ExtendedRails","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isCurve","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConvertedData","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isOnSlope","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.ExtendedRails","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.EnderChest","interfaces":[],"superclass":"org.bukkit.material.DirectionalContainer","comment_text":"Represents an ender chest","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EnderChest","comment_text":"","parameters":[],"throws":[]},{"name":"EnderChest","comment_text":"Instantiate an ender chest facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the ender chest's lid opens towards","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"EnderChest","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"EnderChest","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"clone","comment_text":"","return_type":"org.bukkit.material.EnderChest","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Dye","interfaces":["org.bukkit.material.Colorable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents dye","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Dye","comment_text":"","parameters":[],"throws":[]},{"name":"Dye","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Dye","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"Dye","comment_text":"","parameters":[{"name":"color","comment_text":"color of the dye","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the current color of this dye","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this dye","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"New color of this dye","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Dye","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Door","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Openable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a door.\n\n This class was previously deprecated, but has been retrofitted to\n work with modern doors. Some methods are undefined dependant on <code>isTopHalf()</code>\n due to Minecraft's internal representation of doors.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Door","comment_text":"","parameters":[],"throws":[]},{"name":"Door","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the bottom half of a door of the given material type, facing the specified direction and set to closed","parameters":[{"name":"type","comment_text":"The type of material this door is made of. This must match the type of the block above.","type":"org.bukkit.Material","type_dimension":""},{"name":"face","comment_text":"The direction the door is facing.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the bottom half of a door of the given material type, facing the specified direction and set to open\n or closed","parameters":[{"name":"type","comment_text":"The type of material this door is made of. This must match the type of the block above.","type":"org.bukkit.Material","type_dimension":""},{"name":"face","comment_text":"The direction the door is facing.","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isOpen","comment_text":"Whether the door is currently opened.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the top half of door of the given material type and with the hinge on the left or right","parameters":[{"name":"type","comment_text":"The type of material this door is made of. This must match the type of the block below.","type":"org.bukkit.Material","type_dimension":""},{"name":"isHingeRight","comment_text":"True if the hinge is on the right hand side, false if the hinge is on the left hand side.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to\n closed","parameters":[{"name":"species","comment_text":"The species this wooden door is made of. This must match the species of the block above.","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"face","comment_text":"The direction the door is facing.","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to open\n or closed","parameters":[{"name":"species","comment_text":"The species this wooden door is made of. This must match the species of the block above.","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"face","comment_text":"The direction the door is facing.","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isOpen","comment_text":"Whether the door is currently opened.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"Constructs the top half of a wooden door of the given species and with the hinge on the left or right","parameters":[{"name":"species","comment_text":"The species this wooden door is made of. This must match the species of the block below.","type":"org.bukkit.TreeSpecies","type_dimension":""},{"name":"isHingeRight","comment_text":"True if the hinge is on the right hand side, false if the hinge is on the left hand side.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Door","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getWoodDoorOfSpecies","comment_text":"Returns the item type of a wooden door for the given tree species.","return_type":"org.bukkit.Material","return_type_dimension":"","parameters":[{"name":"species","comment_text":"The species of wood door required.","type":"org.bukkit.TreeSpecies","type_dimension":""}],"throws":[]},{"name":"isOpen","comment_text":"Result is undefined if <code>isTopHalf()</code> is true.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOpen","comment_text":"Set whether the door is open. Undefined if <code>isTopHalf()</code> is true.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isOpen","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isTopHalf","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setTopHalf","comment_text":"Configure this part of the door to be either the top or the bottom half","return_type":"void","return_type_dimension":"","parameters":[{"name":"isTopHalf","comment_text":"True to make it the top half.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getHingeCorner","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Set the direction that this door should is facing.\n\n Undefined if <code>isTopHalf()</code> is true.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"the direction","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Get the direction that this door is facing.\n\n Undefined if <code>isTopHalf()</code> is true.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getHinge","comment_text":"Returns the side of the door the hinge is on.\n\n Undefined if <code>isTopHalf()</code> is false.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHinge","comment_text":"Set whether the hinge is on the left or right side. Left is false, right is true.\n\n Undefined if <code>isTopHalf()</code> is false.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isHingeRight","comment_text":"True if the hinge is on the right hand side, false if the hinge is on the left hand side.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Door","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Dispenser","interfaces":[],"superclass":"org.bukkit.material.FurnaceAndDispenser","comment_text":"Represents a dispenser.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Dispenser","comment_text":"","parameters":[],"throws":[]},{"name":"Dispenser","comment_text":"","parameters":[{"name":"direction","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Dispenser","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Dispenser","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Dispenser","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.DirectionalContainer","interfaces":["org.bukkit.material.Directional"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a furnace or a dispenser.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"DirectionalContainer","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"DirectionalContainer","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.DirectionalContainer","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Directional","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setFacingDirection","comment_text":"Sets the direction that this block is facing in","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The facing direction","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Gets the direction this block is facing","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Diode","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a diode/repeater in the on or off state, with a delay and facing\n in a specific direction.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Diode","comment_text":"Constructs a diode switched on, with a delay of 1 and facing the default\n direction (north).\n\n By default this constructor creates a diode that is switched on for\n backwards compatibility with past implementations.","parameters":[],"throws":[]},{"name":"Diode","comment_text":"Constructs a diode switched off, with a delay of 1 and facing the\n specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the diode is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Diode","comment_text":"Constructs a diode switched off, with the specified delay and facing the\n specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the diode is facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"delay","comment_text":"The number of ticks (1-4) before the diode turns on after\n being powered","type":"int","type_dimension":""}],"throws":[]},{"name":"Diode","comment_text":"Constructs a diode switched on or off, with the specified delay and\n facing the specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the diode is facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"delay","comment_text":"The number of ticks (1-4) before the diode turns on after\n being powered","type":"int","type_dimension":""},{"name":"state","comment_text":"True if the diode is in the on state","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Diode","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Diode","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_DIRECTION","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"DEFAULT_DELAY","comment_text":"","type":"int","type_dimension":""},{"name":"DEFAULT_STATE","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"setDelay","comment_text":"Sets the delay of the repeater.","return_type":"void","return_type_dimension":"","parameters":[{"name":"delay","comment_text":"The new delay (1-4)","type":"int","type_dimension":""}],"throws":[]},{"name":"getDelay","comment_text":"Gets the delay of the repeater in ticks.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this diode is facing.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The direction to set this diode to","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Gets the direction this diode is facing","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Diode","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPowered","comment_text":"Checks if the diode is powered.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.DetectorRail","interfaces":["org.bukkit.material.PressureSensor"],"superclass":"org.bukkit.material.ExtendedRails","comment_text":"Represents a detector rail","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"DetectorRail","comment_text":"","parameters":[],"throws":[]},{"name":"DetectorRail","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"DetectorRail","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPressed","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPressed","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"isPressed","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.DetectorRail","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Crops","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the different types of crops in different states of growth.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Crops","comment_text":"Constructs a wheat crop block in the seeded state.","parameters":[],"throws":[]},{"name":"Crops","comment_text":"Constructs a wheat crop block in the given growth state","parameters":[{"name":"state","comment_text":"The growth state of the crops","type":"org.bukkit.CropState","type_dimension":""}],"throws":[]},{"name":"Crops","comment_text":"Constructs a crop block of the given type and in the given growth state","parameters":[{"name":"type","comment_text":"The type of crops","type":"org.bukkit.Material","type_dimension":""},{"name":"state","comment_text":"The growth state of the crops","type":"org.bukkit.CropState","type_dimension":""}],"throws":[]},{"name":"Crops","comment_text":"Constructs a crop block of the given type and in the seeded state","parameters":[{"name":"type","comment_text":"The type of crops","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Crops","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_TYPE","comment_text":"","type":"org.bukkit.Material","type_dimension":""},{"name":"DEFAULT_STATE","comment_text":"","type":"org.bukkit.CropState","type_dimension":""}],"methods":[{"name":"getState","comment_text":"Gets the current growth state of this crop\n\n For crops with only four growth states such as beetroot, only the values SEEDED, SMALL, TALL and RIPE will be\n returned.","return_type":"org.bukkit.CropState","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setState","comment_text":"Sets the growth state of this crop\n\n For crops with only four growth states such as beetroot, the 8 CropStates are mapped into four states:\n\n SEEDED, SMALL, TALL and RIPE\n\n GERMINATED will change to SEEDED\n VERY_SMALL will change to SMALL\n MEDIUM will change to TALL\n VERY_TALL will change to RIPE","return_type":"void","return_type_dimension":"","parameters":[{"name":"state","comment_text":"New growth state of this crop","type":"org.bukkit.CropState","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Crops","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Comparator","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.Material","org.bukkit.Material"],"constructors":[{"name":"Comparator","comment_text":"Constructs a comparator switched off, with the default mode (normal) and facing the default direction (north).","parameters":[],"throws":[]},{"name":"Comparator","comment_text":"Constructs a comparator switched off, with the default mode (normal) and facing the specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the comparator is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Comparator","comment_text":"Constructs a comparator switched off, with the specified mode and facing the specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the comparator is facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isSubtraction","comment_text":"True if the comparator is in subtraction mode, false for normal comparator operation","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Comparator","comment_text":"Constructs a comparator switched on or off, with the specified mode and facing the specified direction.","parameters":[{"name":"facingDirection","comment_text":"the direction the comparator is facing","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"isSubtraction","comment_text":"True if the comparator is in subtraction mode, false for normal comparator operation","type":"boolean","type_dimension":""},{"name":"state","comment_text":"True if the comparator is in the on state","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Comparator","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Comparator","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_DIRECTION","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""},{"name":"DEFAULT_SUBTRACTION_MODE","comment_text":"","type":"boolean","type_dimension":""},{"name":"DEFAULT_STATE","comment_text":"","type":"boolean","type_dimension":""}],"methods":[{"name":"setSubtractionMode","comment_text":"Sets whether the comparator is in subtraction mode.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isSubtraction","comment_text":"True if the comparator is in subtraction mode, false for normal comparator operation","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isSubtractionMode","comment_text":"Checks whether the comparator is in subtraction mode","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this comparator is facing","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"The direction to set this comparator to","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Gets the direction this comparator is facing","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Comparator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isPowered","comment_text":"Checks if the comparator is powered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isBeingPowered","comment_text":"Checks if the comparator is being powered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Command","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a command block","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Command","comment_text":"","parameters":[],"throws":[]},{"name":"Command","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Command","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Sets the current state of this Material","return_type":"void","return_type_dimension":"","parameters":[{"name":"bool","comment_text":"whether or not the command block is powered","type":"boolean","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Command","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Colorable","interfaces":[],"superclass":"","comment_text":"An object that can be colored.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getColor","comment_text":"Gets the color of this object.","return_type":"org.bukkit.DyeColor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setColor","comment_text":"Sets the color of this object to the specified DyeColor.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"The color of the object, as a DyeColor.","type":"org.bukkit.DyeColor","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.CocoaPlant","interfaces":["org.bukkit.material.Directional","org.bukkit.material.Attachable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the cocoa plant","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"CocoaPlant","comment_text":"","parameters":[],"throws":[]},{"name":"CocoaPlant","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"CocoaPlant","comment_text":"","parameters":[{"name":"sz","comment_text":"","type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","type_dimension":""}],"throws":[]},{"name":"CocoaPlant","comment_text":"","parameters":[{"name":"sz","comment_text":"","type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","type_dimension":""},{"name":"dir","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSize","comment_text":"Get size of plant","return_type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSize","comment_text":"Set size of plant","return_type":"void","return_type_dimension":"","parameters":[{"name":"sz","comment_text":"- size of plant","type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.CocoaPlant","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.CocoaPlant.CocoaPlantSize","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.material.CocoaPlant.CocoaPlantSize","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["SMALL","MEDIUM","LARGE"]},{"name":"org.bukkit.material.Coal","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents the different types of coals.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Coal","comment_text":"","parameters":[],"throws":[]},{"name":"Coal","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.CoalType","type_dimension":""}],"throws":[]},{"name":"Coal","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Coal","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the current type of this coal","return_type":"org.bukkit.CoalType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setType","comment_text":"Sets the type of this coal","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"New type of this coal","type":"org.bukkit.CoalType","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Coal","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Chest","interfaces":[],"superclass":"org.bukkit.material.DirectionalContainer","comment_text":"Represents a chest","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Chest","comment_text":"","parameters":[],"throws":[]},{"name":"Chest","comment_text":"Instantiate a chest facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the chest's lit opens towards","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Chest","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Chest","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Chest","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Cauldron","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a cauldron","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Cauldron","comment_text":"","parameters":[],"throws":[]},{"name":"Cauldron","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]},{"name":"Cauldron","comment_text":"","parameters":[{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isFull","comment_text":"Check if the cauldron is full.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEmpty","comment_text":"Check if the cauldron is empty.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Cauldron","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Cake","interfaces":[],"superclass":"org.bukkit.material.MaterialData","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Cake","comment_text":"","parameters":[],"throws":[]},{"name":"Cake","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Cake","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getSlicesEaten","comment_text":"Gets the number of slices eaten from this cake","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSlicesRemaining","comment_text":"Gets the number of slices remaining on this cake","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setSlicesEaten","comment_text":"Sets the number of slices eaten from this cake","return_type":"void","return_type_dimension":"","parameters":[{"name":"n","comment_text":"The number of slices eaten","type":"int","type_dimension":""}],"throws":[]},{"name":"setSlicesRemaining","comment_text":"Sets the number of slices remaining on this cake","return_type":"void","return_type_dimension":"","parameters":[{"name":"n","comment_text":"The number of slices remaining","type":"int","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Cake","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Button","interfaces":["org.bukkit.material.Redstone"],"superclass":"org.bukkit.material.SimpleAttachableMaterialData","comment_text":"Represents a button","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Button","comment_text":"","parameters":[],"throws":[]},{"name":"Button","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Button","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isPowered","comment_text":"Gets the current state of this Material, indicating if it's powered or\n unpowered","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPowered","comment_text":"Sets the current state of this button","return_type":"void","return_type_dimension":"","parameters":[{"name":"bool","comment_text":"whether or not the button is powered","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"Sets the direction this button is pointing toward","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Button","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Bed","interfaces":["org.bukkit.material.Directional"],"superclass":"org.bukkit.material.MaterialData","comment_text":"Represents a bed.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Bed","comment_text":"Default constructor for a bed.","parameters":[],"throws":[]},{"name":"Bed","comment_text":"Instantiate a bed facing in a particular direction.","parameters":[{"name":"direction","comment_text":"the direction the bed's head is facing","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"Bed","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Bed","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isHeadOfBed","comment_text":"Determine if this block represents the head of the bed","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHeadOfBed","comment_text":"Configure this to be either the head or the foot of the bed","return_type":"void","return_type_dimension":"","parameters":[{"name":"isHeadOfBed","comment_text":"True to make it the head.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setFacingDirection","comment_text":"Set which direction the head of the bed is facing. Note that this will\n only affect one of the two blocks the bed is made of.","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"getFacing","comment_text":"Get the direction that this bed's head is facing toward","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Bed","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Banner","interfaces":["org.bukkit.material.Attachable"],"superclass":"org.bukkit.material.MaterialData","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Banner","comment_text":"","parameters":[],"throws":[]},{"name":"Banner","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.Material","type_dimension":""}],"throws":[]},{"name":"Banner","comment_text":"","parameters":[{"name":"type","comment_text":"the type","type":"org.bukkit.Material","type_dimension":""},{"name":"data","comment_text":"the raw data value","type":"byte","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isWallBanner","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAttachedFace","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFacing","comment_text":"","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setFacingDirection","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"face","comment_text":"","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"","return_type":"org.bukkit.material.Banner","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.Attachable","interfaces":["org.bukkit.material.Directional"],"superclass":"","comment_text":"Indicates that a block can be attached to another block","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getAttachedFace","comment_text":"Gets the face that this block is attached on","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.material.types.MushroomBlockTexture","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different textured blocks of mushroom.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.material.types.MushroomBlockTexture","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.material.types.MushroomBlockTexture","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getData","comment_text":"Gets the associated data value representing this mushroom block face.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCapFace","comment_text":"Gets the face that has cap texture.","return_type":"org.bukkit.block.BlockFace","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByData","comment_text":"Gets the MushroomBlockType with the given data value.","return_type":"org.bukkit.material.types.MushroomBlockTexture","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Data value to fetch","type":"byte","type_dimension":""}],"throws":[]},{"name":"getCapByFace","comment_text":"Gets the MushroomBlockType with cap texture on the given block face.","return_type":"org.bukkit.material.types.MushroomBlockTexture","return_type_dimension":"","parameters":[{"name":"face","comment_text":"the required block face with cap texture","type":"org.bukkit.block.BlockFace","type_dimension":""}],"throws":[]}],"enumConstants":["ALL_PORES","CAP_NORTH_WEST","CAP_NORTH","CAP_NORTH_EAST","CAP_WEST","CAP_TOP","CAP_EAST","CAP_SOUTH_WEST","CAP_SOUTH","CAP_SOUTH_EAST","STEM_SIDES","ALL_CAP","ALL_STEM"]},{"name":"org.bukkit.metadata.MetadataValueAdapter","interfaces":["org.bukkit.metadata.MetadataValue"],"superclass":"java.lang.Object","comment_text":"Optional base class for facilitating MetadataValue implementations.\n <p>\n This provides all the conversion functions for MetadataValue so that\n writing an implementation of MetadataValue is as simple as implementing\n value() and invalidate().","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MetadataValueAdapter","comment_text":"","parameters":[{"name":"owningPlugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[{"name":"owningPlugin","comment_text":"","type":"java.lang.ref.WeakReference","type_dimension":""}],"methods":[{"name":"getOwningPlugin","comment_text":"","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asInt","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asFloat","comment_text":"","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asDouble","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asLong","comment_text":"","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asShort","comment_text":"","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asByte","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asBoolean","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.MetadataValue","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"value","comment_text":"Fetches the value of this metadata item.","return_type":"java.lang.Object","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asInt","comment_text":"Attempts to convert the value of this metadata item into an int.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asFloat","comment_text":"Attempts to convert the value of this metadata item into a float.","return_type":"float","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asDouble","comment_text":"Attempts to convert the value of this metadata item into a double.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asLong","comment_text":"Attempts to convert the value of this metadata item into a long.","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asShort","comment_text":"Attempts to convert the value of this metadata item into a short.","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asByte","comment_text":"Attempts to convert the value of this metadata item into a byte.","return_type":"byte","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asBoolean","comment_text":"Attempts to convert the value of this metadata item into a boolean.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"asString","comment_text":"Attempts to convert the value of this metadata item into a string.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOwningPlugin","comment_text":"Returns the {@link Plugin} that created this metadata item.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"invalidate","comment_text":"Invalidates this metadata item, forcing it to recompute when next\n accessed.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.MetadataStoreBase","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MetadataStoreBase","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"setMetadata","comment_text":"Adds a metadata value to an object. Each metadata value is owned by a\n specific {@link Plugin}. If a plugin has already added a metadata value\n to an object, that value will be replaced with the value of {@code\n newMetadataValue}. Multiple plugins can set independent values for the\n same {@code metadataKey} without conflict.\n <p>\n Implementation note: I considered using a {@link\n java.util.concurrent.locks.ReadWriteLock} for controlling access to\n {@code metadataMap}, but decided that the added overhead wasn't worth\n the finer grained access control.\n <p>\n Bukkit is almost entirely single threaded so locking overhead shouldn't\n pose a problem.","return_type":"void","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"The object receiving the metadata.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"A unique key to identify this metadata.","type":"java.lang.String","type_dimension":""},{"name":"newMetadataValue","comment_text":"The metadata value to apply.","type":"org.bukkit.metadata.MetadataValue","type_dimension":""}],"throws":[]},{"name":"getMetadata","comment_text":"Returns all metadata values attached to an object. If multiple\n have attached metadata, each will value will be included.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object being interrogated.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key being sought.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasMetadata","comment_text":"Tests to see if a metadata attribute has been set on an object.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object upon which the has-metadata test is\n     performed.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key being queried.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"removeMetadata","comment_text":"Removes a metadata item owned by a plugin from a subject.","return_type":"void","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object to remove the metadata from.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key identifying the metadata to\n     remove.","type":"java.lang.String","type_dimension":""},{"name":"owningPlugin","comment_text":"the plugin attempting to remove a metadata item.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"invalidateAll","comment_text":"Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"owningPlugin","comment_text":"the plugin requesting the invalidation.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"disambiguate","comment_text":"Creates a unique name for the object receiving metadata by combining\n unique data from the subject with a metadataKey.\n <p>\n The name created must be globally unique for the given object and any\n two equivalent objects must generate the same unique name. For example,\n two Player objects must generate the same string if they represent the\n same player, even if the objects would fail a reference equality test.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"The object for which this key is being generated.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"The name identifying the metadata value.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.MetadataStore","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setMetadata","comment_text":"Adds a metadata value to an object.","return_type":"void","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"The object receiving the metadata.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"A unique key to identify this metadata.","type":"java.lang.String","type_dimension":""},{"name":"newMetadataValue","comment_text":"The metadata value to apply.","type":"org.bukkit.metadata.MetadataValue","type_dimension":""}],"throws":[]},{"name":"getMetadata","comment_text":"Returns all metadata values attached to an object. If multiple plugins\n have attached metadata, each will value will be included.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object being interrogated.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key being sought.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasMetadata","comment_text":"Tests to see if a metadata attribute has been set on an object.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object upon which the has-metadata test is\n     performed.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key being queried.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"removeMetadata","comment_text":"Removes a metadata item owned by a plugin from a subject.","return_type":"void","return_type_dimension":"","parameters":[{"name":"subject","comment_text":"the object to remove the metadata from.","type":"T","type_dimension":""},{"name":"metadataKey","comment_text":"the unique metadata key identifying the metadata to\n     remove.","type":"java.lang.String","type_dimension":""},{"name":"owningPlugin","comment_text":"the plugin attempting to remove a metadata item.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"invalidateAll","comment_text":"Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.","return_type":"void","return_type_dimension":"","parameters":[{"name":"owningPlugin","comment_text":"the plugin requesting the invalidation.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.MetadataEvaluationException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"A MetadataEvaluationException is thrown any time a {@link\n LazyMetadataValue} fails to evaluate its value due to an exception. The\n originating exception will be included as this exception's cause.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.metadata.MetadataConversionException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"A MetadataConversionException is thrown any time a {@link\n LazyMetadataValue} attempts to convert a metadata value to an inappropriate\n data type.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.metadata.Metadatable","interfaces":[],"superclass":"","comment_text":"This interface is implemented by all objects that can provide metadata\n about themselves.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"setMetadata","comment_text":"Sets a metadata value in the implementing object's metadata store.","return_type":"void","return_type_dimension":"","parameters":[{"name":"metadataKey","comment_text":"A unique key to identify this metadata.","type":"java.lang.String","type_dimension":""},{"name":"newMetadataValue","comment_text":"The metadata value to apply.","type":"org.bukkit.metadata.MetadataValue","type_dimension":""}],"throws":[]},{"name":"getMetadata","comment_text":"Returns a list of previously set metadata values from the implementing\n object's metadata store.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"metadataKey","comment_text":"the unique metadata key being sought.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasMetadata","comment_text":"Tests to see whether the implementing object contains the given\n metadata value in its metadata store.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"metadataKey","comment_text":"the unique metadata key being queried.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"removeMetadata","comment_text":"Removes the given metadata value from the implementing object's\n metadata store.","return_type":"void","return_type_dimension":"","parameters":[{"name":"metadataKey","comment_text":"the unique metadata key identifying the metadata to\n     remove.","type":"java.lang.String","type_dimension":""},{"name":"owningPlugin","comment_text":"This plugin's metadata value will be removed. All\n     other values will be left untouched.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.LazyMetadataValue","interfaces":[],"superclass":"org.bukkit.metadata.MetadataValueAdapter","comment_text":"The LazyMetadataValue class implements a type of metadata that is not\n computed until another plugin asks for it.\n <p>\n By making metadata values lazy, no computation is done by the providing\n plugin until absolutely necessary (if ever). Additionally,\n LazyMetadataValue objects cache their values internally unless overridden\n by a {@link CacheStrategy} or invalidated at the individual or plugin\n level. Once invalidated, the LazyMetadataValue will recompute its value\n when asked.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"LazyMetadataValue","comment_text":"Initialized a LazyMetadataValue object with the default\n CACHE_AFTER_FIRST_EVAL cache strategy.","parameters":[{"name":"owningPlugin","comment_text":"the {@link Plugin} that created this metadata\n     value.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"lazyValue","comment_text":"the lazy value assigned to this metadata value.","type":"java.util.concurrent.Callable","type_dimension":""}],"throws":[]},{"name":"LazyMetadataValue","comment_text":"Initializes a LazyMetadataValue object with a specific cache strategy.","parameters":[{"name":"owningPlugin","comment_text":"the {@link Plugin} that created this metadata\n     value.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"cacheStrategy","comment_text":"determines the rules for caching this metadata\n     value.","type":"org.bukkit.metadata.LazyMetadataValue.CacheStrategy","type_dimension":""},{"name":"lazyValue","comment_text":"the lazy value assigned to this metadata value.","type":"java.util.concurrent.Callable","type_dimension":""}],"throws":[]},{"name":"LazyMetadataValue","comment_text":"Protected special constructor used by FixedMetadataValue to bypass\n standard setup.","parameters":[{"name":"owningPlugin","comment_text":"the owning plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"value","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[],"throws":[]},{"name":"invalidate","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.metadata.LazyMetadataValue.CacheStrategy","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Describes possible caching strategies for metadata.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.metadata.LazyMetadataValue.CacheStrategy","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.metadata.LazyMetadataValue.CacheStrategy","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["CACHE_AFTER_FIRST_EVAL","NEVER_CACHE","CACHE_ETERNALLY"]},{"name":"org.bukkit.metadata.FixedMetadataValue","interfaces":[],"superclass":"org.bukkit.metadata.LazyMetadataValue","comment_text":"A FixedMetadataValue is a special case metadata item that contains the same\n value forever after initialization. Invalidating a FixedMetadataValue has\n no effect.\n <p>\n This class extends LazyMetadataValue for historical reasons, even though it\n overrides all the implementation methods. it is possible that in the future\n that the inheritance hierarchy may change.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FixedMetadataValue","comment_text":"Initializes a FixedMetadataValue with an Object","parameters":[{"name":"owningPlugin","comment_text":"the {@link Plugin} that created this metadata value","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"value","comment_text":"the value assigned to this metadata value","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"invalidate","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"value","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.ServerOperator","interfaces":[],"superclass":"","comment_text":"Represents an object that may become a server operator, such as a {@link\n Player}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isOp","comment_text":"Checks if this object is a server operator","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOp","comment_text":"Sets the operator status of this object","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"New operator value","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.PermissionRemovedExecutor","interfaces":[],"superclass":"","comment_text":"Represents a class which is to be notified when a {@link\n PermissionAttachment} is removed from a {@link Permissible}","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"attachmentRemoved","comment_text":"Called when a {@link PermissionAttachment} is removed from a {@link\n Permissible}","return_type":"void","return_type_dimension":"","parameters":[{"name":"attachment","comment_text":"Attachment which was removed","type":"org.bukkit.permissions.PermissionAttachment","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.PermissionDefault","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the possible default values for permissions","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.permissions.PermissionDefault","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.permissions.PermissionDefault","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getValue","comment_text":"Calculates the value of this PermissionDefault for the given operator\n value","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"op","comment_text":"If the target is op","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getByName","comment_text":"Looks up a PermissionDefault by name","return_type":"org.bukkit.permissions.PermissionDefault","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the default","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":["TRUE","FALSE","OP","NOT_OP"]},{"name":"org.bukkit.permissions.PermissionAttachmentInfo","interfaces":[],"superclass":"java.lang.Object","comment_text":"Holds information on a permission and which {@link PermissionAttachment}\n provides it","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PermissionAttachmentInfo","comment_text":"","parameters":[{"name":"permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""},{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"attachment","comment_text":"","type":"org.bukkit.permissions.PermissionAttachment","type_dimension":""},{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPermissible","comment_text":"Gets the permissible this is attached to","return_type":"org.bukkit.permissions.Permissible","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermission","comment_text":"Gets the permission being set","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAttachment","comment_text":"Gets the attachment providing this permission. This may be null for\n default permissions (usually parent permissions).","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getValue","comment_text":"Gets the value of this permission","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.PermissionAttachment","interfaces":[],"superclass":"java.lang.Object","comment_text":"Holds information about a permission attachment on a {@link Permissible}\n object","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PermissionAttachment","comment_text":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"Permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPlugin","comment_text":"Gets the plugin responsible for this attachment","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setRemovalCallback","comment_text":"Sets an object to be called for when this attachment is removed from a\n {@link Permissible}. May be null.","return_type":"void","return_type_dimension":"","parameters":[{"name":"ex","comment_text":"Object to be called when this is removed","type":"org.bukkit.permissions.PermissionRemovedExecutor","type_dimension":""}],"throws":[]},{"name":"getRemovalCallback","comment_text":"Gets the class that was previously set to be called when this\n attachment was removed from a {@link Permissible}. May be null.","return_type":"org.bukkit.permissions.PermissionRemovedExecutor","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermissible","comment_text":"Gets the Permissible that this is attached to","return_type":"org.bukkit.permissions.Permissible","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermissions","comment_text":"Gets a copy of all set permissions and values contained within this\n attachment.\n <p>\n This map may be modified but will not affect the attachment, as it is a\n copy.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPermission","comment_text":"Sets a permission to the given value, by its fully qualified name","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"New value of the permission","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setPermission","comment_text":"Sets a permission to the given value","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to set","type":"org.bukkit.permissions.Permission","type_dimension":""},{"name":"value","comment_text":"New value of the permission","type":"boolean","type_dimension":""}],"throws":[]},{"name":"unsetPermission","comment_text":"Removes the specified permission from this attachment.\n <p>\n If the permission does not exist in this attachment, nothing will\n happen.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission to remove","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unsetPermission","comment_text":"Removes the specified permission from this attachment.\n <p>\n If the permission does not exist in this attachment, nothing will\n happen.","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to remove","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"remove","comment_text":"Removes this attachment from its registered {@link Permissible}","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.Permission","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a unique permission that may be attached to a {@link\n Permissible}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"defaultValue","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"defaultValue","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"defaultValue","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"Permission","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"description","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"defaultValue","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[{"name":"DEFAULT_PERMISSION","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"methods":[{"name":"getName","comment_text":"Returns the unique fully qualified name of this Permission","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getChildren","comment_text":"Gets the children of this permission.\n <p>\n If you change this map in any form, you must call {@link\n #recalculatePermissibles()} to recalculate all {@link Permissible}s","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefault","comment_text":"Gets the default value of this permission.","return_type":"org.bukkit.permissions.PermissionDefault","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDefault","comment_text":"Sets the default value of this permission.\n <p>\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions. Changing this default will cause all {@link\n Permissible}s that contain this permission to recalculate their\n permissions","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The new default to set","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"throws":[]},{"name":"getDescription","comment_text":"Gets a brief description of this permission, if set","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setDescription","comment_text":"Sets the description of this permission.\n <p>\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions.","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"The new description to set","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPermissibles","comment_text":"Gets a set containing every {@link Permissible} that has this\n permission.\n <p>\n This set cannot be modified.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"recalculatePermissibles","comment_text":"Recalculates all {@link Permissible}s that contain this permission.\n <p>\n This should be called after modifying the children, and is\n automatically called after modifying the default value","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addParent","comment_text":"Adds this permission to the specified parent permission.\n <p>\n If the parent permission does not exist, it will be created and\n registered.","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the parent permission","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"The value to set this permission to","type":"boolean","type_dimension":""}],"throws":[]},{"name":"addParent","comment_text":"Adds this permission to the specified parent permission.","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Parent permission to register with","type":"org.bukkit.permissions.Permission","type_dimension":""},{"name":"value","comment_text":"The value to set this permission to","type":"boolean","type_dimension":""}],"throws":[]},{"name":"loadPermissions","comment_text":"Loads a list of Permissions from a map of data, usually used from\n retrieval from a yaml file.\n <p>\n The data may contain a list of name:data, where the data contains the\n following keys:\n <ul>\n <li>default: Boolean true or false. If not specified, false.\n <li>children: {@code Map<String, Boolean>} of child permissions. If not\n     specified, empty list.\n <li>description: Short string containing a very small description of\n     this description. If not specified, empty string.\n </ul>","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"data","comment_text":"Map of permissions","type":"java.util.Map","type_dimension":""},{"name":"error","comment_text":"An error message to show if a permission is invalid.","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"Default permission value to use if missing","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"throws":[]},{"name":"loadPermission","comment_text":"Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n <p>\n The data may contain the following keys:\n <ul>\n <li>default: Boolean true or false. If not specified, false.\n <li>children: {@code Map<String, Boolean>} of child permissions. If not\n     specified, empty list.\n <li>description: Short string containing a very small description of\n     this description. If not specified, empty string.\n </ul>","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""},{"name":"data","comment_text":"Map of keys","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"loadPermission","comment_text":"Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n <p>\n The data may contain the following keys:\n <ul>\n <li>default: Boolean true or false. If not specified, false.\n <li>children: {@code Map<String, Boolean>} of child permissions. If not\n     specified, empty list.\n <li>description: Short string containing a very small description of\n     this description. If not specified, empty string.\n </ul>","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""},{"name":"data","comment_text":"Map of keys","type":"java.util.Map","type_dimension":""},{"name":"def","comment_text":"Default permission value to use if not set","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"output","comment_text":"A list to append any created child-Permissions to, may be null","type":"java.util.List","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.PermissibleBase","interfaces":["org.bukkit.permissions.Permissible"],"superclass":"java.lang.Object","comment_text":"Base Permissible for use in any Permissible object via proxy or extension","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PermissibleBase","comment_text":"","parameters":[{"name":"opable","comment_text":"","type":"org.bukkit.permissions.ServerOperator","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"isOp","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setOp","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"isPermissionSet","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isPermissionSet","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"hasPermission","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"inName","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasPermission","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"removeAttachment","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"attachment","comment_text":"","type":"org.bukkit.permissions.PermissionAttachment","type_dimension":""}],"throws":[]},{"name":"recalculatePermissions","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clearPermissions","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addAttachment","comment_text":"","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"","type":"boolean","type_dimension":""},{"name":"ticks","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"ticks","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"getEffectivePermissions","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.permissions.Permissible","interfaces":["org.bukkit.permissions.ServerOperator"],"superclass":"","comment_text":"Represents an object that may be assigned permissions","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"isPermissionSet","comment_text":"Checks if this object contains an override for the specified\n permission, by fully qualified name","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isPermissionSet","comment_text":"Checks if this object contains an override for the specified {@link\n Permission}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to check","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"hasPermission","comment_text":"Gets the value of the specified permission, if set.\n <p>\n If a permission override is not set on this object, the default value\n of the permission will be returned.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"hasPermission","comment_text":"Gets the value of the specified permission, if set.\n <p>\n If a permission override is not set on this object, the default value\n of the permission will be returned","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to get","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"Adds a new {@link PermissionAttachment} with a single permission by\n name and value","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin responsible for this attachment, may not be null\n     or disabled","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"name","comment_text":"Name of the permission to attach","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"Value of the permission","type":"boolean","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"Adds a new empty {@link PermissionAttachment} to this object","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin responsible for this attachment, may not be null\n     or disabled","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"Temporarily adds a new {@link PermissionAttachment} with a single\n permission by name and value","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin responsible for this attachment, may not be null\n     or disabled","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"name","comment_text":"Name of the permission to attach","type":"java.lang.String","type_dimension":""},{"name":"value","comment_text":"Value of the permission","type":"boolean","type_dimension":""},{"name":"ticks","comment_text":"Amount of ticks to automatically remove this attachment\n     after","type":"int","type_dimension":""}],"throws":[]},{"name":"addAttachment","comment_text":"Temporarily adds a new empty {@link PermissionAttachment} to this\n object","return_type":"org.bukkit.permissions.PermissionAttachment","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin responsible for this attachment, may not be null\n     or disabled","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"ticks","comment_text":"Amount of ticks to automatically remove this attachment\n     after","type":"int","type_dimension":""}],"throws":[]},{"name":"removeAttachment","comment_text":"Removes the given {@link PermissionAttachment} from this object","return_type":"void","return_type_dimension":"","parameters":[{"name":"attachment","comment_text":"Attachment to remove","type":"org.bukkit.permissions.PermissionAttachment","type_dimension":""}],"throws":[]},{"name":"recalculatePermissions","comment_text":"Recalculates the permissions for this object, if the attachments have\n changed values.\n <p>\n This should very rarely need to be called from a plugin.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEffectivePermissions","comment_text":"Gets a set containing all of the permissions currently in effect by\n this object","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.UnknownDependencyException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown when attempting to load an invalid Plugin file","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"UnknownDependencyException","comment_text":"Constructs a new UnknownDependencyException based on the given\n Exception","parameters":[{"name":"throwable","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"UnknownDependencyException","comment_text":"Constructs a new UnknownDependencyException with the given message","parameters":[{"name":"message","comment_text":"Brief message explaining the cause of the exception","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"UnknownDependencyException","comment_text":"Constructs a new UnknownDependencyException based on the given\n Exception","parameters":[{"name":"throwable","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""},{"name":"message","comment_text":"Brief message explaining the cause of the exception","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"UnknownDependencyException","comment_text":"Constructs a new UnknownDependencyException","parameters":[],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.TimedRegisteredListener","interfaces":[],"superclass":"org.bukkit.plugin.RegisteredListener","comment_text":"Extends RegisteredListener to include timing information","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"TimedRegisteredListener","comment_text":"","parameters":[{"name":"pluginListener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"eventExecutor","comment_text":"","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"eventPriority","comment_text":"","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"registeredPlugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"listenCancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"callEvent","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"","type":"org.bukkit.event.Event","type_dimension":""}],"throws":[{"name":"org.bukkit.event.EventException","comment_text":""}]},{"name":"reset","comment_text":"Resets the call count and total time for this listener","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCount","comment_text":"Gets the total times this listener has been called","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTotalTime","comment_text":"Gets the total time calls to this listener have taken","return_type":"long","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEventClass","comment_text":"Gets the class of the events this listener handled. If it handled\n multiple classes of event, the closest shared superclass will be\n returned, such that for any event this listener has handled,\n <code>this.getEventClass().isAssignableFrom(event.getClass())</code>\n and no class <code>this.getEventClass().isAssignableFrom(clazz)\n {@literal && this.getEventClass() != clazz &&}\n event.getClass().isAssignableFrom(clazz)</code> for all handled events.","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasMultiple","comment_text":"Gets whether this listener has handled multiple events, such that for\n some two events, <code>eventA.getClass() != eventB.getClass()</code>.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.SimpleServicesManager","interfaces":["org.bukkit.plugin.ServicesManager"],"superclass":"java.lang.Object","comment_text":"A simple services manager.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimpleServicesManager","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"register","comment_text":"Register a provider of a service.","return_type":"void","return_type_dimension":"","parameters":[{"name":"service","comment_text":"service class","type":"java.lang.Class","type_dimension":""},{"name":"provider","comment_text":"provider to register","type":"T","type_dimension":""},{"name":"plugin","comment_text":"plugin with the provider","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"priority","comment_text":"priority of the provider","type":"org.bukkit.plugin.ServicePriority","type_dimension":""}],"throws":[]},{"name":"unregisterAll","comment_text":"Unregister all the providers registered by a particular plugin.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"The plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Unregister a particular provider for a particular service.","return_type":"void","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""},{"name":"provider","comment_text":"The service provider implementation","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Unregister a particular provider.","return_type":"void","return_type_dimension":"","parameters":[{"name":"provider","comment_text":"The service provider implementation","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"load","comment_text":"Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.","return_type":"T","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getRegistration","comment_text":"Queries for a provider registration. This may return if no provider\n has been registered for a service.","return_type":"org.bukkit.plugin.RegisteredServiceProvider","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getRegistrations","comment_text":"Get registrations of providers for a plugin.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"The plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getRegistrations","comment_text":"Get registrations of providers for a service. The returned list is\n an unmodifiable copy.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getKnownServices","comment_text":"Get a list of known services. A service is known if it has registered\n providers for it.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isProvidedFor","comment_text":"Returns whether a provider has been registered for a service.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"service","comment_text":"service to check","type":"java.lang.Class","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.SimplePluginManager","interfaces":["org.bukkit.plugin.PluginManager"],"superclass":"java.lang.Object","comment_text":"Handles all plugin management from the Server","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimplePluginManager","comment_text":"","parameters":[{"name":"instance","comment_text":"","type":"org.bukkit.Server","type_dimension":""},{"name":"commandMap","comment_text":"","type":"org.bukkit.command.SimpleCommandMap","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"registerInterface","comment_text":"Registers the specified plugin loader","return_type":"void","return_type_dimension":"","parameters":[{"name":"loader","comment_text":"Class name of the PluginLoader to register","type":"java.lang.Class","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"Thrown when the given Class is not a\n     valid PluginLoader"}]},{"name":"loadPlugins","comment_text":"Loads the plugins contained within the specified directory","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"[]","parameters":[{"name":"directory","comment_text":"Directory to check for plugins","type":"java.io.File","type_dimension":""}],"throws":[]},{"name":"loadPlugin","comment_text":"Loads the plugin in the specified file\n <p>\n File must be valid according to the current enabled Plugin interfaces","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File containing the plugin to load","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidPluginException","comment_text":"Thrown when the specified file is not a\n     valid plugin"},{"name":"org.bukkit.plugin.UnknownDependencyException","comment_text":"If a required dependency could not\n     be found"}]},{"name":"getPlugin","comment_text":"Checks if the given plugin is loaded and returns it when applicable\n <p>\n Please note that the name of the plugin is case-sensitive","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the plugin to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlugins","comment_text":"","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"isPluginEnabled","comment_text":"Checks if the given plugin is enabled or not\n <p>\n Please note that the name of the plugin is case-sensitive.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the plugin to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isPluginEnabled","comment_text":"Checks if the given plugin is enabled or not","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to check","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"enablePlugin","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"disablePlugins","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"disablePlugin","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"clearPlugins","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"callEvent","comment_text":"Calls an event with the given details.\n <p>\n This method only synchronizes when the event is not asynchronous.","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"Event details","type":"org.bukkit.event.Event","type_dimension":""}],"throws":[]},{"name":"registerEvents","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerEvent","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"","type":"java.lang.Class","type_dimension":""},{"name":"listener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"priority","comment_text":"","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"executor","comment_text":"","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerEvent","comment_text":"Registers the given event to the specified listener using a directly\n passed EventExecutor","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"Event class to register","type":"java.lang.Class","type_dimension":""},{"name":"listener","comment_text":"PlayerListener to register","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"priority","comment_text":"Priority of this event","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"executor","comment_text":"EventExecutor to register","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"plugin","comment_text":"Plugin to register","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"ignoreCancelled","comment_text":"Do not call executor if event was already\n     cancelled","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"addPermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"addPermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""},{"name":"dirty","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getDefaultPermissions","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"op","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"removePermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"removePermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"recalculatePermissionDefaults","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"dirtyPermissibles","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"subscribeToPermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"unsubscribeFromPermission","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"getPermissionSubscriptions","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"subscribeToDefaultPerms","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"op","comment_text":"","type":"boolean","type_dimension":""},{"name":"permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"unsubscribeFromDefaultPerms","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"op","comment_text":"","type":"boolean","type_dimension":""},{"name":"permissible","comment_text":"","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"getDefaultPermSubscriptions","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"op","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPermissions","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"useTimings","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"useTimings","comment_text":"Sets whether or not per event timing code should be used","return_type":"void","return_type_dimension":"","parameters":[{"name":"use","comment_text":"True if per event timing code should be used","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.ServicesManager","interfaces":[],"superclass":"","comment_text":"Manages services and service providers. Services are an interface\n specifying a list of methods that a provider must implement. Providers are\n implementations of these services. A provider can be queried from the\n services manager in order to use a service (if one is available). If\n multiple plugins register a service, then the service with the highest\n priority takes precedence.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"register","comment_text":"Register a provider of a service.","return_type":"void","return_type_dimension":"","parameters":[{"name":"service","comment_text":"service class","type":"java.lang.Class","type_dimension":""},{"name":"provider","comment_text":"provider to register","type":"T","type_dimension":""},{"name":"plugin","comment_text":"plugin with the provider","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"priority","comment_text":"priority of the provider","type":"org.bukkit.plugin.ServicePriority","type_dimension":""}],"throws":[]},{"name":"unregisterAll","comment_text":"Unregister all the providers registered by a particular plugin.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"The plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Unregister a particular provider for a particular service.","return_type":"void","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""},{"name":"provider","comment_text":"The service provider implementation","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"unregister","comment_text":"Unregister a particular provider.","return_type":"void","return_type_dimension":"","parameters":[{"name":"provider","comment_text":"The service provider implementation","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"load","comment_text":"Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.","return_type":"T","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getRegistration","comment_text":"Queries for a provider registration. This may return if no provider\n has been registered for a service.","return_type":"org.bukkit.plugin.RegisteredServiceProvider","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getRegistrations","comment_text":"Get registrations of providers for a plugin.","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"The plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getRegistrations","comment_text":"Get registrations of providers for a service. The returned list is\n unmodifiable.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"service","comment_text":"The service interface","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getKnownServices","comment_text":"Get a list of known services. A service is known if it has registered\n providers for it.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isProvidedFor","comment_text":"Returns whether a provider has been registered for a service. Do not\n check this first only to call <code>load(service)</code> later, as that\n would be a non-thread safe situation.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"service","comment_text":"service to check","type":"java.lang.Class","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.ServicePriority","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents various priorities of a provider.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.plugin.ServicePriority","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.plugin.ServicePriority","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["Lowest","Low","Normal","High","Highest"]},{"name":"org.bukkit.plugin.RegisteredServiceProvider","interfaces":["java.lang.Comparable"],"superclass":"java.lang.Object","comment_text":"A registered service provider.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RegisteredServiceProvider","comment_text":"","parameters":[{"name":"service","comment_text":"","type":"java.lang.Class","type_dimension":""},{"name":"provider","comment_text":"","type":"T","type_dimension":""},{"name":"priority","comment_text":"","type":"org.bukkit.plugin.ServicePriority","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getService","comment_text":"","return_type":"java.lang.Class","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlugin","comment_text":"","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getProvider","comment_text":"","return_type":"T","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPriority","comment_text":"","return_type":"org.bukkit.plugin.ServicePriority","return_type_dimension":"","parameters":[],"throws":[]},{"name":"compareTo","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"other","comment_text":"","type":"org.bukkit.plugin.RegisteredServiceProvider","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.RegisteredListener","interfaces":[],"superclass":"java.lang.Object","comment_text":"Stores relevant information for plugin listeners","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"RegisteredListener","comment_text":"","parameters":[{"name":"listener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"executor","comment_text":"","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"priority","comment_text":"","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"ignoreCancelled","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getListener","comment_text":"Gets the listener for this registration","return_type":"org.bukkit.event.Listener","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlugin","comment_text":"Gets the plugin for this registration","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPriority","comment_text":"Gets the priority for this registration","return_type":"org.bukkit.event.EventPriority","return_type_dimension":"","parameters":[],"throws":[]},{"name":"callEvent","comment_text":"Calls the event executor","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"The event","type":"org.bukkit.event.Event","type_dimension":""}],"throws":[{"name":"org.bukkit.event.EventException","comment_text":"If an event handler throws an exception."}]},{"name":"isIgnoringCancelled","comment_text":"Whether this listener accepts cancelled events","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginManager","interfaces":[],"superclass":"","comment_text":"Handles all plugin management from the Server","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerInterface","comment_text":"Registers the specified plugin loader","return_type":"void","return_type_dimension":"","parameters":[{"name":"loader","comment_text":"Class name of the PluginLoader to register","type":"java.lang.Class","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"Thrown when the given Class is not a\n     valid PluginLoader"}]},{"name":"getPlugin","comment_text":"Checks if the given plugin is loaded and returns it when applicable\n <p>\n Please note that the name of the plugin is case-sensitive","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the plugin to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getPlugins","comment_text":"Gets a list of all currently loaded plugins","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"isPluginEnabled","comment_text":"Checks if the given plugin is enabled or not\n <p>\n Please note that the name of the plugin is case-sensitive.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the plugin to check","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isPluginEnabled","comment_text":"Checks if the given plugin is enabled or not","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to check","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"loadPlugin","comment_text":"Loads the plugin in the specified file\n <p>\n File must be valid according to the current enabled Plugin interfaces","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File containing the plugin to load","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidPluginException","comment_text":"Thrown when the specified file is not a\n     valid plugin"},{"name":"org.bukkit.plugin.InvalidDescriptionException","comment_text":"Thrown when the specified file\n     contains an invalid description"},{"name":"org.bukkit.plugin.UnknownDependencyException","comment_text":"If a required dependency could not\n     be resolved"}]},{"name":"loadPlugins","comment_text":"Loads the plugins contained within the specified directory","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"[]","parameters":[{"name":"directory","comment_text":"Directory to check for plugins","type":"java.io.File","type_dimension":""}],"throws":[]},{"name":"disablePlugins","comment_text":"Disables all the loaded plugins","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clearPlugins","comment_text":"Disables and removes all plugins","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"callEvent","comment_text":"Calls an event with the given details","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"Event details","type":"org.bukkit.event.Event","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"Thrown when an asynchronous event is\n     fired from synchronous code.\n     <p>\n     <i>Note: This is best-effort basis, and should not be used to test\n     synchronized state. This is an indicator for flawed flow logic.</i>"}]},{"name":"registerEvents","comment_text":"Registers all the events in the given listener class","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"Listener to register","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"plugin","comment_text":"Plugin to register","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerEvent","comment_text":"Registers the specified executor to the given event class","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"Event type to register","type":"java.lang.Class","type_dimension":""},{"name":"listener","comment_text":"Listener to register","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"priority","comment_text":"Priority to register this event at","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"executor","comment_text":"EventExecutor to register","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"plugin","comment_text":"Plugin to register","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerEvent","comment_text":"Registers the specified executor to the given event class","return_type":"void","return_type_dimension":"","parameters":[{"name":"event","comment_text":"Event type to register","type":"java.lang.Class","type_dimension":""},{"name":"listener","comment_text":"Listener to register","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"priority","comment_text":"Priority to register this event at","type":"org.bukkit.event.EventPriority","type_dimension":""},{"name":"executor","comment_text":"EventExecutor to register","type":"org.bukkit.plugin.EventExecutor","type_dimension":""},{"name":"plugin","comment_text":"Plugin to register","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"ignoreCancelled","comment_text":"Whether to pass cancelled events or not","type":"boolean","type_dimension":""}],"throws":[]},{"name":"enablePlugin","comment_text":"Enables the specified plugin\n <p>\n Attempting to enable a plugin that is already enabled will have no\n effect","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to enable","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"disablePlugin","comment_text":"Disables the specified plugin\n <p>\n Attempting to disable a plugin that is not enabled will have no effect","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to disable","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getPermission","comment_text":"Gets a {@link Permission} from its fully qualified name","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the permission","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"addPermission","comment_text":"Adds a {@link Permission} to this plugin manager.\n <p>\n If a permission is already defined with the given name of the new\n permission, an exception will be thrown.","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to add","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"removePermission","comment_text":"Removes a {@link Permission} registration from this plugin manager.\n <p>\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n <p>\n Removing a permission registration will <b>not</b> remove the\n permission from any {@link Permissible}s that have it.","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to remove","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"removePermission","comment_text":"Removes a {@link Permission} registration from this plugin manager.\n <p>\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n <p>\n Removing a permission registration will <b>not</b> remove the\n permission from any {@link Permissible}s that have it.","return_type":"void","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Permission to remove","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getDefaultPermissions","comment_text":"Gets the default permissions for the given op status","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"op","comment_text":"Which set of default permissions to get","type":"boolean","type_dimension":""}],"throws":[]},{"name":"recalculatePermissionDefaults","comment_text":"Recalculates the defaults for the given {@link Permission}.\n <p>\n This will have no effect if the specified permission is not registered\n here.","return_type":"void","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"Permission to recalculate","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"subscribeToPermission","comment_text":"Subscribes the given Permissible for information about the requested\n Permission, by name.\n <p>\n If the specified Permission changes in any form, the Permissible will\n be asked to recalculate.","return_type":"void","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"Permission to subscribe to","type":"java.lang.String","type_dimension":""},{"name":"permissible","comment_text":"Permissible subscribing","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"unsubscribeFromPermission","comment_text":"Unsubscribes the given Permissible for information about the requested\n Permission, by name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"Permission to unsubscribe from","type":"java.lang.String","type_dimension":""},{"name":"permissible","comment_text":"Permissible subscribing","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"getPermissionSubscriptions","comment_text":"Gets a set containing all subscribed {@link Permissible}s to the given\n permission, by name","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"permission","comment_text":"Permission to query for","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"subscribeToDefaultPerms","comment_text":"Subscribes to the given Default permissions by operator status\n <p>\n If the specified defaults change in any form, the Permissible will be\n asked to recalculate.","return_type":"void","return_type_dimension":"","parameters":[{"name":"op","comment_text":"Default list to subscribe to","type":"boolean","type_dimension":""},{"name":"permissible","comment_text":"Permissible subscribing","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"unsubscribeFromDefaultPerms","comment_text":"Unsubscribes from the given Default permissions by operator status","return_type":"void","return_type_dimension":"","parameters":[{"name":"op","comment_text":"Default list to unsubscribe from","type":"boolean","type_dimension":""},{"name":"permissible","comment_text":"Permissible subscribing","type":"org.bukkit.permissions.Permissible","type_dimension":""}],"throws":[]},{"name":"getDefaultPermSubscriptions","comment_text":"Gets a set containing all subscribed {@link Permissible}s to the given\n default list, by op status","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"op","comment_text":"Default list to query for","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getPermissions","comment_text":"Gets a set of all registered permissions.\n <p>\n This set is a copy and will not be modified live.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"useTimings","comment_text":"Returns whether or not timing code should be used for event calls","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginLogger","interfaces":[],"superclass":"java.util.logging.Logger","comment_text":"The PluginLogger class is a modified {@link Logger} that prepends all\n logging calls with the name of the plugin doing the logging. The API for\n PluginLogger is exactly the same as {@link Logger}.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["java.util.logging.Logger"],"constructors":[{"name":"PluginLogger","comment_text":"Creates a new PluginLogger that extracts the name from a plugin.","parameters":[{"name":"context","comment_text":"A reference to the plugin","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"log","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"logRecord","comment_text":"","type":"java.util.logging.LogRecord","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginLoadOrder","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the order in which a plugin should be initialized and enabled","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.plugin.PluginLoadOrder","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.plugin.PluginLoadOrder","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["STARTUP","POSTWORLD"]},{"name":"org.bukkit.plugin.PluginLoader","interfaces":[],"superclass":"","comment_text":"Represents a plugin loader, which handles direct access to specific types\n of plugins","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"loadPlugin","comment_text":"Loads the plugin contained in the specified file","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to attempt to load","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidPluginException","comment_text":"Thrown when the specified file is not a\n     plugin"},{"name":"org.bukkit.plugin.UnknownDependencyException","comment_text":"If a required dependency could not\n     be found"}]},{"name":"getPluginDescription","comment_text":"Loads a PluginDescriptionFile from the specified file","return_type":"org.bukkit.plugin.PluginDescriptionFile","return_type_dimension":"","parameters":[{"name":"file","comment_text":"File to attempt to load from","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidDescriptionException","comment_text":"If the plugin description file\n     could not be created"}]},{"name":"getPluginFileFilters","comment_text":"Returns a list of all filename filters expected by this PluginLoader","return_type":"java.util.regex.Pattern","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"createRegisteredListeners","comment_text":"Creates and returns registered listeners for the event classes used in\n this listener","return_type":"java.util.Map","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"The object that will handle the eventual call back","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"plugin","comment_text":"The plugin to use when creating registered listeners","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"enablePlugin","comment_text":"Enables the specified plugin\n <p>\n Attempting to enable a plugin that is already enabled will have no\n effect","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to enable","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"disablePlugin","comment_text":"Disables the specified plugin\n <p>\n Attempting to disable a plugin that is not enabled will have no effect","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to disable","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginDescriptionFile","interfaces":[],"superclass":"java.lang.Object","comment_text":"This type is the runtime-container for the information in the plugin.yml.\n All plugins must have a respective plugin.yml. For plugins written in java\n using the standard plugin loader, this file must be in the root of the jar\n file.\n <p>\n When Bukkit loads a plugin, it needs to know some basic information about\n it. It reads this information from a YAML file, 'plugin.yml'. This file\n consists of a set of attributes, each defined on a new line and with no\n indentation.\n <p>\n Every (almost* every) method corresponds with a specific entry in the\n plugin.yml. These are the <b>required</b> entries for every plugin.yml:\n <ul>\n <li>{@link #getName()} - <code>name</code>\n <li>{@link #getVersion()} - <code>version</code>\n <li>{@link #getMain()} - <code>main</code>\n </ul>\n <p>\n Failing to include any of these items will throw an exception and cause the\n server to ignore your plugin.\n <p>\n This is a list of the possible yaml keys, with specific details included in\n the respective method documentations:\n <table border=1>\n <caption>The description of the plugin.yml layout</caption>\n <tr>\n     <th>Node</th>\n     <th>Method</th>\n     <th>Summary</th>\n </tr><tr>\n     <td><code>name</code></td>\n     <td>{@link #getName()}</td>\n     <td>The unique name of plugin</td>\n </tr><tr>\n     <td><code>version</code></td>\n     <td>{@link #getVersion()}</td>\n     <td>A plugin revision identifier</td>\n </tr><tr>\n     <td><code>main</code></td>\n     <td>{@link #getMain()}</td>\n     <td>The plugin's initial class file</td>\n </tr><tr>\n     <td><code>author</code><br><code>authors</code></td>\n     <td>{@link #getAuthors()}</td>\n     <td>The plugin contributors</td>\n </tr><tr>\n     <td><code>description</code></td>\n     <td>{@link #getDescription()}</td>\n     <td>Human readable plugin summary</td>\n </tr><tr>\n     <td><code>website</code></td>\n     <td>{@link #getWebsite()}</td>\n     <td>The URL to the plugin's site</td>\n </tr><tr>\n     <td><code>prefix</code></td>\n     <td>{@link #getPrefix()}</td>\n     <td>The token to prefix plugin log entries</td>\n </tr><tr>\n     <td><code>load</code></td>\n     <td>{@link #getLoad()}</td>\n     <td>The phase of server-startup this plugin will load during</td>\n </tr><tr>\n     <td><code>depend</code></td>\n     <td>{@link #getDepend()}</td>\n     <td>Other required plugins</td>\n </tr><tr>\n     <td><code>softdepend</code></td>\n     <td>{@link #getSoftDepend()}</td>\n     <td>Other plugins that add functionality</td>\n </tr><tr>\n     <td><code>loadbefore</code></td>\n     <td>{@link #getLoadBefore()}</td>\n     <td>The inverse softdepend</td>\n </tr><tr>\n     <td><code>commands</code></td>\n     <td>{@link #getCommands()}</td>\n     <td>The commands the plugin will register</td>\n </tr><tr>\n     <td><code>permissions</code></td>\n     <td>{@link #getPermissions()}</td>\n     <td>The permissions the plugin will register</td>\n </tr><tr>\n     <td><code>default-permission</code></td>\n     <td>{@link #getPermissionDefault()}</td>\n     <td>The default {@link Permission#getDefault() default} permission\n         state for defined {@link #getPermissions() permissions} the plugin\n         will register</td>\n </tr><tr>\n     <td><code>awareness</code></td>\n     <td>{@link #getAwareness()}</td>\n     <td>The concepts that the plugin acknowledges</td>\n </tr><tr>\n     <td><code>api-version</code></td>\n     <td>{@link #getAPIVersion()}</td>\n     <td>The API version which this plugin was programmed against</td>\n </tr>\n </table>\n <p>\n A plugin.yml example:<blockquote><pre>\nname: Inferno\nversion: 1.4.1\ndescription: This plugin is so 31337. You can set yourself on fire.\n# We could place every author in the authors list, but chose not to for illustrative purposes\n# Also, having an author distinguishes that person as the project lead, and ensures their\n# name is displayed first\nauthor: CaptainInflamo\nauthors: [Cogito, verrier, EvilSeph]\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\ndepend: [NewFire, FlameWire]\napi-version: 1.13\n\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    usage: Syntax error! Simply type /&lt;command&gt; to ignite yourself.\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases: [burning_deaths, burningDeaths]\n    permission: inferno.burningdeaths\n    usage: |\n      /&lt;command&gt; [player]\n      Example: /&lt;command&gt; - see how many times you have burned to death\n      Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\n\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n      inferno.burningdeaths.others: true\n  inferno.flagrate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n  inferno.burningdeaths.others:\n    description: Allows you to see how many times others have burned to death\n    default: op\n    children:\n      inferno.burningdeaths: true\n</pre></blockquote>","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginDescriptionFile","comment_text":"","parameters":[{"name":"stream","comment_text":"","type":"java.io.InputStream","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidDescriptionException","comment_text":""}]},{"name":"PluginDescriptionFile","comment_text":"Loads a PluginDescriptionFile from the specified reader","parameters":[{"name":"reader","comment_text":"The reader","type":"java.io.Reader","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidDescriptionException","comment_text":"If the PluginDescriptionFile is\n     invalid"}]},{"name":"PluginDescriptionFile","comment_text":"Creates a new PluginDescriptionFile with the given detailed","parameters":[{"name":"pluginName","comment_text":"Name of this plugin","type":"java.lang.String","type_dimension":""},{"name":"pluginVersion","comment_text":"Version of this plugin","type":"java.lang.String","type_dimension":""},{"name":"mainClass","comment_text":"Full location of the main class of this plugin","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getName","comment_text":"Gives the name of the plugin. This name is a unique identifier for\n plugins.\n <ul>\n <li>Must consist of all alphanumeric characters, underscores, hyphon,\n     and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n     plugin.yml to fail loading.\n <li>Used to determine the name of the plugin's data folder. Data\n     folders are placed in the ./plugins/ directory by default, but this\n     behavior should not be relied on. {@link Plugin#getDataFolder()}\n     should be used to reference the data folder.\n <li>It is good practice to name your jar the same as this, for example\n     'MyPlugin.jar'.\n <li>Case sensitive.\n <li>The is the token referenced in {@link #getDepend()}, {@link\n     #getSoftDepend()}, and {@link #getLoadBefore()}.\n <li>Using spaces in the plugin's name is deprecated.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>name</code>.\n <p>\n Example:<blockquote><pre>name: MyPlugin</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getVersion","comment_text":"Gives the version of the plugin.\n <ul>\n <li>Version is an arbitrary string, however the most common format is\n     MajorRelease.MinorRelease.Build (eg: 1.4.1).\n <li>Typically you will increment this every time you release a new\n     feature or bug fix.\n <li>Displayed when a user types <code>/version PluginName</code>\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>version</code>.\n <p>\n Example:<blockquote><pre>version: 1.4.1</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMain","comment_text":"Gives the fully qualified name of the main class for a plugin. The\n format should follow the {@link ClassLoader#loadClass(String)} syntax\n to successfully be resolved at runtime. For most plugins, this is the\n class that extends {@link JavaPlugin}.\n <ul>\n <li>This must contain the full namespace including the class file\n     itself.\n <li>If your namespace is <code>org.bukkit.plugin</code>, and your class\n     file is called <code>MyPlugin</code> then this must be\n     <code>org.bukkit.plugin.MyPlugin</code>\n <li>No plugin can use <code>org.bukkit.</code> as a base package for\n     <b>any class</b>, including the main class.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>main</code>.\n <p>\n Example:\n <blockquote><pre>main: org.bukkit.plugin.MyPlugin</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDescription","comment_text":"Gives a human-friendly description of the functionality the plugin\n provides.\n <ul>\n <li>The description can have multiple lines.\n <li>Displayed when a user types <code>/version PluginName</code>\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>description</code>.\n <p>\n Example:\n <blockquote><pre>description: This plugin is so 31337. You can set yourself on fire.</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLoad","comment_text":"Gives the phase of server startup that the plugin should be loaded.\n <ul>\n <li>Possible values are in {@link PluginLoadOrder}.\n <li>Defaults to {@link PluginLoadOrder#POSTWORLD}.\n <li>Certain caveats apply to each phase.\n <li>When different, {@link #getDepend()}, {@link #getSoftDepend()}, and\n     {@link #getLoadBefore()} become relative in order loaded per-phase.\n     If a plugin loads at <code>STARTUP</code>, but a dependency loads\n     at <code>POSTWORLD</code>, the dependency will not be loaded before\n     the plugin is loaded.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>load</code>.\n <p>\n Example:<blockquote><pre>load: STARTUP</pre></blockquote>","return_type":"org.bukkit.plugin.PluginLoadOrder","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAuthors","comment_text":"Gives the list of authors for the plugin.\n <ul>\n <li>Gives credit to the developer.\n <li>Used in some server error messages to provide helpful feedback on\n     who to contact when an error occurs.\n <li>A bukkit.org forum handle or email address is recommended.\n <li>Is displayed when a user types <code>/version PluginName</code>\n <li><code>authors</code> must be in <a\n     href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n     format</a>.\n </ul>\n <p>\n In the plugin.yml, this has two entries, <code>author</code> and\n <code>authors</code>.\n <p>\n Single author example:\n <blockquote><pre>author: CaptainInflamo</pre></blockquote>\n Multiple author example:\n <blockquote><pre>authors: [Cogito, verrier, EvilSeph]</pre></blockquote>\n When both are specified, author will be the first entry in the list, so\n this example:\n <blockquote><pre>author: Grum\nauthors:\n- feildmaster\n- amaranth</pre></blockquote>\n Is equivilant to this example:\n <pre>authors: [Grum, feildmaster, aramanth]</pre>","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getWebsite","comment_text":"Gives the plugin's or plugin's author's website.\n <ul>\n <li>A link to the Curse page that includes documentation and downloads\n     is highly recommended.\n <li>Displayed when a user types <code>/version PluginName</code>\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>website</code>.\n <p>\n Example:\n <blockquote><pre>website: http://www.curse.com/server-mods/minecraft/myplugin</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDepend","comment_text":"Gives a list of other plugins that the plugin requires.\n <ul>\n <li>Use the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n <li>If any plugin listed here is not found, your plugin will fail to\n     load at startup.\n <li>If multiple plugins list each other in <code>depend</code>,\n     creating a network with no individual plugin does not list another\n     plugin in the <a\n     href=https://en.wikipedia.org/wiki/Circular_dependency>network</a>,\n     all plugins in that network will fail.\n <li><code>depend</code> must be in must be in <a\n     href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n     format</a>.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>depend</code>.\n <p>\n Example:\n <blockquote><pre>depend:\n- OnePlugin\n- AnotherPlugin</pre></blockquote>","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getSoftDepend","comment_text":"Gives a list of other plugins that the plugin requires for full\n functionality. The {@link PluginManager} will make best effort to treat\n all entries here as if they were a {@link #getDepend() dependency}, but\n will never fail because of one of these entries.\n <ul>\n <li>Use the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n <li>When an unresolvable plugin is listed, it will be ignored and does\n     not affect load order.\n <li>When a circular dependency occurs (a network of plugins depending\n     or soft-dependending each other), it will arbitrarily choose a\n     plugin that can be resolved when ignoring soft-dependencies.\n <li><code>softdepend</code> must be in <a\n     href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n     format</a>.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>softdepend</code>.\n <p>\n Example:\n <blockquote><pre>softdepend: [OnePlugin, AnotherPlugin]</pre></blockquote>","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLoadBefore","comment_text":"Gets the list of plugins that should consider this plugin a\n soft-dependency.\n <ul>\n <li>Use the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n <li>The plugin should load before any other plugins listed here.\n <li>Specifying another plugin here is strictly equivalent to having the\n     specified plugin's {@link #getSoftDepend()} include {@link\n     #getName() this plugin}.\n <li><code>loadbefore</code> must be in <a\n     href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n     format</a>.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>loadbefore</code>.\n <p>\n Example:\n <blockquote><pre>loadbefore:\n- OnePlugin\n- AnotherPlugin</pre></blockquote>","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPrefix","comment_text":"Gives the token to prefix plugin-specific logging messages with.\n <ul>\n <li>This includes all messages using {@link Plugin#getLogger()}.\n <li>If not specified, the server uses the plugin's {@link #getName()\n     name}.\n <li>This should clearly indicate what plugin is being logged.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>prefix</code>.\n <p>\n Example:<blockquote><pre>prefix: ex-why-zee</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getCommands","comment_text":"Gives the map of command-name to command-properties. Each entry in this\n map corresponds to a single command and the respective values are the\n properties of the command. Each property, <i>with the exception of\n aliases</i>, can be defined at runtime using methods in {@link\n PluginCommand} and are defined here only as a convenience.\n <table border=1>\n <caption>The command section's description</caption>\n <tr>\n     <th>Node</th>\n     <th>Method</th>\n     <th>Type</th>\n     <th>Description</th>\n     <th>Example</th>\n </tr><tr>\n     <td><code>description</code></td>\n     <td>{@link PluginCommand#setDescription(String)}</td>\n     <td>String</td>\n     <td>A user-friendly description for a command. It is useful for\n         documentation purposes as well as in-game help.</td>\n     <td><blockquote><pre>description: Set yourself on fire</pre></blockquote></td>\n </tr><tr>\n     <td><code>aliases</code></td>\n     <td>{@link PluginCommand#setAliases(List)}</td>\n     <td>String or <a\n         href=\"http://en.wikipedia.org/wiki/YAML#Lists\">List</a> of\n         strings</td>\n     <td>Alternative command names, with special usefulness for commands\n         that are already registered. <i>Aliases are not effective when\n         defined at runtime,</i> so the plugin description file is the\n         only way to have them properly defined.\n         <p>\n         Note: Command aliases may not have a colon in them.</td>\n     <td>Single alias format:\n         <blockquote><pre>aliases: combust_me</pre></blockquote> or\n         multiple alias format:\n         <blockquote><pre>aliases: [combust_me, combustMe]</pre></blockquote></td>\n </tr><tr>\n     <td><code>permission</code></td>\n     <td>{@link PluginCommand#setPermission(String)}</td>\n     <td>String</td>\n     <td>The name of the {@link Permission} required to use the command.\n         A user without the permission will receive the specified\n         message (see {@linkplain\n         PluginCommand#setPermissionMessage(String) below}), or a\n         standard one if no specific message is defined. Without the\n         permission node, no {@link\n         PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or\n         {@link PluginCommand#setTabCompleter(TabCompleter)\n         TabCompleter} will be called.</td>\n     <td><blockquote><pre>permission: inferno.flagrate</pre></blockquote></td>\n </tr><tr>\n     <td><code>permission-message</code></td>\n     <td>{@link PluginCommand#setPermissionMessage(String)}</td>\n     <td>String</td>\n     <td><ul>\n         <li>Displayed to a player that attempts to use a command, but\n             does not have the required permission. See {@link\n             PluginCommand#getPermission() above}.\n         <li>&lt;permission&gt; is a macro that is replaced with the\n             permission node required to use the command.\n         <li>Using empty quotes is a valid way to indicate nothing\n             should be displayed to a player.\n         </ul></td>\n     <td><blockquote><pre>permission-message: You do not have /&lt;permission&gt;</pre></blockquote></td>\n </tr><tr>\n     <td><code>usage</code></td>\n     <td>{@link PluginCommand#setUsage(String)}</td>\n     <td>String</td>\n     <td>This message is displayed to a player when the {@link\n         PluginCommand#setExecutor(CommandExecutor)} {@linkplain\n         CommandExecutor#onCommand(CommandSender,Command,String,String[])\n         returns false}. &lt;command&gt; is a macro that is replaced\n         the command issued.</td>\n     <td><blockquote><pre>usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?</pre></blockquote>\n         It is worth noting that to use a colon in a yaml, like\n         <code>`usage: Usage: /god [player]'</code>, you need to\n         <a href=\"http://yaml.org/spec/current.html#id2503232\">surround\n         the message with double-quote</a>:\n         <blockquote><pre>usage: \"Usage: /god [player]\"</pre></blockquote></td>\n </tr>\n </table>\n The commands are structured as a hiearchy of <a\n href=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\n The primary (top-level, no intendentation) node is\n `<code>commands</code>', while each individual command name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n <p>\n Here is an example bringing together the piecemeal examples above, as\n well as few more definitions:<blockquote><pre>\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    permission-message: You do not have /&lt;permission&gt;\n    usage: Syntax error! Perhaps you meant /&lt;command&gt; PlayerName?\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases:\n    - burning_deaths\n    - burningDeaths\n    permission: inferno.burningdeaths\n    usage: |\n      /&lt;command&gt; [player]\n      Example: /&lt;command&gt; - see how many times you have burned to death\n      Example: /&lt;command&gt; CaptainIce - see how many times CaptainIce has burned to death\n  # The next command has no description, aliases, etc. defined, but is still valid\n  # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\n  apocalypse:\n</pre></blockquote>\n Note: Command names may not have a colon in their name.","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermissions","comment_text":"Gives the list of permissions the plugin will register at runtime,\n immediately proceding enabling. The format for defining permissions is\n a map from permission name to properties. To represent a map without\n any specific property, empty <a\n href=\"http://yaml.org/spec/current.html#id2502702\">curly-braces</a> (\n <code>&#123;&#125;</code> ) may be used (as a null value is not\n accepted, unlike the {@link #getCommands() commands} above).\n <p>\n A list of optional properties for permissions:\n <table border=1>\n <caption>The permission section's description</caption>\n <tr>\n     <th>Node</th>\n     <th>Description</th>\n     <th>Example</th>\n </tr><tr>\n     <td><code>description</code></td>\n     <td>Plaintext (user-friendly) description of what the permission\n         is for.</td>\n     <td><blockquote><pre>description: Allows you to set yourself on fire</pre></blockquote></td>\n </tr><tr>\n     <td><code>default</code></td>\n     <td>The default state for the permission, as defined by {@link\n         Permission#getDefault()}. If not defined, it will be set to\n         the value of {@link PluginDescriptionFile#getPermissionDefault()}.\n         <p>\n         For reference:<ul>\n         <li><code>true</code> - Represents a positive assignment to\n             {@link Permissible permissibles}.\n         <li><code>false</code> - Represents no assignment to {@link\n             Permissible permissibles}.\n         <li><code>op</code> - Represents a positive assignment to\n             {@link Permissible#isOp() operator permissibles}.\n         <li><code>notop</code> - Represents a positive assignment to\n             {@link Permissible#isOp() non-operator permissibiles}.\n         </ul></td>\n     <td><blockquote><pre>default: true</pre></blockquote></td>\n </tr><tr>\n     <td><code>children</code></td>\n     <td>Allows other permissions to be set as a {@linkplain\n         Permission#getChildren() relation} to the parent permission.\n         When a parent permissions is assigned, child permissions are\n         respectively assigned as well.\n         <ul>\n         <li>When a parent permission is assigned negatively, child\n             permissions are assigned based on an inversion of their\n             association.\n         <li>When a parent permission is assigned positively, child\n             permissions are assigned based on their association.\n         </ul>\n         <p>\n         Child permissions may be defined in a number of ways:<ul>\n         <li>Children may be defined as a <a\n             href=\"http://en.wikipedia.org/wiki/YAML#Lists\">list</a> of\n             names. Using a list will treat all children associated\n             positively to their parent.\n         <li>Children may be defined as a map. Each permission name maps\n             to either a boolean (representing the association), or a\n             nested permission definition (just as another permission).\n             Using a nested definition treats the child as a positive\n             association.\n         <li>A nested permission definition must be a map of these same\n             properties. To define a valid nested permission without\n             defining any specific property, empty curly-braces (\n             <code>&#123;&#125;</code> ) must be used.\n          <li>A nested permission may carry it's own nested permissions\n              as children, as they may also have nested permissions, and\n              so forth. There is no direct limit to how deep the\n              permission tree is defined.\n         </ul></td>\n     <td>As a list:\n         <blockquote><pre>children: [inferno.flagrate, inferno.burningdeaths]</pre></blockquote>\n         Or as a mapping:\n         <blockquote><pre>children:\n  inferno.flagrate: true\n  inferno.burningdeaths: true</pre></blockquote>\n         An additional example showing basic nested values can be seen\n         <a href=\"doc-files/permissions-example_plugin.yml\">here</a>.\n         </td>\n </tr>\n </table>\n The permissions are structured as a hiearchy of <a\n href=\"http://yaml.org/spec/current.html#id2502325\">nested mappings</a>.\n The primary (top-level, no intendentation) node is\n `<code>permissions</code>', while each individual permission name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n <p>\n Here is an example using some of the properties:<blockquote><pre>\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n  inferno.flagate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n</pre></blockquote>\n Another example, with nested definitions, can be found <a\n href=\"doc-files/permissions-example_plugin.yml\">here</a>.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPermissionDefault","comment_text":"Gives the default {@link Permission#getDefault() default} state of\n {@link #getPermissions() permissions} registered for the plugin.\n <ul>\n <li>If not specified, it will be {@link PermissionDefault#OP}.\n <li>It is matched using {@link PermissionDefault#getByName(String)}\n <li>It only affects permissions that do not define the\n     <code>default</code> node.\n <li>It may be any value in {@link PermissionDefault}.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>default-permission</code>.\n <p>\n Example:<blockquote><pre>default-permission: NOT_OP</pre></blockquote>","return_type":"org.bukkit.permissions.PermissionDefault","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAwareness","comment_text":"Gives a set of every {@link PluginAwareness} for a plugin. An awareness\n dictates something that a plugin developer acknowledges when the plugin\n is compiled. Some implementions may define extra awarenesses that are\n not included in the API. Any unrecognized\n awareness (one unsupported or in a future version) will cause a dummy\n object to be created instead of failing.\n \n <ul>\n <li>Currently only supports the enumerated values in {@link\n     PluginAwareness.Flags}.\n <li>Each awareness starts the identifier with bang-at\n     (<code>!@</code>).\n <li>Unrecognized (future / unimplemented) entries are quietly replaced\n     by a generic object that implements PluginAwareness.\n <li>A type of awareness must be defined by the runtime and acknowledged\n     by the API, effectively discluding any derived type from any\n     plugin's classpath.\n <li><code>awareness</code> must be in <a\n     href=\"http://en.wikipedia.org/wiki/YAML#Lists\">YAML list\n     format</a>.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>awareness</code>.\n <p>\n Example:<blockquote><pre>awareness:\n- !@UTF8</pre></blockquote>\n <p>\n <b>Note:</b> Although unknown versions of some future awareness are\n gracefully substituted, previous versions of Bukkit (ones prior to the\n first implementation of awareness) will fail to load a plugin that\n defines any awareness.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFullName","comment_text":"Returns the name of a plugin, including the version. This method is\n provided for convenience; it uses the {@link #getName()} and {@link\n #getVersion()} entries.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getAPIVersion","comment_text":"Gives the API version which this plugin is designed to support. No\n specific format is guaranteed.\n <ul>\n <li>Refer to release notes for supported API versions.\n </ul>\n <p>\n In the plugin.yml, this entry is named <code>api-version</code>.\n <p>\n Example:<blockquote><pre>api-version: 1.13</pre></blockquote>","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getClassLoaderOf","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"save","comment_text":"Saves this PluginDescriptionFile to the given writer","return_type":"void","return_type_dimension":"","parameters":[{"name":"writer","comment_text":"Writer to output this file to","type":"java.io.Writer","type_dimension":""}],"throws":[]},{"name":"getRawName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginBase","interfaces":["org.bukkit.plugin.Plugin"],"superclass":"java.lang.Object","comment_text":"Represents a base {@link Plugin}\n <p>\n Extend this class if your plugin is not a {@link\n org.bukkit.plugin.java.JavaPlugin}","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginBase","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"getName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginAwareness","interfaces":[],"superclass":"","comment_text":"Represents a concept that a plugin is aware of.\n <p>\n The internal representation may be singleton, or be a parameterized\n instance, but must be immutable.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.PluginAwareness.Flags","interfaces":["org.bukkit.plugin.PluginAwareness"],"superclass":"java.lang.Enum","comment_text":"Each entry here represents a particular plugin's awareness. These can\n be checked by using {@link PluginDescriptionFile#getAwareness()}.{@link\n Set#contains(Object) contains(flag)}.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.plugin.PluginAwareness.Flags","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.plugin.PluginAwareness.Flags","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["UTF8"]},{"name":"org.bukkit.plugin.Plugin","interfaces":["org.bukkit.command.TabExecutor"],"superclass":"","comment_text":"Represents a Plugin\n <p>\n The use of {@link PluginBase} is recommended for actual Implementation","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getDataFolder","comment_text":"Returns the folder that the plugin data's files are located in. The\n folder may not yet exist.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDescription","comment_text":"Returns the plugin.yaml file containing the details for this plugin","return_type":"org.bukkit.plugin.PluginDescriptionFile","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConfig","comment_text":"Gets a {@link FileConfiguration} for this plugin, read through\n \"config.yml\"\n <p>\n If there is a default config.yml embedded in this plugin, it will be\n provided as a default for this Configuration.","return_type":"org.bukkit.configuration.file.FileConfiguration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getResource","comment_text":"Gets an embedded resource in this plugin","return_type":"java.io.InputStream","return_type_dimension":"","parameters":[{"name":"filename","comment_text":"Filename of the resource","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"saveConfig","comment_text":"Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"saveDefaultConfig","comment_text":"Saves the raw contents of the default config.yml file to the location\n retrievable by {@link #getConfig()}.\n <p>\n This should fail silently if the config.yml already exists.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"saveResource","comment_text":"Saves the raw contents of any resource embedded with a plugin's .jar\n file assuming it can be found using {@link #getResource(String)}.\n <p>\n The resource is saved into the plugin's data folder using the same\n hierarchy as the .jar file (subdirectories are preserved).","return_type":"void","return_type_dimension":"","parameters":[{"name":"resourcePath","comment_text":"the embedded resource path to look for within the\n     plugin's .jar file. (No preceding slash).","type":"java.lang.String","type_dimension":""},{"name":"replace","comment_text":"if true, the embedded resource will overwrite the\n     contents of an existing file.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"reloadConfig","comment_text":"Discards any data in {@link #getConfig()} and reloads from disk.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPluginLoader","comment_text":"Gets the associated PluginLoader responsible for this plugin","return_type":"org.bukkit.plugin.PluginLoader","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServer","comment_text":"Returns the Server instance currently running this plugin","return_type":"org.bukkit.Server","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEnabled","comment_text":"Returns a value indicating whether or not this plugin is currently\n enabled","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"onDisable","comment_text":"Called when this plugin is disabled","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"onLoad","comment_text":"Called after a plugin is loaded but before it has been enabled.\n <p>\n When multiple plugins are loaded, the onLoad() for all plugins is\n called before any onEnable() is called.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"onEnable","comment_text":"Called when this plugin is enabled","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isNaggable","comment_text":"Simple boolean if we can still nag to the logs about things","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNaggable","comment_text":"Set naggable state","return_type":"void","return_type_dimension":"","parameters":[{"name":"canNag","comment_text":"is this plugin still naggable?","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getDefaultWorldGenerator","comment_text":"Gets a {@link ChunkGenerator} for use in a default world, as specified\n in the server configuration","return_type":"org.bukkit.generator.ChunkGenerator","return_type_dimension":"","parameters":[{"name":"worldName","comment_text":"Name of the world that this will be applied to","type":"java.lang.String","type_dimension":""},{"name":"id","comment_text":"Unique ID, if any, that was specified to indicate which\n     generator was requested","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getLogger","comment_text":"Returns the plugin logger associated with this server's logger. The\n returned logger automatically tags all log messages with the plugin's\n name.","return_type":"java.util.logging.Logger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Returns the name of the plugin.\n <p>\n This should return the bare name of the plugin and should be used for\n comparison.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.InvalidPluginException","interfaces":[],"superclass":"java.lang.Exception","comment_text":"Thrown when attempting to load an invalid Plugin file","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InvalidPluginException","comment_text":"Constructs a new InvalidPluginException based on the given Exception","parameters":[{"name":"cause","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"InvalidPluginException","comment_text":"Constructs a new InvalidPluginException","parameters":[],"throws":[]},{"name":"InvalidPluginException","comment_text":"Constructs a new InvalidPluginException with the specified detail\n message and cause.","parameters":[{"name":"message","comment_text":"the detail message (which is saved for later retrieval\n     by the getMessage() method).","type":"java.lang.String","type_dimension":""},{"name":"cause","comment_text":"the cause (which is saved for later retrieval by the\n     getCause() method). (A null value is permitted, and indicates that\n     the cause is nonexistent or unknown.)","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"InvalidPluginException","comment_text":"Constructs a new InvalidPluginException with the specified detail\n message","parameters":[{"name":"message","comment_text":"TThe detail message is saved for later retrieval by the\n     getMessage() method.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.InvalidDescriptionException","interfaces":[],"superclass":"java.lang.Exception","comment_text":"Thrown when attempting to load an invalid PluginDescriptionFile","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"InvalidDescriptionException","comment_text":"Constructs a new InvalidDescriptionException based on the given\n Exception","parameters":[{"name":"cause","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""},{"name":"message","comment_text":"Brief message explaining the cause of the exception","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"InvalidDescriptionException","comment_text":"Constructs a new InvalidDescriptionException based on the given\n Exception","parameters":[{"name":"cause","comment_text":"Exception that triggered this Exception","type":"java.lang.Throwable","type_dimension":""}],"throws":[]},{"name":"InvalidDescriptionException","comment_text":"Constructs a new InvalidDescriptionException with the given message","parameters":[{"name":"message","comment_text":"Brief message explaining the cause of the exception","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"InvalidDescriptionException","comment_text":"Constructs a new InvalidDescriptionException","parameters":[],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.IllegalPluginAccessException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown when a plugin attempts to interact with the server when it is not\n enabled","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"IllegalPluginAccessException","comment_text":"Creates a new instance of <code>IllegalPluginAccessException</code>\n without detail message.","parameters":[],"throws":[]},{"name":"IllegalPluginAccessException","comment_text":"Constructs an instance of <code>IllegalPluginAccessException</code>\n with the specified detail message.","parameters":[{"name":"msg","comment_text":"the detail message.","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.EventExecutor","interfaces":[],"superclass":"","comment_text":"Interface which defines the class for event call backs to plugins","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"execute","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"event","comment_text":"","type":"org.bukkit.event.Event","type_dimension":""}],"throws":[{"name":"org.bukkit.event.EventException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.plugin.AuthorNagException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"AuthorNagException","comment_text":"Constructs a new AuthorNagException based on the given Exception","parameters":[{"name":"message","comment_text":"Brief message explaining the cause of the exception","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getMessage","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.java.JavaPluginLoader","interfaces":["org.bukkit.plugin.PluginLoader"],"superclass":"java.lang.Object","comment_text":"Represents a Java plugin loader, allowing plugins in the form of .jar","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"JavaPluginLoader","comment_text":"This class was not meant to be constructed explicitly","parameters":[{"name":"instance","comment_text":"the server instance","type":"org.bukkit.Server","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"loadPlugin","comment_text":"","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[{"name":"file","comment_text":"","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidPluginException","comment_text":""}]},{"name":"getPluginDescription","comment_text":"","return_type":"org.bukkit.plugin.PluginDescriptionFile","return_type_dimension":"","parameters":[{"name":"file","comment_text":"","type":"java.io.File","type_dimension":""}],"throws":[{"name":"org.bukkit.plugin.InvalidDescriptionException","comment_text":""}]},{"name":"getPluginFileFilters","comment_text":"","return_type":"java.util.regex.Pattern","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"createRegisteredListeners","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[{"name":"listener","comment_text":"","type":"org.bukkit.event.Listener","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"enablePlugin","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"disablePlugin","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.java.JavaPlugin","interfaces":[],"superclass":"org.bukkit.plugin.PluginBase","comment_text":"Represents a Java plugin","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"JavaPlugin","comment_text":"","parameters":[],"throws":[]},{"name":"JavaPlugin","comment_text":"","parameters":[{"name":"loader","comment_text":"","type":"org.bukkit.plugin.java.JavaPluginLoader","type_dimension":""},{"name":"description","comment_text":"","type":"org.bukkit.plugin.PluginDescriptionFile","type_dimension":""},{"name":"dataFolder","comment_text":"","type":"java.io.File","type_dimension":""},{"name":"file","comment_text":"","type":"java.io.File","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getDataFolder","comment_text":"Returns the folder that the plugin data's files are located in. The\n folder may not yet exist.","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPluginLoader","comment_text":"Gets the associated PluginLoader responsible for this plugin","return_type":"org.bukkit.plugin.PluginLoader","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getServer","comment_text":"Returns the Server instance currently running this plugin","return_type":"org.bukkit.Server","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isEnabled","comment_text":"Returns a value indicating whether or not this plugin is currently\n enabled","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getFile","comment_text":"Returns the file which contains this plugin","return_type":"java.io.File","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDescription","comment_text":"Returns the plugin.yaml file containing the details for this plugin","return_type":"org.bukkit.plugin.PluginDescriptionFile","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getConfig","comment_text":"","return_type":"org.bukkit.configuration.file.FileConfiguration","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTextResource","comment_text":"Provides a reader for a text file located inside the jar.\n <p>\n The returned reader will read text with the UTF-8 charset.","return_type":"java.io.Reader","return_type_dimension":"","parameters":[{"name":"file","comment_text":"the filename of the resource to load","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"reloadConfig","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"saveConfig","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"saveDefaultConfig","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"saveResource","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"resourcePath","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"replace","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getResource","comment_text":"","return_type":"java.io.InputStream","return_type_dimension":"","parameters":[{"name":"filename","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getClassLoader","comment_text":"Returns the ClassLoader which holds this plugin","return_type":"java.lang.ClassLoader","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setEnabled","comment_text":"Sets the enabled state of this plugin","return_type":"void","return_type_dimension":"","parameters":[{"name":"enabled","comment_text":"true if enabled, otherwise false","type":"boolean","type_dimension":""}],"throws":[]},{"name":"onCommand","comment_text":"{@inheritDoc}","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""},{"name":"label","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"onTabComplete","comment_text":"{@inheritDoc}","return_type":"java.util.List","return_type_dimension":"","parameters":[{"name":"sender","comment_text":"","type":"org.bukkit.command.CommandSender","type_dimension":""},{"name":"command","comment_text":"","type":"org.bukkit.command.Command","type_dimension":""},{"name":"alias","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"args","comment_text":"","type":"java.lang.String","type_dimension":"[]"}],"throws":[]},{"name":"getCommand","comment_text":"Gets the command with the given name, specific to this plugin. Commands\n need to be registered in the {@link PluginDescriptionFile#getCommands()\n PluginDescriptionFile} to exist at runtime.","return_type":"org.bukkit.command.PluginCommand","return_type_dimension":"","parameters":[{"name":"name","comment_text":"name or alias of the command","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"onLoad","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"onDisable","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"onEnable","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDefaultWorldGenerator","comment_text":"","return_type":"org.bukkit.generator.ChunkGenerator","return_type_dimension":"","parameters":[{"name":"worldName","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"id","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isNaggable","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setNaggable","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"canNag","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"getLogger","comment_text":"","return_type":"java.util.logging.Logger","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlugin","comment_text":"This method provides fast access to the plugin that has {@link\n #getProvidingPlugin(Class) provided} the given plugin class, which is\n usually the plugin that implemented it.\n <p>\n An exception to this would be if plugin's jar that contained the class\n does not extend the class, where the intended plugin would have\n resided in a different jar / classloader.","return_type":"T","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"the class desired","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"getProvidingPlugin","comment_text":"This method provides fast access to the plugin that has provided the\n given class.","return_type":"org.bukkit.plugin.java.JavaPlugin","return_type_dimension":"","parameters":[{"name":"clazz","comment_text":"a class belonging to a plugin","type":"java.lang.Class","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.StandardMessenger","interfaces":["org.bukkit.plugin.messaging.Messenger"],"superclass":"java.lang.Object","comment_text":"Standard implementation to {@link Messenger}","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"StandardMessenger","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"isReservedChannel","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"registerOutgoingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterOutgoingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterOutgoingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerIncomingPluginChannel","comment_text":"","return_type":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"listener","comment_text":"","type":"org.bukkit.plugin.messaging.PluginMessageListener","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"listener","comment_text":"","type":"org.bukkit.plugin.messaging.PluginMessageListener","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getOutgoingChannels","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOutgoingChannels","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannels","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIncomingChannels","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isRegistrationValid","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"registration","comment_text":"","type":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","type_dimension":""}],"throws":[]},{"name":"isIncomingChannelRegistered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isOutgoingChannelRegistered","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"dispatchIncomingMessage","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"message","comment_text":"","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"validateChannel","comment_text":"Validates a Plugin Channel name.","return_type":"void","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"Channel name to validate.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"validateAndCorrectChannel","comment_text":"Validates and corrects a Plugin Channel name. Method is not reentrant / idempotent.","return_type":"java.lang.String","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"Channel name to validate.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"validatePluginMessage","comment_text":"Validates the input of a Plugin Message, ensuring the arguments are all\n valid.","return_type":"void","return_type_dimension":"","parameters":[{"name":"messenger","comment_text":"Messenger to use for validation.","type":"org.bukkit.plugin.messaging.Messenger","type_dimension":""},{"name":"source","comment_text":"Source plugin of the Message.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Plugin Channel to send the message by.","type":"java.lang.String","type_dimension":""},{"name":"message","comment_text":"Raw message payload to send.","type":"byte","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.ReservedChannelException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown if a plugin attempts to register for a reserved channel (such as\n \"REGISTER\")","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ReservedChannelException","comment_text":"","parameters":[],"throws":[]},{"name":"ReservedChannelException","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.PluginMessageRecipient","interfaces":[],"superclass":"","comment_text":"Represents a possible recipient for a Plugin Message.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"sendPluginMessage","comment_text":"Sends this recipient a Plugin Message on the specified outgoing\n channel.\n <p>\n The message may not be larger than {@link Messenger#MAX_MESSAGE_SIZE}\n bytes, and the plugin must be registered to send messages on the\n specified channel.","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"The plugin that sent this message.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"The channel to send this message on.","type":"java.lang.String","type_dimension":""},{"name":"message","comment_text":"The raw message to send.","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"getListeningPluginChannels","comment_text":"Gets a set containing all the Plugin Channels that this client is\n listening on.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","interfaces":[],"superclass":"java.lang.Object","comment_text":"Contains information about a {@link Plugin}s registration to a plugin\n channel.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PluginMessageListenerRegistration","comment_text":"","parameters":[{"name":"messenger","comment_text":"","type":"org.bukkit.plugin.messaging.Messenger","type_dimension":""},{"name":"plugin","comment_text":"","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"listener","comment_text":"","type":"org.bukkit.plugin.messaging.PluginMessageListener","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getChannel","comment_text":"Gets the plugin channel that this registration is about.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getListener","comment_text":"Gets the registered listener described by this registration.","return_type":"org.bukkit.plugin.messaging.PluginMessageListener","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPlugin","comment_text":"Gets the plugin that this registration is for.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isValid","comment_text":"Checks if this registration is still valid.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.PluginMessageListener","interfaces":[],"superclass":"","comment_text":"A listener for a specific Plugin Channel, which will receive notifications\n of messages sent from a client.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"onPluginMessageReceived","comment_text":"A method that will be thrown when a PluginMessageSource sends a plugin\n message on a registered channel.","return_type":"void","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"Channel that the message was sent through.","type":"java.lang.String","type_dimension":""},{"name":"player","comment_text":"Source of the message.","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"message","comment_text":"The raw message that was sent.","type":"byte","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.PluginChannelDirection","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents the different directions a plugin channel may go.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.plugin.messaging.PluginChannelDirection","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.plugin.messaging.PluginChannelDirection","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["INCOMING","OUTGOING"]},{"name":"org.bukkit.plugin.messaging.Messenger","interfaces":[],"superclass":"","comment_text":"A class responsible for managing the registrations of plugin channels and\n their listeners.\n\n Channel names must contain a colon separator and consist of only [a-z0-9/._-]\n - i.e. they MUST be valid {@link NamespacedKey}. The \"BungeeCord\" channel is\n an exception and may only take this form.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"MAX_MESSAGE_SIZE","comment_text":"Represents the largest size that an individual Plugin Message may be.","type":"int","type_dimension":""},{"name":"MAX_CHANNEL_SIZE","comment_text":"Represents the largest size that a Plugin Channel may be.","type":"int","type_dimension":""}],"methods":[{"name":"isReservedChannel","comment_text":"Checks if the specified channel is a reserved name.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"Channel name to check.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"registerOutgoingPluginChannel","comment_text":"Registers the specific plugin to the requested outgoing plugin channel,\n allowing it to send messages through that channel to any clients.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wishes to send messages through the channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to register.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterOutgoingPluginChannel","comment_text":"Unregisters the specific plugin from the requested outgoing plugin\n channel, no longer allowing it to send messages through that channel to\n any clients.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that no longer wishes to send messages through the\n     channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to unregister.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterOutgoingPluginChannel","comment_text":"Unregisters the specific plugin from all outgoing plugin channels, no\n longer allowing it to send any plugin messages.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that no longer wishes to send plugin messages.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"registerIncomingPluginChannel","comment_text":"Registers the specific plugin for listening on the requested incoming\n plugin channel, allowing it to act upon any plugin messages.","return_type":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wishes to register to this channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to register.","type":"java.lang.String","type_dimension":""},{"name":"listener","comment_text":"Listener to receive messages on.","type":"org.bukkit.plugin.messaging.PluginMessageListener","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"Unregisters the specific plugin's listener from listening on the\n requested incoming plugin channel, no longer allowing it to act upon\n any plugin messages.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wishes to unregister from this channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to unregister.","type":"java.lang.String","type_dimension":""},{"name":"listener","comment_text":"Listener to stop receiving messages on.","type":"org.bukkit.plugin.messaging.PluginMessageListener","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"Unregisters the specific plugin from listening on the requested\n incoming plugin channel, no longer allowing it to act upon any plugin\n messages.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wishes to unregister from this channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to unregister.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"unregisterIncomingPluginChannel","comment_text":"Unregisters the specific plugin from listening on all plugin channels\n through all listeners.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that wishes to unregister from this channel.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getOutgoingChannels","comment_text":"Gets a set containing all the outgoing plugin channels.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOutgoingChannels","comment_text":"Gets a set containing all the outgoing plugin channels that the\n specified plugin is registered to.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to retrieve channels for.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannels","comment_text":"Gets a set containing all the incoming plugin channels.","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getIncomingChannels","comment_text":"Gets a set containing all the incoming plugin channels that the\n specified plugin is registered for.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to retrieve channels for.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to retrieve registrations for.","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"Gets a set containing all the incoming plugin channel registrations\n that are on the requested channel.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"channel","comment_text":"Channel to retrieve registrations for.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getIncomingChannelRegistrations","comment_text":"Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has on the requested channel.","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to retrieve registrations for.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to filter registrations by.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isRegistrationValid","comment_text":"Checks if the specified plugin message listener registration is valid.\n <p>\n A registration is considered valid if it has not be unregistered and\n that the plugin is still enabled.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"registration","comment_text":"Registration to check.","type":"org.bukkit.plugin.messaging.PluginMessageListenerRegistration","type_dimension":""}],"throws":[]},{"name":"isIncomingChannelRegistered","comment_text":"Checks if the specified plugin has registered to receive incoming\n messages through the requested channel.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to check registration for.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to test for.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"isOutgoingChannelRegistered","comment_text":"Checks if the specified plugin has registered to send outgoing messages\n through the requested channel.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin to check registration for.","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"channel","comment_text":"Channel to test for.","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"dispatchIncomingMessage","comment_text":"Dispatches the specified incoming message to any registered listeners.","return_type":"void","return_type_dimension":"","parameters":[{"name":"source","comment_text":"Source of the message.","type":"org.bukkit.entity.Player","type_dimension":""},{"name":"channel","comment_text":"Channel that the message was sent by.","type":"java.lang.String","type_dimension":""},{"name":"message","comment_text":"Raw payload of the message.","type":"byte","type_dimension":"[]"}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.MessageTooLargeException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown if a Plugin Message is sent that is too large to be sent.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"MessageTooLargeException","comment_text":"","parameters":[],"throws":[]},{"name":"MessageTooLargeException","comment_text":"","parameters":[{"name":"message","comment_text":"","type":"byte","type_dimension":"[]"}],"throws":[]},{"name":"MessageTooLargeException","comment_text":"","parameters":[{"name":"length","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"MessageTooLargeException","comment_text":"","parameters":[{"name":"msg","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.ChannelNotRegisteredException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown if a Plugin attempts to send a message on an unregistered channel.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChannelNotRegisteredException","comment_text":"","parameters":[],"throws":[]},{"name":"ChannelNotRegisteredException","comment_text":"","parameters":[{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.plugin.messaging.ChannelNameTooLongException","interfaces":[],"superclass":"java.lang.RuntimeException","comment_text":"Thrown if a Plugin Channel is too long.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChannelNameTooLongException","comment_text":"","parameters":[],"throws":[]},{"name":"ChannelNameTooLongException","comment_text":"","parameters":[{"name":"channel","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.potion.PotionType","interfaces":[],"superclass":"java.lang.Enum","comment_text":"This enum reflects and matches each potion state that can be obtained from\n the Creative mode inventory","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"getEffectType","comment_text":"","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInstant","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isUpgradeable","comment_text":"Checks if the potion type has an upgraded state.\n This refers to whether or not the potion type can be Tier 2,\n such as Potion of Fire Resistance II.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isExtendable","comment_text":"Checks if the potion type has an extended state.\n This refers to the extended duration potions","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDamageValue","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMaxLevel","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getByDamageValue","comment_text":"","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"","type":"int","type_dimension":""}],"throws":[]},{"name":"getByEffect","comment_text":"","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"","parameters":[{"name":"effectType","comment_text":"","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]}],"enumConstants":["UNCRAFTABLE","WATER","MUNDANE","THICK","AWKWARD","NIGHT_VISION","INVISIBILITY","JUMP","FIRE_RESISTANCE","SPEED","SLOWNESS","WATER_BREATHING","INSTANT_HEAL","INSTANT_DAMAGE","POISON","REGEN","STRENGTH","WEAKNESS","LUCK","TURTLE_MASTER","SLOW_FALLING"]},{"name":"org.bukkit.potion.PotionEffectTypeWrapper","interfaces":[],"superclass":"org.bukkit.potion.PotionEffectType","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PotionEffectTypeWrapper","comment_text":"","parameters":[{"name":"id","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getDurationModifier","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Get the potion type bound to this wrapper.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInstant","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.potion.PotionEffectType","interfaces":[],"superclass":"java.lang.Object","comment_text":"Represents a type of potion and its effect on an entity.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PotionEffectType","comment_text":"","parameters":[{"name":"id","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[{"name":"SPEED","comment_text":"Increases movement speed.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"SLOW","comment_text":"Decreases movement speed.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"FAST_DIGGING","comment_text":"Increases dig speed.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"SLOW_DIGGING","comment_text":"Decreases dig speed.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"INCREASE_DAMAGE","comment_text":"Increases damage dealt.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"HEAL","comment_text":"Heals an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"HARM","comment_text":"Hurts an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"JUMP","comment_text":"Increases jump height.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"CONFUSION","comment_text":"Warps vision on the client.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"REGENERATION","comment_text":"Regenerates health.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"DAMAGE_RESISTANCE","comment_text":"Decreases damage dealt to an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"FIRE_RESISTANCE","comment_text":"Stops fire damage.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"WATER_BREATHING","comment_text":"Allows breathing underwater.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"INVISIBILITY","comment_text":"Grants invisibility.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"BLINDNESS","comment_text":"Blinds an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"NIGHT_VISION","comment_text":"Allows an entity to see in the dark.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"HUNGER","comment_text":"Increases hunger.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"WEAKNESS","comment_text":"Decreases damage dealt by an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"POISON","comment_text":"Deals damage to an entity over time.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"WITHER","comment_text":"Deals damage to an entity over time and gives the health to the\n shooter.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"HEALTH_BOOST","comment_text":"Increases the maximum health of an entity.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"ABSORPTION","comment_text":"Increases the maximum health of an entity with health that cannot be\n regenerated, but is refilled every 30 seconds.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"SATURATION","comment_text":"Increases the food level of an entity each tick.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"GLOWING","comment_text":"Outlines the entity so that it can be seen from afar.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"LEVITATION","comment_text":"Causes the entity to float into the air.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"LUCK","comment_text":"Loot table luck.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"UNLUCK","comment_text":"Loot table unluck.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"SLOW_FALLING","comment_text":"Slows entity fall rate.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"CONDUIT_POWER","comment_text":"Effects granted by a nearby conduit. Includes enhanced underwater abilities.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"DOLPHINS_GRACE","comment_text":"Squee'ek uh'k kk'kkkk squeek eee'eek.","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"methods":[{"name":"createEffect","comment_text":"Creates a PotionEffect from this PotionEffectType, applying duration\n modifiers and checks.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[{"name":"duration","comment_text":"time in ticks","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"the effect's amplifier","type":"int","type_dimension":""}],"throws":[]},{"name":"getDurationModifier","comment_text":"Returns the duration modifier applied to effects of this type.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getId","comment_text":"Returns the unique ID of this type.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getName","comment_text":"Returns the name of this effect type.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInstant","comment_text":"Returns whether the effect of this type happens once, immediately.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"Returns the color of this effect type.","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getById","comment_text":"Gets the effect type specified by the unique id.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[{"name":"id","comment_text":"Unique ID to fetch","type":"int","type_dimension":""}],"throws":[]},{"name":"getByName","comment_text":"Gets the effect type specified by the given name.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of PotionEffectType to fetch","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"registerPotionEffectType","comment_text":"Registers an effect type with the given object.\n <p>\n Generally not to be used from within a plugin.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"PotionType to register","type":"org.bukkit.potion.PotionEffectType","type_dimension":""}],"throws":[]},{"name":"stopAcceptingRegistrations","comment_text":"Stops accepting any effect type registrations.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]},{"name":"values","comment_text":"Returns an array of all the registered {@link PotionEffectType}s.\n This array is not necessarily in any particular order and may contain null.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"[]","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.potion.PotionEffect","interfaces":["org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Represents a potion effect, that can be added to a {@link LivingEntity}. A\n potion effect has a duration that it will last for, an amplifier that will\n enhance its effects, and a {@link PotionEffectType}, that represents its\n effect on an entity.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PotionEffect","comment_text":"Creates a potion effect.","parameters":[{"name":"type","comment_text":"effect type","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"duration","comment_text":"measured in ticks, see {@link\n     PotionEffect#getDuration()}","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"the amplifier, see {@link PotionEffect#getAmplifier()}","type":"int","type_dimension":""},{"name":"ambient","comment_text":"the ambient status, see {@link PotionEffect#isAmbient()}","type":"boolean","type_dimension":""},{"name":"particles","comment_text":"the particle status, see {@link PotionEffect#hasParticles()}","type":"boolean","type_dimension":""},{"name":"icon","comment_text":"the icon status, see {@link PotionEffect#hasIcon()}","type":"boolean","type_dimension":""}],"throws":[]},{"name":"PotionEffect","comment_text":"Creates a potion effect with no defined color.","parameters":[{"name":"type","comment_text":"effect type","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"duration","comment_text":"measured in ticks, see {@link\n     PotionEffect#getDuration()}","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"the amplifier, see {@link PotionEffect#getAmplifier()}","type":"int","type_dimension":""},{"name":"ambient","comment_text":"the ambient status, see {@link PotionEffect#isAmbient()}","type":"boolean","type_dimension":""},{"name":"particles","comment_text":"the particle status, see {@link PotionEffect#hasParticles()}","type":"boolean","type_dimension":""}],"throws":[]},{"name":"PotionEffect","comment_text":"Creates a potion effect. Assumes that particles are visible","parameters":[{"name":"type","comment_text":"effect type","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"duration","comment_text":"measured in ticks, see {@link\n     PotionEffect#getDuration()}","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"the amplifier, see {@link PotionEffect#getAmplifier()}","type":"int","type_dimension":""},{"name":"ambient","comment_text":"the ambient status, see {@link PotionEffect#isAmbient()}","type":"boolean","type_dimension":""}],"throws":[]},{"name":"PotionEffect","comment_text":"Creates a potion effect. Assumes ambient is true.","parameters":[{"name":"type","comment_text":"Effect type","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"duration","comment_text":"measured in ticks","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"the amplifier for the effect","type":"int","type_dimension":""}],"throws":[]},{"name":"PotionEffect","comment_text":"Constructor for deserialization.","parameters":[{"name":"map","comment_text":"the map to deserialize from","type":"java.util.Map","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"apply","comment_text":"Attempts to add the effect represented by this object to the given\n {@link LivingEntity}.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"entity","comment_text":"The entity to add this effect to","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"getAmplifier","comment_text":"Returns the amplifier of this effect. A higher amplifier means the\n potion effect happens more often over its duration and in some cases\n has more effect on its target.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getDuration","comment_text":"Returns the duration (in ticks) that this effect will run for when\n applied to a {@link LivingEntity}.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Returns the {@link PotionEffectType} of this effect.","return_type":"org.bukkit.potion.PotionEffectType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isAmbient","comment_text":"Makes potion effect produce more, translucent, particles.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasParticles","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getColor","comment_text":"","return_type":"org.bukkit.Color","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasIcon","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.potion.PotionData","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PotionData","comment_text":"Instantiates a final PotionData object to contain information about a\n Potion","parameters":[{"name":"type","comment_text":"the type of the Potion","type":"org.bukkit.potion.PotionType","type_dimension":""},{"name":"extended","comment_text":"whether the potion is extended PotionType#isExtendable()\n must be true","type":"boolean","type_dimension":""},{"name":"upgraded","comment_text":"whether the potion is upgraded PotionType#isUpgradable()\n must be true","type":"boolean","type_dimension":""}],"throws":[]},{"name":"PotionData","comment_text":"","parameters":[{"name":"type","comment_text":"","type":"org.bukkit.potion.PotionType","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getType","comment_text":"Gets the type of the potion, Type matches up with each kind of craftable\n potion","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isUpgraded","comment_text":"Checks if the potion is in an upgraded state. This refers to whether or\n not the potion is Tier 2, such as Potion of Fire Resistance II.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isExtended","comment_text":"Checks if the potion is in an extended state. This refers to the extended\n duration potions","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.potion.PotionBrewer","interfaces":[],"superclass":"","comment_text":"Represents a brewer that can create {@link PotionEffect}s.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"createEffect","comment_text":"Creates a {@link PotionEffect} from the given {@link PotionEffectType},\n applying duration modifiers and checks.","return_type":"org.bukkit.potion.PotionEffect","return_type_dimension":"","parameters":[{"name":"potion","comment_text":"The type of potion","type":"org.bukkit.potion.PotionEffectType","type_dimension":""},{"name":"duration","comment_text":"The duration in ticks","type":"int","type_dimension":""},{"name":"amplifier","comment_text":"The amplifier of the effect","type":"int","type_dimension":""}],"throws":[]},{"name":"getEffectsFromDamage","comment_text":"Returns a collection of {@link PotionEffect} that would be applied from\n a potion with the given data value.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"The data value of the potion","type":"int","type_dimension":""}],"throws":[]},{"name":"getEffects","comment_text":"Returns a collection of {@link PotionEffect} that would be applied from\n a potion with the given type.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The type of the potion","type":"org.bukkit.potion.PotionType","type_dimension":""},{"name":"upgraded","comment_text":"","type":"boolean","type_dimension":""},{"name":"extended","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.potion.Potion","interfaces":[],"superclass":"java.lang.Object","comment_text":"Potion Adapter for pre-1.9 data values\n see @PotionMeta for 1.9+","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Potion","comment_text":"Construct a new potion of the given type. Unless the type is {@link\n PotionType#WATER}, it will be level one, without extended duration.\n Don't use this constructor to create a no-effect potion other than\n water bottle.","parameters":[{"name":"type","comment_text":"The potion type","type":"org.bukkit.potion.PotionType","type_dimension":""}],"throws":[]},{"name":"Potion","comment_text":"Create a new potion of the given type and level.","parameters":[{"name":"type","comment_text":"The type of potion.","type":"org.bukkit.potion.PotionType","type_dimension":""},{"name":"level","comment_text":"The potion's level.","type":"int","type_dimension":""}],"throws":[]},{"name":"Potion","comment_text":"Create a new potion of the given type and level.","parameters":[{"name":"type","comment_text":"The type of potion.","type":"org.bukkit.potion.PotionType","type_dimension":""},{"name":"level","comment_text":"The potion's level.","type":"int","type_dimension":""},{"name":"splash","comment_text":"Whether it is a splash potion.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Potion","comment_text":"Create a new potion of the given type and level.","parameters":[{"name":"type","comment_text":"The type of potion.","type":"org.bukkit.potion.PotionType","type_dimension":""},{"name":"level","comment_text":"The potion's level.","type":"int","type_dimension":""},{"name":"splash","comment_text":"Whether it is a splash potion.","type":"boolean","type_dimension":""},{"name":"extended","comment_text":"Whether it has an extended duration.","type":"boolean","type_dimension":""}],"throws":[]},{"name":"Potion","comment_text":"","parameters":[{"name":"name","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"splash","comment_text":"Chain this to the constructor to make the potion a splash potion.","return_type":"org.bukkit.potion.Potion","return_type_dimension":"","parameters":[],"throws":[]},{"name":"extend","comment_text":"Chain this to the constructor to extend the potion's duration.","return_type":"org.bukkit.potion.Potion","return_type_dimension":"","parameters":[],"throws":[]},{"name":"apply","comment_text":"Applies the effects of this potion to the given {@link ItemStack}. The\n ItemStack must be a potion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"to","comment_text":"The itemstack to apply to","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"apply","comment_text":"Applies the effects that would be applied by this potion to the given\n {@link LivingEntity}.","return_type":"void","return_type_dimension":"","parameters":[{"name":"to","comment_text":"The entity to apply the effects to","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"getEffects","comment_text":"Returns a collection of {@link PotionEffect}s that this {@link Potion}\n would confer upon a {@link LivingEntity}.","return_type":"java.util.Collection","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLevel","comment_text":"Returns the level of this potion.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getType","comment_text":"Returns the {@link PotionType} of this potion.","return_type":"org.bukkit.potion.PotionType","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hasExtendedDuration","comment_text":"Returns whether this potion has an extended duration.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSplash","comment_text":"Returns whether this potion is a splash potion.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setHasExtendedDuration","comment_text":"Set whether this potion has extended duration. This will cause the\n potion to have roughly 8/3 more duration than a regular potion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isExtended","comment_text":"Whether the potion should have extended duration","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setSplash","comment_text":"Sets whether this potion is a splash potion. Splash potions can be\n thrown for a radius effect.","return_type":"void","return_type_dimension":"","parameters":[{"name":"isSplash","comment_text":"Whether this is a splash potion","type":"boolean","type_dimension":""}],"throws":[]},{"name":"setType","comment_text":"Sets the {@link PotionType} of this potion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"type","comment_text":"The new type of this potion","type":"org.bukkit.potion.PotionType","type_dimension":""}],"throws":[]},{"name":"setLevel","comment_text":"Sets the level of this potion.","return_type":"void","return_type_dimension":"","parameters":[{"name":"level","comment_text":"The new level of this potion","type":"int","type_dimension":""}],"throws":[]},{"name":"toDamageValue","comment_text":"Converts this potion to a valid potion damage short, usable for potion\n item stacks.","return_type":"short","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toItemStack","comment_text":"Converts this potion to an {@link ItemStack} with the specified amount\n and a correct damage value.","return_type":"org.bukkit.inventory.ItemStack","return_type_dimension":"","parameters":[{"name":"amount","comment_text":"The amount of the ItemStack","type":"int","type_dimension":""}],"throws":[]},{"name":"fromDamage","comment_text":"","return_type":"org.bukkit.potion.Potion","return_type_dimension":"","parameters":[{"name":"damage","comment_text":"the damage value","type":"int","type_dimension":""}],"throws":[]},{"name":"fromItemStack","comment_text":"","return_type":"org.bukkit.potion.Potion","return_type_dimension":"","parameters":[{"name":"item","comment_text":"","type":"org.bukkit.inventory.ItemStack","type_dimension":""}],"throws":[]},{"name":"getBrewer","comment_text":"Returns an instance of {@link PotionBrewer}.","return_type":"org.bukkit.potion.PotionBrewer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setPotionBrewer","comment_text":"Sets the current instance of {@link PotionBrewer}. Generally not to be\n used from within a plugin.","return_type":"void","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The new PotionBrewer","type":"org.bukkit.potion.PotionBrewer","type_dimension":""}],"throws":[]},{"name":"getNameId","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.projectiles.ProjectileSource","interfaces":[],"superclass":"","comment_text":"Represents a valid source of a projectile.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"launchProjectile","comment_text":"Launches a {@link Projectile} from the ProjectileSource.","return_type":"T","return_type_dimension":"","parameters":[{"name":"projectile","comment_text":"class of the projectile to launch","type":"java.lang.Class","type_dimension":""}],"throws":[]},{"name":"launchProjectile","comment_text":"Launches a {@link Projectile} from the ProjectileSource with an\n initial velocity.","return_type":"T","return_type_dimension":"","parameters":[{"name":"projectile","comment_text":"class of the projectile to launch","type":"java.lang.Class","type_dimension":""},{"name":"velocity","comment_text":"the velocity with which to launch","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.projectiles.BlockProjectileSource","interfaces":["org.bukkit.projectiles.ProjectileSource"],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getBlock","comment_text":"Gets the block this projectile source belongs to.","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.scheduler.BukkitWorker","interfaces":[],"superclass":"","comment_text":"Represents a worker thread for the scheduler. This gives information about\n the Thread object for the task, owner of the task and the taskId.\n <p>\n Workers are used to execute async tasks.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTaskId","comment_text":"Returns the taskId for the task being executed by this worker.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOwner","comment_text":"Returns the Plugin that owns this task.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getThread","comment_text":"Returns the thread for the worker.","return_type":"java.lang.Thread","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.scheduler.BukkitTask","interfaces":[],"superclass":"","comment_text":"Represents a task being executed by the scheduler","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getTaskId","comment_text":"Returns the taskId for the task.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getOwner","comment_text":"Returns the Plugin that owns this task.","return_type":"org.bukkit.plugin.Plugin","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isSync","comment_text":"Returns true if the Task is a sync task.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isCancelled","comment_text":"Returns true if this task has been cancelled.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"cancel","comment_text":"Will attempt to cancel this task.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.scheduler.BukkitScheduler","interfaces":[],"superclass":"","comment_text":"","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"scheduleSyncDelayedTask","comment_text":"Schedules a once off task to occur after a delay.\n <p>\n This task will be executed by the main server thread.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing task","type":"long","type_dimension":""}],"throws":[]},{"name":"scheduleSyncDelayedTask","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing task","type":"long","type_dimension":""}],"throws":[]},{"name":"scheduleSyncDelayedTask","comment_text":"Schedules a once off task to occur as soon as possible.\n <p>\n This task will be executed by the main server thread.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""}],"throws":[]},{"name":"scheduleSyncDelayedTask","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""}],"throws":[]},{"name":"scheduleSyncRepeatingTask","comment_text":"Schedules a repeating task.\n <p>\n This task will be executed by the main server thread.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing first repeat","type":"long","type_dimension":""},{"name":"period","comment_text":"Period in server ticks of the task","type":"long","type_dimension":""}],"throws":[]},{"name":"scheduleSyncRepeatingTask","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing first repeat","type":"long","type_dimension":""},{"name":"period","comment_text":"Period in server ticks of the task","type":"long","type_dimension":""}],"throws":[]},{"name":"scheduleAsyncDelayedTask","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules a once off task to occur after a delay. This task will be\n executed by a thread managed by the scheduler.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing task","type":"long","type_dimension":""}],"throws":[]},{"name":"scheduleAsyncDelayedTask","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules a once off task to occur as soon as possible. This task will\n be executed by a thread managed by the scheduler.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""}],"throws":[]},{"name":"scheduleAsyncRepeatingTask","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules a repeating task. This task will be executed by a thread\n managed by the scheduler.","return_type":"int","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"Delay in server ticks before executing first repeat","type":"long","type_dimension":""},{"name":"period","comment_text":"Period in server ticks of the task","type":"long","type_dimension":""}],"throws":[]},{"name":"callSyncMethod","comment_text":"Calls a method on the main thread and returns a Future object. This\n task will be executed by the main server thread.\n <ul>\n <li>Note: The Future.get() methods must NOT be called from the main\n     thread.\n <li>Note2: There is at least an average of 10ms latency until the\n     isDone() method returns true.\n </ul>","return_type":"java.util.concurrent.Future","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Plugin that owns the task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"Task to be executed","type":"java.util.concurrent.Callable","type_dimension":""}],"throws":[]},{"name":"cancelTask","comment_text":"Removes task from scheduler.","return_type":"void","return_type_dimension":"","parameters":[{"name":"taskId","comment_text":"Id number of task to be removed","type":"int","type_dimension":""}],"throws":[]},{"name":"cancelTasks","comment_text":"Removes all tasks associated with a particular plugin from the\n scheduler.","return_type":"void","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"Owner of tasks to be removed","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[]},{"name":"isCurrentlyRunning","comment_text":"Check if the task currently running.\n <p>\n A repeating task might not be running currently, but will be running in\n the future. A task that has finished, and does not repeat, will not be\n running ever again.\n <p>\n Explicitly, a task is running if there exists a thread for it, and that\n thread is alive.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"taskId","comment_text":"The task to check.\n <p>","type":"int","type_dimension":""}],"throws":[]},{"name":"isQueued","comment_text":"Check if the task queued to be run later.\n <p>\n If a repeating task is currently running, it might not be queued now\n but could be in the future. A task that is not queued, and not running,\n will not be queued again.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"taskId","comment_text":"The task to check.\n <p>","type":"int","type_dimension":""}],"throws":[]},{"name":"getActiveWorkers","comment_text":"Returns a list of all active workers.\n <p>\n This list contains asynch tasks that are being executed by separate\n threads.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getPendingTasks","comment_text":"Returns a list of all pending tasks. The ordering of the tasks is not\n related to their order of execution.","return_type":"java.util.List","return_type_dimension":"","parameters":[],"throws":[]},{"name":"runTask","comment_text":"Returns a task that will run on the next server tick.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTask","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Returns a task that will run asynchronously.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskAsynchronously","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskLater","comment_text":"Returns a task that will run after the specified number of server\n ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskLater","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskLaterAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Returns a task that will run asynchronously after the specified number\n of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskLaterAsynchronously","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskTimer","comment_text":"Returns a task that will repeatedly run until cancelled, starting after\n the specified number of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskTimer","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskTimerAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Returns a task that will repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"java.lang.Runnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task for the first\n     time","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]},{"name":"runTaskTimerAsynchronously","comment_text":"","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"task","comment_text":"the task to be run","type":"org.bukkit.scheduler.BukkitRunnable","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task for the first\n     time","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"}]}],"enumConstants":[]},{"name":"org.bukkit.scheduler.BukkitRunnable","interfaces":["java.lang.Runnable"],"superclass":"java.lang.Object","comment_text":"This class is provided as an easy way to handle scheduling tasks.","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BukkitRunnable","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"isCancelled","comment_text":"Returns true if this task has been cancelled.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if task was not scheduled yet"}]},{"name":"cancel","comment_text":"Attempts to cancel this task.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if task was not scheduled yet"}]},{"name":"runTask","comment_text":"Schedules this in the Bukkit scheduler to run on next tick.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"runTaskAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules this in the Bukkit scheduler to run asynchronously.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"runTaskLater","comment_text":"Schedules this to run after the specified number of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"runTaskLaterAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules this to run asynchronously after the specified number of\n server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"runTaskTimer","comment_text":"Schedules this to repeatedly run until cancelled, starting after the\n specified number of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"runTaskTimerAsynchronously","comment_text":"<b>Asynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.</b>\n <p>\n Schedules this to repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.","return_type":"org.bukkit.scheduler.BukkitTask","return_type_dimension":"","parameters":[{"name":"plugin","comment_text":"the reference to the plugin scheduling task","type":"org.bukkit.plugin.Plugin","type_dimension":""},{"name":"delay","comment_text":"the ticks to wait before running the task for the first\n     time","type":"long","type_dimension":""},{"name":"period","comment_text":"the ticks to wait between runs","type":"long","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if plugin is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this was already scheduled"}]},{"name":"getTaskId","comment_text":"Gets the task id for this runnable.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if task was not scheduled yet"}]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.Team","interfaces":[],"superclass":"","comment_text":"A team on a scoreboard that has a common display theme and other\n properties. This team is only relevant to the display of the associated\n {@link #getScoreboard() scoreboard}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getName","comment_text":"Gets the name of this Team","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"getDisplayName","comment_text":"Gets the name displayed to entries for this team","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setDisplayName","comment_text":"Sets the name displayed to entries for this team","return_type":"void","return_type_dimension":"","parameters":[{"name":"displayName","comment_text":"New display name","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if displayName is longer than 128\n     characters."}]},{"name":"getPrefix","comment_text":"Gets the prefix prepended to the display of entries on this team.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setPrefix","comment_text":"Sets the prefix prepended to the display of entries on this team.","return_type":"void","return_type_dimension":"","parameters":[{"name":"prefix","comment_text":"New prefix","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if prefix is null"}]},{"name":"getSuffix","comment_text":"Gets the suffix appended to the display of entries on this team.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setSuffix","comment_text":"Sets the suffix appended to the display of entries on this team.","return_type":"void","return_type_dimension":"","parameters":[{"name":"suffix","comment_text":"the new suffix for this team.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if suffix is null"}]},{"name":"getColor","comment_text":"Gets the color of the team.\n <br>\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.","return_type":"org.bukkit.ChatColor","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":""}]},{"name":"setColor","comment_text":"Sets the color of the team.\n <br>\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.","return_type":"void","return_type_dimension":"","parameters":[{"name":"color","comment_text":"new color, must be non-null. Use {@link ChatColor#RESET} for\n no color","type":"org.bukkit.ChatColor","type_dimension":""}],"throws":[]},{"name":"allowFriendlyFire","comment_text":"Gets the team friendly fire state","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setAllowFriendlyFire","comment_text":"Sets the team friendly fire state","return_type":"void","return_type_dimension":"","parameters":[{"name":"enabled","comment_text":"true if friendly fire is to be allowed","type":"boolean","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"canSeeFriendlyInvisibles","comment_text":"Gets the team's ability to see {@link PotionEffectType#INVISIBILITY\n invisible} teammates.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setCanSeeFriendlyInvisibles","comment_text":"Sets the team's ability to see {@link PotionEffectType#INVISIBILITY\n invisible} teammates.","return_type":"void","return_type_dimension":"","parameters":[{"name":"enabled","comment_text":"true if invisible teammates are to be visible","type":"boolean","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"getNameTagVisibility","comment_text":"Gets the team's ability to see name tags","return_type":"org.bukkit.scoreboard.NameTagVisibility","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if this team has been unregistered"}]},{"name":"setNameTagVisibility","comment_text":"Set's the team's ability to see name tags","return_type":"void","return_type_dimension":"","parameters":[{"name":"visibility","comment_text":"The nameTagVisibilty to set","type":"org.bukkit.scoreboard.NameTagVisibility","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if this team has been unregistered"}]},{"name":"getPlayers","comment_text":"Gets the Set of players on the team","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered\\"}]},{"name":"getEntries","comment_text":"Gets the Set of entries on the team","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this entries has been unregistered\\"}]},{"name":"getSize","comment_text":"Gets the size of the team","return_type":"int","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"getScoreboard","comment_text":"Gets the Scoreboard to which this team is attached","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]},{"name":"addPlayer","comment_text":"This puts the specified player onto this team for the scoreboard.\n <p>\n This will remove the player from any other team on the scoreboard.","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to add","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"}]},{"name":"addEntry","comment_text":"This puts the specified entry onto this team for the scoreboard.\n <p>\n This will remove the entry from any other team on the scoreboard.","return_type":"void","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry to add","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"}]},{"name":"removePlayer","comment_text":"Removes the player from this team.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to remove","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"}]},{"name":"removeEntry","comment_text":"Removes the entry from this team.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry to remove","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"}]},{"name":"unregister","comment_text":"Unregisters this team from the Scoreboard","return_type":"void","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"hasPlayer","comment_text":"Checks to see if the specified player is a member of this team.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to search for","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"hasEntry","comment_text":"Checks to see if the specified entry is a member of this team.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry to search for","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"getOption","comment_text":"Get an option for this team","return_type":"org.bukkit.scoreboard.Team.OptionStatus","return_type_dimension":"","parameters":[{"name":"option","comment_text":"the option to get","type":"org.bukkit.scoreboard.Team.Option","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]},{"name":"setOption","comment_text":"Set an option for this team","return_type":"void","return_type_dimension":"","parameters":[{"name":"option","comment_text":"the option to set","type":"org.bukkit.scoreboard.Team.Option","type_dimension":""},{"name":"status","comment_text":"the new option status","type":"org.bukkit.scoreboard.Team.OptionStatus","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this team has been unregistered"}]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.Team.Option","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Represents an option which may be applied to this team.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.scoreboard.Team.Option","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.scoreboard.Team.Option","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["NAME_TAG_VISIBILITY","DEATH_MESSAGE_VISIBILITY","COLLISION_RULE"]},{"name":"org.bukkit.scoreboard.Team.OptionStatus","interfaces":[],"superclass":"java.lang.Enum","comment_text":"How an option may be applied to members of this team.","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.scoreboard.Team.OptionStatus","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.scoreboard.Team.OptionStatus","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ALWAYS","NEVER","FOR_OTHER_TEAMS","FOR_OWN_TEAM"]},{"name":"org.bukkit.scoreboard.ScoreboardManager","interfaces":[],"superclass":"","comment_text":"Manager of Scoreboards","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getMainScoreboard","comment_text":"Gets the primary Scoreboard controlled by the server.\n <p>\n This Scoreboard is saved by the server, is affected by the /scoreboard\n command, and is the scoreboard shown by default to players.","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getNewScoreboard","comment_text":"Gets a new Scoreboard to be tracked by the server. This scoreboard will\n be tracked as long as a reference is kept, either by a player or by a\n plugin.","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.Scoreboard","interfaces":[],"superclass":"","comment_text":"A scoreboard","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerNewObjective","comment_text":"Registers an Objective on this Scoreboard","return_type":"org.bukkit.scoreboard.Objective","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the Objective","type":"java.lang.String","type_dimension":""},{"name":"criteria","comment_text":"Criteria for the Objective","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if name is null"}]},{"name":"registerNewObjective","comment_text":"Registers an Objective on this Scoreboard","return_type":"org.bukkit.scoreboard.Objective","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the Objective","type":"java.lang.String","type_dimension":""},{"name":"criteria","comment_text":"Criteria for the Objective","type":"java.lang.String","type_dimension":""},{"name":"displayName","comment_text":"Name displayed to players for the Objective.","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if name is null"}]},{"name":"getObjective","comment_text":"Gets an Objective on this Scoreboard by name","return_type":"org.bukkit.scoreboard.Objective","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Name of the Objective","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if name is null"}]},{"name":"getObjectivesByCriteria","comment_text":"Gets all Objectives of a Criteria on the Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"criteria","comment_text":"Criteria to search by","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":""}]},{"name":"getObjectives","comment_text":"Gets all Objectives on this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getObjective","comment_text":"Gets the Objective currently displayed in a DisplaySlot on this\n Scoreboard","return_type":"org.bukkit.scoreboard.Objective","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"The DisplaySlot","type":"org.bukkit.scoreboard.DisplaySlot","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if slot is null"}]},{"name":"getScores","comment_text":"Gets all scores for a player on this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player whose scores are being retrieved","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"}]},{"name":"getScores","comment_text":"Gets all scores for an entry on this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry whose scores are being retrieved","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"}]},{"name":"resetScores","comment_text":"Removes all scores for a player on this Scoreboard","return_type":"void","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to drop all current scores for","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"}]},{"name":"resetScores","comment_text":"Removes all scores for an entry on this Scoreboard","return_type":"void","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry to drop all current scores for","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"}]},{"name":"getPlayerTeam","comment_text":"Gets a player's Team on this Scoreboard","return_type":"org.bukkit.scoreboard.Team","return_type_dimension":"","parameters":[{"name":"player","comment_text":"the player to search for","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"}]},{"name":"getEntryTeam","comment_text":"Gets a entries Team on this Scoreboard","return_type":"org.bukkit.scoreboard.Team","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"the entry to search for","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"}]},{"name":"getTeam","comment_text":"Gets a Team by name on this Scoreboard","return_type":"org.bukkit.scoreboard.Team","return_type_dimension":"","parameters":[{"name":"teamName","comment_text":"Team name","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if teamName is null"}]},{"name":"getTeams","comment_text":"Gets all teams on this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"registerNewTeam","comment_text":"Registers a Team on this Scoreboard","return_type":"org.bukkit.scoreboard.Team","return_type_dimension":"","parameters":[{"name":"name","comment_text":"Team name","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if name is null"}]},{"name":"getPlayers","comment_text":"Gets all players tracked by this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntries","comment_text":"Gets all entries tracked by this Scoreboard","return_type":"java.util.Set","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clearSlot","comment_text":"Clears any objective in the specified slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"the slot to remove objectives","type":"org.bukkit.scoreboard.DisplaySlot","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if slot is null"}]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.Score","interfaces":[],"superclass":"","comment_text":"A score entry for an {@link #getEntry() entry} on an {@link\n #getObjective() objective}. Changing this will not affect any other\n objective or scoreboard.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getPlayer","comment_text":"Gets the OfflinePlayer being tracked by this Score","return_type":"org.bukkit.OfflinePlayer","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getEntry","comment_text":"Gets the entry being tracked by this Score","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getObjective","comment_text":"Gets the Objective being tracked by this Score","return_type":"org.bukkit.scoreboard.Objective","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getScore","comment_text":"Gets the current score","return_type":"int","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if the associated objective has been\n     unregistered"}]},{"name":"setScore","comment_text":"Sets the current score.","return_type":"void","return_type_dimension":"","parameters":[{"name":"score","comment_text":"New score","type":"int","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if the associated objective has been\n     unregistered"}]},{"name":"isScoreSet","comment_text":"Shows if this score has been set at any point in time.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if the associated objective has been\n     unregistered"}]},{"name":"getScoreboard","comment_text":"Gets the scoreboard for the associated objective.","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.Objective","interfaces":[],"superclass":"","comment_text":"An objective on a scoreboard that can show scores specific to entries. This\n objective is only relevant to the display of the associated {@link\n #getScoreboard() scoreboard}.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"getName","comment_text":"Gets the name of this Objective","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"getDisplayName","comment_text":"Gets the name displayed to players for this objective","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"setDisplayName","comment_text":"Sets the name displayed to players for this objective.","return_type":"void","return_type_dimension":"","parameters":[{"name":"displayName","comment_text":"Display name to set","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"},{"name":"java.lang.IllegalArgumentException","comment_text":"if displayName is null"}]},{"name":"getCriteria","comment_text":"Gets the criteria this objective tracks.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"isModifiable","comment_text":"Gets if the objective's scores can be modified directly by a plugin.","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"getScoreboard","comment_text":"Gets the scoreboard to which this objective is attached.","return_type":"org.bukkit.scoreboard.Scoreboard","return_type_dimension":"","parameters":[],"throws":[]},{"name":"unregister","comment_text":"Unregisters this objective from the {@link Scoreboard scoreboard.}","return_type":"void","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"setDisplaySlot","comment_text":"Sets this objective to display on the specified slot for the\n scoreboard, removing it from any other display slot.","return_type":"void","return_type_dimension":"","parameters":[{"name":"slot","comment_text":"display slot to change, or null to not display","type":"org.bukkit.scoreboard.DisplaySlot","type_dimension":""}],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"getDisplaySlot","comment_text":"Gets the display slot this objective is displayed at.","return_type":"org.bukkit.scoreboard.DisplaySlot","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"getScore","comment_text":"Gets a player's Score for an Objective on this Scoreboard","return_type":"org.bukkit.scoreboard.Score","return_type_dimension":"","parameters":[{"name":"player","comment_text":"Player for the Score","type":"org.bukkit.OfflinePlayer","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if player is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]},{"name":"getScore","comment_text":"Gets an entry's Score for an Objective on this Scoreboard.","return_type":"org.bukkit.scoreboard.Score","return_type_dimension":"","parameters":[{"name":"entry","comment_text":"Entry for the Score","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if entry is null"},{"name":"java.lang.IllegalStateException","comment_text":"if this objective has been unregistered"}]}],"enumConstants":[]},{"name":"org.bukkit.scoreboard.NameTagVisibility","interfaces":[],"superclass":"java.lang.Enum","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.scoreboard.NameTagVisibility","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.scoreboard.NameTagVisibility","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["ALWAYS","NEVER","HIDE_FOR_OTHER_TEAMS","HIDE_FOR_OWN_TEAM"]},{"name":"org.bukkit.scoreboard.DisplaySlot","interfaces":[],"superclass":"java.lang.Enum","comment_text":"Locations for displaying objectives to the player","isAbstract":false,"isInterface":false,"isEnum":true,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"values","comment_text":"","return_type":"org.bukkit.scoreboard.DisplaySlot","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"valueOf","comment_text":"","return_type":"org.bukkit.scoreboard.DisplaySlot","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":["BELOW_NAME","PLAYER_LIST","SIDEBAR"]},{"name":"org.bukkit.scoreboard.Criterias","interfaces":[],"superclass":"java.lang.Object","comment_text":"Criteria names which trigger an objective to be modified by actions in-game","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[{"name":"HEALTH","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"PLAYER_KILLS","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"TOTAL_KILLS","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"DEATHS","comment_text":"","type":"java.lang.String","type_dimension":""}],"methods":[],"enumConstants":[]},{"name":"org.bukkit.util.Vector","interfaces":["java.lang.Cloneable","org.bukkit.configuration.serialization.ConfigurationSerializable"],"superclass":"java.lang.Object","comment_text":"Represents a mutable vector. Because the components of Vectors are mutable,\n storing Vectors long term may be dangerous if passing code modifies the\n Vector later. If you want to keep around a Vector, it may be wise to call\n <code>clone()</code> in order to get a copy.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"Vector","comment_text":"Construct the vector with all components as 0.","parameters":[],"throws":[]},{"name":"Vector","comment_text":"Construct the vector with provided integer components.","parameters":[{"name":"x","comment_text":"X component","type":"int","type_dimension":""},{"name":"y","comment_text":"Y component","type":"int","type_dimension":""},{"name":"z","comment_text":"Z component","type":"int","type_dimension":""}],"throws":[]},{"name":"Vector","comment_text":"Construct the vector with provided double components.","parameters":[{"name":"x","comment_text":"X component","type":"double","type_dimension":""},{"name":"y","comment_text":"Y component","type":"double","type_dimension":""},{"name":"z","comment_text":"Z component","type":"double","type_dimension":""}],"throws":[]},{"name":"Vector","comment_text":"Construct the vector with provided float components.","parameters":[{"name":"x","comment_text":"X component","type":"float","type_dimension":""},{"name":"y","comment_text":"Y component","type":"float","type_dimension":""},{"name":"z","comment_text":"Z component","type":"float","type_dimension":""}],"throws":[]}],"fields":[{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""}],"methods":[{"name":"add","comment_text":"Adds a vector to this one","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"subtract","comment_text":"Subtracts a vector from this one.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"multiply","comment_text":"Multiplies the vector by another.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"divide","comment_text":"Divides the vector by another.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"copy","comment_text":"Copies another vector","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"vec","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"length","comment_text":"Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the vector's\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"lengthSquared","comment_text":"Gets the magnitude of the vector squared.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"distance","comment_text":"Get the distance between this vector and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the vector's magnitude. NaN will be\n returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.","return_type":"double","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"distanceSquared","comment_text":"Get the squared distance between this vector and another.","return_type":"double","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"angle","comment_text":"Gets the angle between this vector and another in radians.","return_type":"float","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"midpoint","comment_text":"Sets this vector to the midpoint between this vector and another.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getMidpoint","comment_text":"Gets a new midpoint vector between this vector and another.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"multiply","comment_text":"Performs scalar multiplication, multiplying all components with a\n scalar.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"m","comment_text":"The factor","type":"int","type_dimension":""}],"throws":[]},{"name":"multiply","comment_text":"Performs scalar multiplication, multiplying all components with a\n scalar.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"m","comment_text":"The factor","type":"double","type_dimension":""}],"throws":[]},{"name":"multiply","comment_text":"Performs scalar multiplication, multiplying all components with a\n scalar.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"m","comment_text":"The factor","type":"float","type_dimension":""}],"throws":[]},{"name":"dot","comment_text":"Calculates the dot product of this vector with another. The dot product\n is defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.","return_type":"double","return_type_dimension":"","parameters":[{"name":"other","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"crossProduct","comment_text":"Calculates the cross product of this vector with another. The cross\n product is defined as:\n <ul>\n <li>x = y1 * z2 - y2 * z1\n <li>y = z1 * x2 - z2 * x1\n <li>z = x1 * y2 - x2 * y1\n </ul>","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getCrossProduct","comment_text":"Calculates the cross product of this vector with another without mutating\n the original. The cross product is defined as:\n <ul>\n <li>x = y1 * z2 - y2 * z1\n <li>y = z1 * x2 - z2 * x1\n <li>z = x1 * y2 - x2 * y1\n </ul>","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"o","comment_text":"The other vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"normalize","comment_text":"Converts this vector to a unit vector (a vector with length of 1).","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"zero","comment_text":"Zero this vector's components.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"isInAABB","comment_text":"Returns whether this vector is in an axis-aligned bounding box.\n <p>\n The minimum and maximum vectors given must be truly the minimum and\n maximum X, Y and Z components.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"min","comment_text":"Minimum vector","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"max","comment_text":"Maximum vector","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"isInSphere","comment_text":"Returns whether this vector is within a sphere.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"origin","comment_text":"Sphere origin.","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"radius","comment_text":"Sphere radius","type":"double","type_dimension":""}],"throws":[]},{"name":"getX","comment_text":"Gets the X component.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockX","comment_text":"Gets the floored value of the X component, indicating the block that\n this vector is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"Gets the Y component.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockY","comment_text":"Gets the floored value of the Y component, indicating the block that\n this vector is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Gets the Z component.","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getBlockZ","comment_text":"Gets the floored value of the Z component, indicating the block that\n this vector is contained with.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setX","comment_text":"Set the X component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The new X component.","type":"int","type_dimension":""}],"throws":[]},{"name":"setX","comment_text":"Set the X component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The new X component.","type":"double","type_dimension":""}],"throws":[]},{"name":"setX","comment_text":"Set the X component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"x","comment_text":"The new X component.","type":"float","type_dimension":""}],"throws":[]},{"name":"setY","comment_text":"Set the Y component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"y","comment_text":"The new Y component.","type":"int","type_dimension":""}],"throws":[]},{"name":"setY","comment_text":"Set the Y component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"y","comment_text":"The new Y component.","type":"double","type_dimension":""}],"throws":[]},{"name":"setY","comment_text":"Set the Y component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"y","comment_text":"The new Y component.","type":"float","type_dimension":""}],"throws":[]},{"name":"setZ","comment_text":"Set the Z component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"z","comment_text":"The new Z component.","type":"int","type_dimension":""}],"throws":[]},{"name":"setZ","comment_text":"Set the Z component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"z","comment_text":"The new Z component.","type":"double","type_dimension":""}],"throws":[]},{"name":"setZ","comment_text":"Set the Z component.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"z","comment_text":"The new Z component.","type":"float","type_dimension":""}],"throws":[]},{"name":"equals","comment_text":"Checks to see if two objects are equal.\n <p>\n Only two Vectors can ever return true. This method uses a fuzzy match\n to account for floating point errors. The epsilon can be retrieved\n with epsilon.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"Returns a hash code for this vector","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"Get a new vector.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toString","comment_text":"Returns this vector's components as x,y,z.","return_type":"java.lang.String","return_type_dimension":"","parameters":[],"throws":[]},{"name":"toLocation","comment_text":"Gets a Location version of this vector with yaw and pitch being 0.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world to link the location to.","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"toLocation","comment_text":"Gets a Location version of this vector.","return_type":"org.bukkit.Location","return_type_dimension":"","parameters":[{"name":"world","comment_text":"The world to link the location to.","type":"org.bukkit.World","type_dimension":""},{"name":"yaw","comment_text":"The desired yaw.","type":"float","type_dimension":""},{"name":"pitch","comment_text":"The desired pitch.","type":"float","type_dimension":""}],"throws":[]},{"name":"toBlockVector","comment_text":"Get the block vector of this vector.","return_type":"org.bukkit.util.BlockVector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"checkFinite","comment_text":"Check if each component of this Vector is finite.","return_type":"void","return_type_dimension":"","parameters":[],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if any component is not finite"}]},{"name":"getEpsilon","comment_text":"Get the threshold used for equals().","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getMinimum","comment_text":"Gets the minimum components of two vectors.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"v1","comment_text":"The first vector.","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"v2","comment_text":"The second vector.","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getMaximum","comment_text":"Gets the maximum components of two vectors.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"v1","comment_text":"The first vector.","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"v2","comment_text":"The second vector.","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"getRandom","comment_text":"Gets a random vector with components having a random value between 0\n and 1.","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"serialize","comment_text":"","return_type":"java.util.Map","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.util.Vector","return_type_dimension":"","parameters":[{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.StringUtil","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"StringUtil","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"copyPartialMatches","comment_text":"Copies all elements from the iterable collection of originals to the\n collection provided.","return_type":"T","return_type_dimension":"","parameters":[{"name":"token","comment_text":"String to search for","type":"java.lang.String","type_dimension":""},{"name":"originals","comment_text":"An iterable collection of strings to filter.","type":"java.lang.Iterable","type_dimension":""},{"name":"collection","comment_text":"The collection to add matches to","type":"T","type_dimension":""}],"throws":[{"name":"java.lang.UnsupportedOperationException","comment_text":"if the collection is immutable\n     and originals contains a string which starts with the specified\n     search string."},{"name":"java.lang.IllegalArgumentException","comment_text":"if any parameter is is null"}]},{"name":"startsWithIgnoreCase","comment_text":"This method uses a region to check case-insensitive equality. This\n means the internal array does not need to be copied like a\n toLowerCase() call would.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"string","comment_text":"String to check","type":"java.lang.String","type_dimension":""},{"name":"prefix","comment_text":"Prefix of string to compare","type":"java.lang.String","type_dimension":""}],"throws":[{"name":"java.lang.IllegalArgumentException","comment_text":"if string is null"},{"name":"java.lang.NullPointerException","comment_text":"if prefix is null"}]}],"enumConstants":[]},{"name":"org.bukkit.util.NumberConversions","interfaces":[],"superclass":"java.lang.Object","comment_text":"Utils for casting number types to other number types","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"floor","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"num","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"ceil","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"num","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"round","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"num","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"square","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"num","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"toInt","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toFloat","comment_text":"","return_type":"float","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toDouble","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toLong","comment_text":"","return_type":"long","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toShort","comment_text":"","return_type":"short","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"toByte","comment_text":"","return_type":"byte","return_type_dimension":"","parameters":[{"name":"object","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"isFinite","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"d","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"isFinite","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"f","comment_text":"","type":"float","type_dimension":""}],"throws":[]},{"name":"checkFinite","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"d","comment_text":"","type":"double","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"checkFinite","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"d","comment_text":"","type":"float","type_dimension":""},{"name":"message","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.FileUtil","interfaces":[],"superclass":"java.lang.Object","comment_text":"Class containing file utilities","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"FileUtil","comment_text":"","parameters":[],"throws":[]}],"fields":[],"methods":[{"name":"copy","comment_text":"This method copies one file to another location","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"inFile","comment_text":"the source filename","type":"java.io.File","type_dimension":""},{"name":"outFile","comment_text":"the target filename","type":"java.io.File","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.EulerAngle","interfaces":[],"superclass":"java.lang.Object","comment_text":"EulerAngle is used to represent 3 angles, one for each\n axis (x, y, z). The angles are in radians","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"EulerAngle","comment_text":"Creates a EularAngle with each axis set to the\n passed angle in radians","parameters":[{"name":"x","comment_text":"the angle for the x axis in radians","type":"double","type_dimension":""},{"name":"y","comment_text":"the angle for the y axis in radians","type":"double","type_dimension":""},{"name":"z","comment_text":"the angle for the z axis in radians","type":"double","type_dimension":""}],"throws":[]}],"fields":[{"name":"ZERO","comment_text":"A EulerAngle with every axis set to 0","type":"org.bukkit.util.EulerAngle","type_dimension":""}],"methods":[{"name":"getX","comment_text":"Returns the angle on the x axis in radians","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getY","comment_text":"Returns the angle on the y axis in radians","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getZ","comment_text":"Returns the angle on the z axis in radians","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setX","comment_text":"Return a EulerAngle which is the result of changing\n the x axis to the passed angle","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the angle in radians","type":"double","type_dimension":""}],"throws":[]},{"name":"setY","comment_text":"Return a EulerAngle which is the result of changing\n the y axis to the passed angle","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[{"name":"y","comment_text":"the angle in radians","type":"double","type_dimension":""}],"throws":[]},{"name":"setZ","comment_text":"Return a EulerAngle which is the result of changing\n the z axis to the passed angle","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[{"name":"z","comment_text":"the angle in radians","type":"double","type_dimension":""}],"throws":[]},{"name":"add","comment_text":"Creates a new EulerAngle which is the result of adding\n the x, y, z components to this EulerAngle","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the angle to add to the x axis in radians","type":"double","type_dimension":""},{"name":"y","comment_text":"the angle to add to the y axis in radians","type":"double","type_dimension":""},{"name":"z","comment_text":"the angle to add to the z axis in radians","type":"double","type_dimension":""}],"throws":[]},{"name":"subtract","comment_text":"Creates a new EulerAngle which is the result of subtracting\n the x, y, z components to this EulerAngle","return_type":"org.bukkit.util.EulerAngle","return_type_dimension":"","parameters":[{"name":"x","comment_text":"the angle to subtract to the x axis in radians","type":"double","type_dimension":""},{"name":"y","comment_text":"the angle to subtract to the y axis in radians","type":"double","type_dimension":""},{"name":"z","comment_text":"the angle to subtract to the z axis in radians","type":"double","type_dimension":""}],"throws":[]},{"name":"equals","comment_text":"","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"o","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.Consumer","interfaces":[],"superclass":"","comment_text":"Represents an operation that accepts a single input argument and returns no\n result.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"accept","comment_text":"Performs this operation on the given argument.","return_type":"void","return_type_dimension":"","parameters":[{"name":"t","comment_text":"the input argument","type":"T","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.ChatPaginator","interfaces":[],"superclass":"java.lang.Object","comment_text":"The ChatPaginator takes a raw string of arbitrary length and breaks it down\n into an array of strings appropriate for displaying on the Minecraft player\n console.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChatPaginator","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH","comment_text":"","type":"int","type_dimension":""},{"name":"AVERAGE_CHAT_PAGE_WIDTH","comment_text":"","type":"int","type_dimension":""},{"name":"UNBOUNDED_PAGE_WIDTH","comment_text":"","type":"int","type_dimension":""},{"name":"OPEN_CHAT_PAGE_HEIGHT","comment_text":"","type":"int","type_dimension":""},{"name":"CLOSED_CHAT_PAGE_HEIGHT","comment_text":"","type":"int","type_dimension":""},{"name":"UNBOUNDED_PAGE_HEIGHT","comment_text":"","type":"int","type_dimension":""}],"methods":[{"name":"paginate","comment_text":"Breaks a raw string up into pages using the default width and height.","return_type":"org.bukkit.util.ChatPaginator.ChatPage","return_type_dimension":"","parameters":[{"name":"unpaginatedString","comment_text":"The raw string to break.","type":"java.lang.String","type_dimension":""},{"name":"pageNumber","comment_text":"The page number to fetch.","type":"int","type_dimension":""}],"throws":[]},{"name":"paginate","comment_text":"Breaks a raw string up into pages using a provided width and height.","return_type":"org.bukkit.util.ChatPaginator.ChatPage","return_type_dimension":"","parameters":[{"name":"unpaginatedString","comment_text":"The raw string to break.","type":"java.lang.String","type_dimension":""},{"name":"pageNumber","comment_text":"The page number to fetch.","type":"int","type_dimension":""},{"name":"lineLength","comment_text":"The desired width of a chat line.","type":"int","type_dimension":""},{"name":"pageHeight","comment_text":"The desired number of lines in a page.","type":"int","type_dimension":""}],"throws":[]},{"name":"wordWrap","comment_text":"Breaks a raw string up into a series of lines. Words are wrapped using\n spaces as decimeters and the newline character is respected.","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[{"name":"rawString","comment_text":"The raw string to break.","type":"java.lang.String","type_dimension":""},{"name":"lineLength","comment_text":"The length of a line of text.","type":"int","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.ChatPaginator.ChatPage","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"ChatPage","comment_text":"","parameters":[{"name":"lines","comment_text":"","type":"java.lang.String","type_dimension":"[]"},{"name":"pageNumber","comment_text":"","type":"int","type_dimension":""},{"name":"totalPages","comment_text":"","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"getPageNumber","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getTotalPages","comment_text":"","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"getLines","comment_text":"","return_type":"java.lang.String","return_type_dimension":"[]","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.CachedServerIcon","interfaces":[],"superclass":"","comment_text":"This is a cached version of a server-icon. It's internal representation\n and implementation is undefined.","isAbstract":true,"isInterface":true,"isEnum":false,"since":"","see":["org.bukkit.Server","org.bukkit.Server","org.bukkit.Server","org.bukkit.event.server.ServerListPingEvent"],"constructors":[],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.util.BlockVector","interfaces":[],"superclass":"org.bukkit.util.Vector","comment_text":"A vector with a hash function that floors the X, Y, Z components, a la\n BlockVector in WorldEdit. BlockVectors can be used in hash sets and\n hash maps. Be aware that BlockVectors are mutable, but it is important\n that BlockVectors are never changed once put into a hash set or hash map.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockVector","comment_text":"Construct the vector with all components as 0.","parameters":[],"throws":[]},{"name":"BlockVector","comment_text":"Construct the vector with another vector.","parameters":[{"name":"vec","comment_text":"The other vector.","type":"org.bukkit.util.Vector","type_dimension":""}],"throws":[]},{"name":"BlockVector","comment_text":"Construct the vector with provided integer components.","parameters":[{"name":"x","comment_text":"X component","type":"int","type_dimension":""},{"name":"y","comment_text":"Y component","type":"int","type_dimension":""},{"name":"z","comment_text":"Z component","type":"int","type_dimension":""}],"throws":[]},{"name":"BlockVector","comment_text":"Construct the vector with provided double components.","parameters":[{"name":"x","comment_text":"X component","type":"double","type_dimension":""},{"name":"y","comment_text":"Y component","type":"double","type_dimension":""},{"name":"z","comment_text":"Z component","type":"double","type_dimension":""}],"throws":[]},{"name":"BlockVector","comment_text":"Construct the vector with provided float components.","parameters":[{"name":"x","comment_text":"X component","type":"float","type_dimension":""},{"name":"y","comment_text":"Y component","type":"float","type_dimension":""},{"name":"z","comment_text":"Z component","type":"float","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"equals","comment_text":"Checks if another object is equivalent.","return_type":"boolean","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"The other object","type":"java.lang.Object","type_dimension":""}],"throws":[]},{"name":"hashCode","comment_text":"Returns a hash code for this vector.","return_type":"int","return_type_dimension":"","parameters":[],"throws":[]},{"name":"clone","comment_text":"Get a new block vector.","return_type":"org.bukkit.util.BlockVector","return_type_dimension":"","parameters":[],"throws":[]},{"name":"deserialize","comment_text":"","return_type":"org.bukkit.util.BlockVector","return_type_dimension":"","parameters":[{"name":"args","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.BlockIterator","interfaces":["java.util.Iterator"],"superclass":"java.lang.Object","comment_text":"This class performs ray tracing and iterates along blocks on a line","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BlockIterator","comment_text":"Constructs the BlockIterator","parameters":[{"name":"world","comment_text":"The world to use for tracing","type":"org.bukkit.World","type_dimension":""},{"name":"start","comment_text":"A Vector giving the initial location for the trace","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"direction","comment_text":"A Vector pointing in the direction for the trace","type":"org.bukkit.util.Vector","type_dimension":""},{"name":"yOffset","comment_text":"The trace begins vertically offset from the start vector\n     by this value","type":"double","type_dimension":""},{"name":"maxDistance","comment_text":"This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit","type":"int","type_dimension":""}],"throws":[]},{"name":"BlockIterator","comment_text":"Constructs the BlockIterator","parameters":[{"name":"loc","comment_text":"The location for the start of the ray trace","type":"org.bukkit.Location","type_dimension":""},{"name":"yOffset","comment_text":"The trace begins vertically offset from the start vector\n     by this value","type":"double","type_dimension":""},{"name":"maxDistance","comment_text":"This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit","type":"int","type_dimension":""}],"throws":[]},{"name":"BlockIterator","comment_text":"Constructs the BlockIterator.","parameters":[{"name":"loc","comment_text":"The location for the start of the ray trace","type":"org.bukkit.Location","type_dimension":""},{"name":"yOffset","comment_text":"The trace begins vertically offset from the start vector\n     by this value","type":"double","type_dimension":""}],"throws":[]},{"name":"BlockIterator","comment_text":"Constructs the BlockIterator.","parameters":[{"name":"loc","comment_text":"The location for the start of the ray trace","type":"org.bukkit.Location","type_dimension":""}],"throws":[]},{"name":"BlockIterator","comment_text":"Constructs the BlockIterator.","parameters":[{"name":"entity","comment_text":"Information from the entity is used to set up the trace","type":"org.bukkit.entity.LivingEntity","type_dimension":""},{"name":"maxDistance","comment_text":"This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit","type":"int","type_dimension":""}],"throws":[]},{"name":"BlockIterator","comment_text":"Constructs the BlockIterator.","parameters":[{"name":"entity","comment_text":"Information from the entity is used to set up the trace","type":"org.bukkit.entity.LivingEntity","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"hasNext","comment_text":"Returns true if the iteration has more elements","return_type":"boolean","return_type_dimension":"","parameters":[],"throws":[]},{"name":"next","comment_text":"Returns the next Block in the trace","return_type":"org.bukkit.block.Block","return_type_dimension":"","parameters":[],"throws":[]},{"name":"remove","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.io.BukkitObjectOutputStream","interfaces":[],"superclass":"java.io.ObjectOutputStream","comment_text":"This class is designed to be used in conjunction with the {@link\n ConfigurationSerializable} API. It translates objects to an internal\n implementation for later deserialization using {@link\n BukkitObjectInputStream}.\n <p>\n Behavior of implementations extending this class is not guaranteed across\n future versions.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BukkitObjectOutputStream","comment_text":"Constructor provided to mirror super functionality.","parameters":[],"throws":[{"name":"java.io.IOException","comment_text":"if an I/O error occurs while writing stream header"},{"name":"java.lang.SecurityException","comment_text":""}]},{"name":"BukkitObjectOutputStream","comment_text":"Object output stream decoration constructor.","parameters":[{"name":"out","comment_text":"the stream to wrap","type":"java.io.OutputStream","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":"if an I/O error occurs while writing stream header"}]}],"fields":[],"methods":[{"name":"replaceObject","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.util.io.BukkitObjectInputStream","interfaces":[],"superclass":"java.io.ObjectInputStream","comment_text":"This class is designed to be used in conjunction with the {@link\n ConfigurationSerializable} API. It translates objects back to their\n original implementation after being serialized by {@link\n BukkitObjectInputStream}.\n <p>\n Behavior of implementations extending this class is not guaranteed across\n future versions.","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"BukkitObjectInputStream","comment_text":"Constructor provided to mirror super functionality.","parameters":[],"throws":[{"name":"java.io.IOException","comment_text":"if an I/O error occurs while reading stream heade"},{"name":"java.lang.SecurityException","comment_text":""}]},{"name":"BukkitObjectInputStream","comment_text":"Object input stream decoration constructor.","parameters":[{"name":"in","comment_text":"the input stream to wrap","type":"java.io.InputStream","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":"if an I/O error occurs while reading stream header"}]}],"fields":[],"methods":[{"name":"resolveObject","comment_text":"","return_type":"java.lang.Object","return_type_dimension":"","parameters":[{"name":"obj","comment_text":"","type":"java.lang.Object","type_dimension":""}],"throws":[{"name":"java.io.IOException","comment_text":""}]}],"enumConstants":[]},{"name":"org.bukkit.util.noise.SimplexOctaveGenerator","interfaces":[],"superclass":"org.bukkit.util.noise.OctaveGenerator","comment_text":"Creates simplex noise through unbiased octaves","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimplexOctaveGenerator","comment_text":"Creates a simplex octave generator for the given world","parameters":[{"name":"world","comment_text":"World to construct this generator for","type":"org.bukkit.World","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]},{"name":"SimplexOctaveGenerator","comment_text":"Creates a simplex octave generator for the given world","parameters":[{"name":"seed","comment_text":"Seed to construct this generator for","type":"long","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]},{"name":"SimplexOctaveGenerator","comment_text":"Creates a simplex octave generator for the given {@link Random}","parameters":[{"name":"rand","comment_text":"Random object to construct this generator for","type":"java.util.Random","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[{"name":"setScale","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"getWScale","comment_text":"Gets the scale used for each W-coordinates passed","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setWScale","comment_text":"Sets the scale used for each W-coordinates passed","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"New W scale","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"w","comment_text":"W-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"w","comment_text":"W-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.noise.SimplexNoiseGenerator","interfaces":[],"superclass":"org.bukkit.util.noise.PerlinNoiseGenerator","comment_text":"Generates simplex-based noise.\n <p>\n This is a modified version of the freely published version in the paper by\n Stefan Gustavson at\n <a href=\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\">\n http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"SimplexNoiseGenerator","comment_text":"","parameters":[],"throws":[]},{"name":"SimplexNoiseGenerator","comment_text":"Creates a seeded simplex noise generator for the given world","parameters":[{"name":"world","comment_text":"World to construct this generator for","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"SimplexNoiseGenerator","comment_text":"Creates a seeded simplex noise generator for the given seed","parameters":[{"name":"seed","comment_text":"Seed to construct this generator for","type":"long","type_dimension":""}],"throws":[]},{"name":"SimplexNoiseGenerator","comment_text":"Creates a seeded simplex noise generator with the given Random","parameters":[{"name":"rand","comment_text":"Random to construct with","type":"java.util.Random","type_dimension":""}],"throws":[]}],"fields":[{"name":"SQRT_3","comment_text":"","type":"double","type_dimension":""},{"name":"SQRT_5","comment_text":"","type":"double","type_dimension":""},{"name":"F2","comment_text":"","type":"double","type_dimension":""},{"name":"G2","comment_text":"","type":"double","type_dimension":""},{"name":"G22","comment_text":"","type":"double","type_dimension":""},{"name":"F3","comment_text":"","type":"double","type_dimension":""},{"name":"G3","comment_text":"","type":"double","type_dimension":""},{"name":"F4","comment_text":"","type":"double","type_dimension":""},{"name":"G4","comment_text":"","type":"double","type_dimension":""},{"name":"G42","comment_text":"","type":"double","type_dimension":""},{"name":"G43","comment_text":"","type":"double","type_dimension":""},{"name":"G44","comment_text":"","type":"double","type_dimension":""},{"name":"grad4","comment_text":"","type":"int","type_dimension":"[][]"},{"name":"simplex","comment_text":"","type":"int","type_dimension":"[][]"},{"name":"offsetW","comment_text":"","type":"double","type_dimension":""}],"methods":[{"name":"dot","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"g","comment_text":"","type":"int","type_dimension":"[]"},{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"dot","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"g","comment_text":"","type":"int","type_dimension":"[]"},{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"dot","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"g","comment_text":"","type":"int","type_dimension":"[]"},{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""},{"name":"w","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 1D unseeded simplex noise for the given\n coordinates in 1D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"xin","comment_text":"X coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 2D unseeded simplex noise for the given\n coordinates in 2D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"xin","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"yin","comment_text":"Y coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 3D unseeded simplex noise for the given\n coordinates in 3D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"xin","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"yin","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"zin","comment_text":"Z coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 4D simplex noise for the given coordinates in\n 4D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""},{"name":"w","comment_text":"W coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"xin","comment_text":"","type":"double","type_dimension":""},{"name":"yin","comment_text":"","type":"double","type_dimension":""},{"name":"zin","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"xin","comment_text":"","type":"double","type_dimension":""},{"name":"yin","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Computes and returns the 4D simplex noise for the given coordinates in\n 4D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""},{"name":"w","comment_text":"W coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getInstance","comment_text":"Gets the singleton unseeded instance of this generator","return_type":"org.bukkit.util.noise.SimplexNoiseGenerator","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.noise.PerlinOctaveGenerator","interfaces":[],"superclass":"org.bukkit.util.noise.OctaveGenerator","comment_text":"Creates perlin noise through unbiased octaves","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"PerlinOctaveGenerator","comment_text":"Creates a perlin octave generator for the given world","parameters":[{"name":"world","comment_text":"World to construct this generator for","type":"org.bukkit.World","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]},{"name":"PerlinOctaveGenerator","comment_text":"Creates a perlin octave generator for the given world","parameters":[{"name":"seed","comment_text":"Seed to construct this generator for","type":"long","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]},{"name":"PerlinOctaveGenerator","comment_text":"Creates a perlin octave generator for the given {@link Random}","parameters":[{"name":"rand","comment_text":"Random object to construct this generator for","type":"java.util.Random","type_dimension":""},{"name":"octaves","comment_text":"Amount of octaves to create","type":"int","type_dimension":""}],"throws":[]}],"fields":[],"methods":[],"enumConstants":[]},{"name":"org.bukkit.util.noise.PerlinNoiseGenerator","interfaces":[],"superclass":"org.bukkit.util.noise.NoiseGenerator","comment_text":"Generates noise using the \"classic\" perlin generator","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":["org.bukkit.util.noise.SimplexNoiseGenerator"],"constructors":[{"name":"PerlinNoiseGenerator","comment_text":"","parameters":[],"throws":[]},{"name":"PerlinNoiseGenerator","comment_text":"Creates a seeded perlin noise generator for the given world","parameters":[{"name":"world","comment_text":"World to construct this generator for","type":"org.bukkit.World","type_dimension":""}],"throws":[]},{"name":"PerlinNoiseGenerator","comment_text":"Creates a seeded perlin noise generator for the given seed","parameters":[{"name":"seed","comment_text":"Seed to construct this generator for","type":"long","type_dimension":""}],"throws":[]},{"name":"PerlinNoiseGenerator","comment_text":"Creates a seeded perlin noise generator with the given Random","parameters":[{"name":"rand","comment_text":"Random to construct with","type":"java.util.Random","type_dimension":""}],"throws":[]}],"fields":[{"name":"grad3","comment_text":"","type":"int","type_dimension":"[][]"}],"methods":[{"name":"getNoise","comment_text":"Computes and returns the 1D unseeded perlin noise for the given\n coordinates in 1D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 2D unseeded perlin noise for the given\n coordinates in 2D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Computes and returns the 3D unseeded perlin noise for the given\n coordinates in 3D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"getInstance","comment_text":"Gets the singleton unseeded instance of this generator","return_type":"org.bukkit.util.noise.PerlinNoiseGenerator","return_type_dimension":"","parameters":[],"throws":[]},{"name":"noise","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Generates noise for the 1D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Generates noise for the 2D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"getNoise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.noise.OctaveGenerator","interfaces":[],"superclass":"java.lang.Object","comment_text":"Creates noise using unbiased octaves","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"OctaveGenerator","comment_text":"","parameters":[{"name":"octaves","comment_text":"","type":"org.bukkit.util.noise.NoiseGenerator","type_dimension":"[]"}],"throws":[]}],"fields":[{"name":"octaves","comment_text":"","type":"org.bukkit.util.noise.NoiseGenerator","type_dimension":"[]"},{"name":"xScale","comment_text":"","type":"double","type_dimension":""},{"name":"yScale","comment_text":"","type":"double","type_dimension":""},{"name":"zScale","comment_text":"","type":"double","type_dimension":""}],"methods":[{"name":"setScale","comment_text":"Sets the scale used for all coordinates passed to this generator.\n <p>\n This is the equivalent to setting each coordinate to the specified\n value.","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"New value to scale each coordinate by","type":"double","type_dimension":""}],"throws":[]},{"name":"getXScale","comment_text":"Gets the scale used for each X-coordinates passed","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setXScale","comment_text":"Sets the scale used for each X-coordinates passed","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"New X scale","type":"double","type_dimension":""}],"throws":[]},{"name":"getYScale","comment_text":"Gets the scale used for each Y-coordinates passed","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setYScale","comment_text":"Sets the scale used for each Y-coordinates passed","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"New Y scale","type":"double","type_dimension":""}],"throws":[]},{"name":"getZScale","comment_text":"Gets the scale used for each Z-coordinates passed","return_type":"double","return_type_dimension":"","parameters":[],"throws":[]},{"name":"setZScale","comment_text":"Sets the scale used for each Z-coordinates passed","return_type":"void","return_type_dimension":"","parameters":[{"name":"scale","comment_text":"New Z scale","type":"double","type_dimension":""}],"throws":[]},{"name":"getOctaves","comment_text":"Gets a clone of the individual octaves used within this generator","return_type":"org.bukkit.util.noise.NoiseGenerator","return_type_dimension":"[]","parameters":[],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 1D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 1D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 2D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 2D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.noise.NoiseGenerator","interfaces":[],"superclass":"java.lang.Object","comment_text":"Base class for all noise generators","isAbstract":true,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[{"name":"NoiseGenerator","comment_text":"","parameters":[],"throws":[]}],"fields":[{"name":"perm","comment_text":"","type":"int","type_dimension":"[]"},{"name":"offsetX","comment_text":"","type":"double","type_dimension":""},{"name":"offsetY","comment_text":"","type":"double","type_dimension":""},{"name":"offsetZ","comment_text":"","type":"double","type_dimension":""}],"methods":[{"name":"floor","comment_text":"Speedy floor, faster than (int)Math.floor(x)","return_type":"int","return_type_dimension":"","parameters":[{"name":"x","comment_text":"Value to floor","type":"double","type_dimension":""}],"throws":[]},{"name":"fade","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"lerp","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"grad","comment_text":"","return_type":"double","return_type_dimension":"","parameters":[{"name":"hash","comment_text":"","type":"int","type_dimension":""},{"name":"x","comment_text":"","type":"double","type_dimension":""},{"name":"y","comment_text":"","type":"double","type_dimension":""},{"name":"z","comment_text":"","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Computes and returns the 1D noise for the given coordinate in 1D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Computes and returns the 2D noise for the given coordinates in 2D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Computes and returns the 3D noise for the given coordinates in 3D space","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z coordinate","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 1D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 1D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 2D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 2D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""}],"throws":[]},{"name":"noise","comment_text":"Generates noise for the 3D coordinates using the specified number of\n octaves and parameters","return_type":"double","return_type_dimension":"","parameters":[{"name":"x","comment_text":"X-coordinate","type":"double","type_dimension":""},{"name":"y","comment_text":"Y-coordinate","type":"double","type_dimension":""},{"name":"z","comment_text":"Z-coordinate","type":"double","type_dimension":""},{"name":"octaves","comment_text":"Number of octaves to use","type":"int","type_dimension":""},{"name":"frequency","comment_text":"How much to alter the frequency by each octave","type":"double","type_dimension":""},{"name":"amplitude","comment_text":"How much to alter the amplitude by each octave","type":"double","type_dimension":""},{"name":"normalized","comment_text":"If true, normalize the value to [-1, 1]","type":"boolean","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.permissions.DefaultPermissions","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""},{"name":"withLegacy","comment_text":"","type":"boolean","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"perm","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""},{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""}],"throws":[]},{"name":"registerPermission","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"name","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"desc","comment_text":"","type":"java.lang.String","type_dimension":""},{"name":"def","comment_text":"","type":"org.bukkit.permissions.PermissionDefault","type_dimension":""},{"name":"children","comment_text":"","type":"java.util.Map","type_dimension":""},{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]},{"name":"registerCorePermissions","comment_text":"","return_type":"void","return_type_dimension":"","parameters":[],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.permissions.CommandPermissions","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerPermissions","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]}],"enumConstants":[]},{"name":"org.bukkit.util.permissions.BroadcastPermissions","interfaces":[],"superclass":"java.lang.Object","comment_text":"","isAbstract":false,"isInterface":false,"isEnum":false,"since":"","see":[],"constructors":[],"fields":[],"methods":[{"name":"registerPermissions","comment_text":"","return_type":"org.bukkit.permissions.Permission","return_type_dimension":"","parameters":[{"name":"parent","comment_text":"","type":"org.bukkit.permissions.Permission","type_dimension":""}],"throws":[]}],"enumConstants":[]}]}